
FinalProject_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032ac  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003468  08003468  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003468  08003468  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045d0  20000088  080034f8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004658  080034f8  00024658  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007663  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019bd  00000000  00000000  00027757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00029118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000471  00000000  00000000  00029748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000153a  00000000  00000000  00029bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000070f0  00000000  00000000  0002b0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00011040  00000000  00000000  000321e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001618  00000000  00000000  00043224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0004483c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	080033c4 	.word	0x080033c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	080033c4 	.word	0x080033c4

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10a      	bne.n	80002fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002e4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80002e8:	f383 8811 	msr	BASEPRI, r3
 80002ec:	f3bf 8f6f 	isb	sy
 80002f0:	f3bf 8f4f 	dsb	sy
 80002f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002f6:	bf00      	nop
 80002f8:	e7fe      	b.n	80002f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80002fa:	f001 fd07 	bl	8001d0c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000306:	68f9      	ldr	r1, [r7, #12]
 8000308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800030a:	fb01 f303 	mul.w	r3, r1, r3
 800030e:	441a      	add	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2200      	movs	r2, #0
 8000318:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800032a:	3b01      	subs	r3, #1
 800032c:	68f9      	ldr	r1, [r7, #12]
 800032e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000330:	fb01 f303 	mul.w	r3, r1, r3
 8000334:	441a      	add	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	22ff      	movs	r2, #255	; 0xff
 800033e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	22ff      	movs	r2, #255	; 0xff
 8000346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d114      	bne.n	800037a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d01a      	beq.n	800038e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3310      	adds	r3, #16
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f823 	bl	80013a8 <xTaskRemoveFromEventList>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d012      	beq.n	800038e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <xQueueGenericReset+0xcc>)
 800036a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	f3bf 8f4f 	dsb	sy
 8000374:	f3bf 8f6f 	isb	sy
 8000378:	e009      	b.n	800038e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3310      	adds	r3, #16
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fef6 	bl	8000170 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3324      	adds	r3, #36	; 0x24
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fef1 	bl	8000170 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800038e:	f001 fced 	bl	8001d6c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	e000ed04 	.word	0xe000ed04

080003a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	4613      	mov	r3, r2
 80003ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10a      	bne.n	80003ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80003b4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003b8:	f383 8811 	msr	BASEPRI, r3
 80003bc:	f3bf 8f6f 	isb	sy
 80003c0:	f3bf 8f4f 	dsb	sy
 80003c4:	61bb      	str	r3, [r7, #24]
    }
 80003c6:	bf00      	nop
 80003c8:	e7fe      	b.n	80003c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	fb02 f303 	mul.w	r3, r2, r3
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <xQueueGenericCreate+0x48>
 80003da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d101      	bne.n	80003ec <xQueueGenericCreate+0x4c>
 80003e8:	2301      	movs	r3, #1
 80003ea:	e000      	b.n	80003ee <xQueueGenericCreate+0x4e>
 80003ec:	2300      	movs	r3, #0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d10a      	bne.n	8000408 <xQueueGenericCreate+0x68>
        __asm volatile
 80003f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003f6:	f383 8811 	msr	BASEPRI, r3
 80003fa:	f3bf 8f6f 	isb	sy
 80003fe:	f3bf 8f4f 	dsb	sy
 8000402:	617b      	str	r3, [r7, #20]
    }
 8000404:	bf00      	nop
 8000406:	e7fe      	b.n	8000406 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800040e:	d90a      	bls.n	8000426 <xQueueGenericCreate+0x86>
        __asm volatile
 8000410:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000414:	f383 8811 	msr	BASEPRI, r3
 8000418:	f3bf 8f6f 	isb	sy
 800041c:	f3bf 8f4f 	dsb	sy
 8000420:	613b      	str	r3, [r7, #16]
    }
 8000422:	bf00      	nop
 8000424:	e7fe      	b.n	8000424 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000428:	3348      	adds	r3, #72	; 0x48
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fd28 	bl	8001e80 <pvPortMalloc>
 8000430:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000432:	6a3b      	ldr	r3, [r7, #32]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00d      	beq.n	8000454 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000438:	6a3b      	ldr	r3, [r7, #32]
 800043a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3348      	adds	r3, #72	; 0x48
 8000440:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000442:	79fa      	ldrb	r2, [r7, #7]
 8000444:	6a3b      	ldr	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	4613      	mov	r3, r2
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	68b9      	ldr	r1, [r7, #8]
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f000 f805 	bl	800045e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000454:	6a3b      	ldr	r3, [r7, #32]
    }
 8000456:	4618      	mov	r0, r3
 8000458:	3728      	adds	r7, #40	; 0x28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d103      	bne.n	800047a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	69ba      	ldr	r2, [r7, #24]
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	e002      	b.n	8000480 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800048c:	2101      	movs	r1, #1
 800048e:	69b8      	ldr	r0, [r7, #24]
 8000490:	f7ff ff1e 	bl	80002d0 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80004b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10a      	bne.n	80004ce <xQueueGenericSend+0x32>
        __asm volatile
 80004b8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004bc:	f383 8811 	msr	BASEPRI, r3
 80004c0:	f3bf 8f6f 	isb	sy
 80004c4:	f3bf 8f4f 	dsb	sy
 80004c8:	623b      	str	r3, [r7, #32]
    }
 80004ca:	bf00      	nop
 80004cc:	e7fe      	b.n	80004cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <xQueueGenericSend+0x40>
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d101      	bne.n	80004e0 <xQueueGenericSend+0x44>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <xQueueGenericSend+0x46>
 80004e0:	2300      	movs	r3, #0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10a      	bne.n	80004fc <xQueueGenericSend+0x60>
        __asm volatile
 80004e6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004ea:	f383 8811 	msr	BASEPRI, r3
 80004ee:	f3bf 8f6f 	isb	sy
 80004f2:	f3bf 8f4f 	dsb	sy
 80004f6:	61fb      	str	r3, [r7, #28]
    }
 80004f8:	bf00      	nop
 80004fa:	e7fe      	b.n	80004fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d103      	bne.n	800050a <xQueueGenericSend+0x6e>
 8000502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000506:	2b01      	cmp	r3, #1
 8000508:	d101      	bne.n	800050e <xQueueGenericSend+0x72>
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <xQueueGenericSend+0x74>
 800050e:	2300      	movs	r3, #0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <xQueueGenericSend+0x8e>
        __asm volatile
 8000514:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	61bb      	str	r3, [r7, #24]
    }
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800052a:	f001 fbef 	bl	8001d0c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000536:	429a      	cmp	r2, r3
 8000538:	d302      	bcc.n	8000540 <xQueueGenericSend+0xa4>
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d129      	bne.n	8000594 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	68b9      	ldr	r1, [r7, #8]
 8000544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000546:	f000 f957 	bl	80007f8 <prvCopyDataToQueue>
 800054a:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	2b00      	cmp	r3, #0
 8000552:	d010      	beq.n	8000576 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000556:	3324      	adds	r3, #36	; 0x24
 8000558:	4618      	mov	r0, r3
 800055a:	f000 ff25 	bl	80013a8 <xTaskRemoveFromEventList>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000564:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <xQueueGenericSend+0x1c8>)
 8000566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	f3bf 8f4f 	dsb	sy
 8000570:	f3bf 8f6f 	isb	sy
 8000574:	e00a      	b.n	800058c <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <xQueueGenericSend+0x1c8>)
 800057e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	f3bf 8f4f 	dsb	sy
 8000588:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800058c:	f001 fbee 	bl	8001d6c <vPortExitCritical>
                return pdPASS;
 8000590:	2301      	movs	r3, #1
 8000592:	e063      	b.n	800065c <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800059a:	f001 fbe7 	bl	8001d6c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	e05c      	b.n	800065c <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d106      	bne.n	80005b6 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 ff5d 	bl	800146c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80005b6:	f001 fbd9 	bl	8001d6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80005ba:	f000 fd15 	bl	8000fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80005be:	f001 fba5 	bl	8001d0c <vPortEnterCritical>
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ce:	d103      	bne.n	80005d8 <xQueueGenericSend+0x13c>
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d103      	bne.n	80005ee <xQueueGenericSend+0x152>
 80005e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005ee:	f001 fbbd 	bl	8001d6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 ff4c 	bl	8001498 <xTaskCheckForTimeOut>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d124      	bne.n	8000650 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000608:	f000 f9ee 	bl	80009e8 <prvIsQueueFull>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d018      	beq.n	8000644 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000614:	3310      	adds	r3, #16
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fea0 	bl	8001360 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000622:	f000 f979 	bl	8000918 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000626:	f000 fced 	bl	8001004 <xTaskResumeAll>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	f47f af7c 	bne.w	800052a <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <xQueueGenericSend+0x1c8>)
 8000634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	e772      	b.n	800052a <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000646:	f000 f967 	bl	8000918 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800064a:	f000 fcdb 	bl	8001004 <xTaskResumeAll>
 800064e:	e76c      	b.n	800052a <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000652:	f000 f961 	bl	8000918 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000656:	f000 fcd5 	bl	8001004 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800065a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800065c:	4618      	mov	r0, r3
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	e000ed04 	.word	0xe000ed04

08000668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10a      	bne.n	8000698 <xQueueReceive+0x30>
        __asm volatile
 8000682:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	623b      	str	r3, [r7, #32]
    }
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <xQueueReceive+0x3e>
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <xQueueReceive+0x42>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <xQueueReceive+0x44>
 80006aa:	2300      	movs	r3, #0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10a      	bne.n	80006c6 <xQueueReceive+0x5e>
        __asm volatile
 80006b0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	61fb      	str	r3, [r7, #28]
    }
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006c6:	f001 fb21 	bl	8001d0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01f      	beq.n	8000716 <xQueueReceive+0xae>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006da:	f000 f8f7 	bl	80008cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00f      	beq.n	800070e <xQueueReceive+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	3310      	adds	r3, #16
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fe58 	bl	80013a8 <xTaskRemoveFromEventList>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <xQueueReceive+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <xQueueReceive+0x18c>)
 8000700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800070e:	f001 fb2d 	bl	8001d6c <vPortExitCritical>
                return pdPASS;
 8000712:	2301      	movs	r3, #1
 8000714:	e069      	b.n	80007ea <xQueueReceive+0x182>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800071c:	f001 fb26 	bl	8001d6c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000720:	2300      	movs	r3, #0
 8000722:	e062      	b.n	80007ea <xQueueReceive+0x182>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	2b00      	cmp	r3, #0
 8000728:	d106      	bne.n	8000738 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fe9c 	bl	800146c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000738:	f001 fb18 	bl	8001d6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800073c:	f000 fc54 	bl	8000fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000740:	f001 fae4 	bl	8001d0c <vPortEnterCritical>
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800074a:	b25b      	sxtb	r3, r3
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000750:	d103      	bne.n	800075a <xQueueReceive+0xf2>
 8000752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000760:	b25b      	sxtb	r3, r3
 8000762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000766:	d103      	bne.n	8000770 <xQueueReceive+0x108>
 8000768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000770:	f001 fafc 	bl	8001d6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe8b 	bl	8001498 <xTaskCheckForTimeOut>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d123      	bne.n	80007d0 <xQueueReceive+0x168>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800078a:	f000 f917 	bl	80009bc <prvIsQueueEmpty>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d017      	beq.n	80007c4 <xQueueReceive+0x15c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000796:	3324      	adds	r3, #36	; 0x24
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fddf 	bl	8001360 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007a4:	f000 f8b8 	bl	8000918 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80007a8:	f000 fc2c 	bl	8001004 <xTaskResumeAll>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d189      	bne.n	80006c6 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <xQueueReceive+0x18c>)
 80007b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	e780      	b.n	80006c6 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80007c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007c6:	f000 f8a7 	bl	8000918 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80007ca:	f000 fc1b 	bl	8001004 <xTaskResumeAll>
 80007ce:	e77a      	b.n	80006c6 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80007d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007d2:	f000 f8a1 	bl	8000918 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80007d6:	f000 fc15 	bl	8001004 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007dc:	f000 f8ee 	bl	80009bc <prvIsQueueEmpty>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f43f af6f 	beq.w	80006c6 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80007e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3730      	adds	r7, #48	; 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000ed04 	.word	0xe000ed04

080007f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10d      	bne.n	8000832 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d14d      	bne.n	80008ba <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 ff5a 	bl	80016dc <xTaskPriorityDisinherit>
 8000828:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	e043      	b.n	80008ba <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d119      	bne.n	800086c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6858      	ldr	r0, [r3, #4]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	461a      	mov	r2, r3
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	f002 fdb0 	bl	80033a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	441a      	add	r2, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	d32b      	bcc.n	80008ba <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	e026      	b.n	80008ba <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	68d8      	ldr	r0, [r3, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	461a      	mov	r2, r3
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	f002 fd96 	bl	80033a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	68da      	ldr	r2, [r3, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	425b      	negs	r3, r3
 8000886:	441a      	add	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d207      	bcs.n	80008a8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	425b      	negs	r3, r3
 80008a2:	441a      	add	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d105      	bne.n	80008ba <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80008c2:	697b      	ldr	r3, [r7, #20]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d018      	beq.n	8000910 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68da      	ldr	r2, [r3, #12]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	441a      	add	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d303      	bcc.n	8000900 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68d9      	ldr	r1, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	461a      	mov	r2, r3
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f002 fd4c 	bl	80033a8 <memcpy>
    }
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000920:	f001 f9f4 	bl	8001d0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800092a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800092c:	e011      	b.n	8000952 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	2b00      	cmp	r3, #0
 8000934:	d012      	beq.n	800095c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3324      	adds	r3, #36	; 0x24
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fd34 	bl	80013a8 <xTaskRemoveFromEventList>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000946:	f000 fe0d 	bl	8001564 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3b01      	subs	r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dce9      	bgt.n	800092e <prvUnlockQueue+0x16>
 800095a:	e000      	b.n	800095e <prvUnlockQueue+0x46>
                        break;
 800095c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000966:	f001 fa01 	bl	8001d6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800096a:	f001 f9cf 	bl	8001d0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000974:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000976:	e011      	b.n	800099c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d012      	beq.n	80009a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3310      	adds	r3, #16
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd0f 	bl	80013a8 <xTaskRemoveFromEventList>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000990:	f000 fde8 	bl	8001564 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	3b01      	subs	r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800099c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dce9      	bgt.n	8000978 <prvUnlockQueue+0x60>
 80009a4:	e000      	b.n	80009a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80009a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80009b0:	f001 f9dc 	bl	8001d6c <vPortExitCritical>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80009c4:	f001 f9a2 	bl	8001d0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e001      	b.n	80009da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80009da:	f001 f9c7 	bl	8001d6c <vPortExitCritical>

    return xReturn;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80009f0:	f001 f98c 	bl	8001d0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d102      	bne.n	8000a06 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	e001      	b.n	8000a0a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000a0a:	f001 f9af 	bl	8001d6c <vPortExitCritical>

    return xReturn;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af04      	add	r7, sp, #16
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fa27 	bl	8001e80 <pvPortMalloc>
 8000a32:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00e      	beq.n	8000a58 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000a3a:	2054      	movs	r0, #84	; 0x54
 8000a3c:	f001 fa20 	bl	8001e80 <pvPortMalloc>
 8000a40:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a4e:	e005      	b.n	8000a5c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000a50:	6978      	ldr	r0, [r7, #20]
 8000a52:	f001 faf5 	bl	8002040 <vPortFree>
 8000a56:	e001      	b.n	8000a5c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d013      	beq.n	8000a8a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	2300      	movs	r3, #0
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f80e 	bl	8000a9a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000a7e:	69f8      	ldr	r0, [r7, #28]
 8000a80:	f000 f89a 	bl	8000bb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	e002      	b.n	8000a90 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000a90:	69bb      	ldr	r3, [r7, #24]
    }
 8000a92:	4618      	mov	r0, r3
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b088      	sub	sp, #32
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <prvInitialiseNewTask+0x48>
        __asm volatile
 8000acc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ad0:	f383 8811 	msr	BASEPRI, r3
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	f3bf 8f4f 	dsb	sy
 8000adc:	617b      	str	r3, [r7, #20]
    }
 8000ade:	bf00      	nop
 8000ae0:	e7fe      	b.n	8000ae0 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d01f      	beq.n	8000b28 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	e012      	b.n	8000b14 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	4413      	add	r3, r2
 8000af4:	7819      	ldrb	r1, [r3, #0]
 8000af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	4413      	add	r3, r2
 8000afc:	3334      	adds	r3, #52	; 0x34
 8000afe:	460a      	mov	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d9e9      	bls.n	8000aee <prvInitialiseNewTask+0x54>
 8000b1a:	e000      	b.n	8000b1e <prvInitialiseNewTask+0x84>
            {
                break;
 8000b1c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000b26:	e003      	b.n	8000b30 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d901      	bls.n	8000b3a <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000b36:	2304      	movs	r3, #4
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8000b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b48:	2200      	movs	r2, #0
 8000b4a:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4e:	3304      	adds	r3, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb2c 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b58:	3318      	adds	r3, #24
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fb27 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b64:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b68:	f1c3 0205 	rsb	r2, r3, #5
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	334c      	adds	r3, #76	; 0x4c
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fbe5 	bl	800334e <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b86:	3350      	adds	r3, #80	; 0x50
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 fbde 	bl	800334e <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	69b8      	ldr	r0, [r7, #24]
 8000b98:	f000 ffd4 	bl	8001b44 <pxPortInitialiseStack>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000bc0:	f001 f8a4 	bl	8001d0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <prvAddNewTaskToReadyList+0xb8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <prvAddNewTaskToReadyList+0xb8>)
 8000bcc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <prvAddNewTaskToReadyList+0xb8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d110      	bne.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000be4:	f000 fce2 	bl	80015ac <prvInitialiseTaskLists>
 8000be8:	e00d      	b.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <prvAddNewTaskToReadyList+0xc0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d109      	bne.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d802      	bhi.n	8000c06 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <prvAddNewTaskToReadyList+0xc4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <prvAddNewTaskToReadyList+0xc4>)
 8000c0e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	2201      	movs	r2, #1
 8000c16:	409a      	lsls	r2, r3
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <prvAddNewTaskToReadyList+0xc8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <prvAddNewTaskToReadyList+0xc8>)
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <prvAddNewTaskToReadyList+0xcc>)
 8000c30:	441a      	add	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3304      	adds	r3, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff fac4 	bl	80001c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000c3e:	f001 f895 	bl	8001d6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <prvAddNewTaskToReadyList+0xc0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00e      	beq.n	8000c68 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <prvAddNewTaskToReadyList+0xbc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <prvAddNewTaskToReadyList+0xd0>)
 8000c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	f3bf 8f4f 	dsb	sy
 8000c64:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000017c 	.word	0x2000017c
 8000c74:	200000a4 	.word	0x200000a4
 8000c78:	20000188 	.word	0x20000188
 8000c7c:	20000198 	.word	0x20000198
 8000c80:	20000184 	.word	0x20000184
 8000c84:	200000a8 	.word	0x200000a8
 8000c88:	e000ed04 	.word	0xe000ed04

08000c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d017      	beq.n	8000cce <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <vTaskDelay+0x60>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00a      	beq.n	8000cbc <vTaskDelay+0x30>
        __asm volatile
 8000ca6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000caa:	f383 8811 	msr	BASEPRI, r3
 8000cae:	f3bf 8f6f 	isb	sy
 8000cb2:	f3bf 8f4f 	dsb	sy
 8000cb6:	60bb      	str	r3, [r7, #8]
    }
 8000cb8:	bf00      	nop
 8000cba:	e7fe      	b.n	8000cba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000cbc:	f000 f994 	bl	8000fe8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fed8 	bl	8001a78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000cc8:	f000 f99c 	bl	8001004 <xTaskResumeAll>
 8000ccc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d107      	bne.n	8000ce4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <vTaskDelay+0x64>)
 8000cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001a4 	.word	0x200001a4
 8000cf0:	e000ed04 	.word	0xe000ed04

08000cf4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000cfc:	f001 f806 	bl	8001d0c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <vTaskSuspend+0x18>
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <vTaskSuspend+0x120>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	e000      	b.n	8000d0e <vTaskSuspend+0x1a>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	3304      	adds	r3, #4
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fab1 	bl	800027c <uxListRemove>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d115      	bne.n	8000d4c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d24:	493c      	ldr	r1, [pc, #240]	; (8000e18 <vTaskSuspend+0x124>)
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10a      	bne.n	8000d4c <vTaskSuspend+0x58>
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43da      	mvns	r2, r3
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <vTaskSuspend+0x128>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4013      	ands	r3, r2
 8000d48:	4a34      	ldr	r2, [pc, #208]	; (8000e1c <vTaskSuspend+0x128>)
 8000d4a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	3318      	adds	r3, #24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa8f 	bl	800027c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	3304      	adds	r3, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	482e      	ldr	r0, [pc, #184]	; (8000e20 <vTaskSuspend+0x12c>)
 8000d66:	f7ff fa2e 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e010      	b.n	8000d92 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4413      	add	r3, r2
 8000d76:	3350      	adds	r3, #80	; 0x50
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	4413      	add	r3, r2
 8000d86:	3350      	adds	r3, #80	; 0x50
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	ddeb      	ble.n	8000d70 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000d98:	f000 ffe8 	bl	8001d6c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <vTaskSuspend+0x130>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d005      	beq.n	8000db0 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000da4:	f000 ffb2 	bl	8001d0c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000da8:	f000 fc7e 	bl	80016a8 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000dac:	f000 ffde 	bl	8001d6c <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <vTaskSuspend+0x120>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d127      	bne.n	8000e0a <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <vTaskSuspend+0x130>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d017      	beq.n	8000df2 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <vTaskSuspend+0x134>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00a      	beq.n	8000de0 <vTaskSuspend+0xec>
        __asm volatile
 8000dca:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	60fb      	str	r3, [r7, #12]
    }
 8000ddc:	bf00      	nop
 8000dde:	e7fe      	b.n	8000dde <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <vTaskSuspend+0x138>)
 8000de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	f3bf 8f4f 	dsb	sy
 8000dec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000df0:	e00b      	b.n	8000e0a <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <vTaskSuspend+0x12c>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <vTaskSuspend+0x13c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d103      	bne.n	8000e06 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <vTaskSuspend+0x120>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
    }
 8000e04:	e001      	b.n	8000e0a <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8000e06:	f000 fa51 	bl	80012ac <vTaskSwitchContext>
    }
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000a4 	.word	0x200000a4
 8000e18:	200000a8 	.word	0x200000a8
 8000e1c:	20000184 	.word	0x20000184
 8000e20:	20000168 	.word	0x20000168
 8000e24:	20000188 	.word	0x20000188
 8000e28:	200001a4 	.word	0x200001a4
 8000e2c:	e000ed04 	.word	0xe000ed04
 8000e30:	2000017c 	.word	0x2000017c

08000e34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10a      	bne.n	8000e60 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8000e4a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e4e:	f383 8811 	msr	BASEPRI, r3
 8000e52:	f3bf 8f6f 	isb	sy
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	60fb      	str	r3, [r7, #12]
    }
 8000e5c:	bf00      	nop
 8000e5e:	e7fe      	b.n	8000e5e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <prvTaskIsTaskSuspended+0x58>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10a      	bne.n	8000e80 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <prvTaskIsTaskSuspended+0x5c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d005      	beq.n	8000e80 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000e80:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000e82:	4618      	mov	r0, r3
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000168 	.word	0x20000168
 8000e90:	2000013c 	.word	0x2000013c

08000e94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10a      	bne.n	8000ebc <vTaskResume+0x28>
        __asm volatile
 8000ea6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000eaa:	f383 8811 	msr	BASEPRI, r3
 8000eae:	f3bf 8f6f 	isb	sy
 8000eb2:	f3bf 8f4f 	dsb	sy
 8000eb6:	60bb      	str	r3, [r7, #8]
    }
 8000eb8:	bf00      	nop
 8000eba:	e7fe      	b.n	8000eba <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <vTaskResume+0xac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d037      	beq.n	8000f36 <vTaskResume+0xa2>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d034      	beq.n	8000f36 <vTaskResume+0xa2>
        {
            taskENTER_CRITICAL();
 8000ecc:	f000 ff1e 	bl	8001d0c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ffaf 	bl	8000e34 <prvTaskIsTaskSuspended>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d02a      	beq.n	8000f32 <vTaskResume+0x9e>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f9cb 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	2201      	movs	r2, #1
 8000eec:	409a      	lsls	r2, r3
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <vTaskResume+0xb0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <vTaskResume+0xb0>)
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <vTaskResume+0xb4>)
 8000f06:	441a      	add	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4610      	mov	r0, r2
 8000f10:	f7ff f959 	bl	80001c6 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <vTaskResume+0xac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d307      	bcc.n	8000f32 <vTaskResume+0x9e>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <vTaskResume+0xb8>)
 8000f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	f3bf 8f4f 	dsb	sy
 8000f2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000f32:	f000 ff1b 	bl	8001d6c <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000a4 	.word	0x200000a4
 8000f44:	20000184 	.word	0x20000184
 8000f48:	200000a8 	.word	0x200000a8
 8000f4c:	e000ed04 	.word	0xe000ed04

08000f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <vTaskStartScheduler+0x7c>)
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	491b      	ldr	r1, [pc, #108]	; (8000fd0 <vTaskStartScheduler+0x80>)
 8000f64:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <vTaskStartScheduler+0x84>)
 8000f66:	f7ff fd57 	bl	8000a18 <xTaskCreate>
 8000f6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d116      	bne.n	8000fa0 <vTaskStartScheduler+0x50>
        __asm volatile
 8000f72:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f76:	f383 8811 	msr	BASEPRI, r3
 8000f7a:	f3bf 8f6f 	isb	sy
 8000f7e:	f3bf 8f4f 	dsb	sy
 8000f82:	60bb      	str	r3, [r7, #8]
    }
 8000f84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <vTaskStartScheduler+0x88>)
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <vTaskStartScheduler+0x8c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <vTaskStartScheduler+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000f9a:	f000 fe57 	bl	8001c4c <xPortStartScheduler>
 8000f9e:	e00e      	b.n	8000fbe <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa6:	d10a      	bne.n	8000fbe <vTaskStartScheduler+0x6e>
        __asm volatile
 8000fa8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000fac:	f383 8811 	msr	BASEPRI, r3
 8000fb0:	f3bf 8f6f 	isb	sy
 8000fb4:	f3bf 8f4f 	dsb	sy
 8000fb8:	607b      	str	r3, [r7, #4]
    }
 8000fba:	bf00      	nop
 8000fbc:	e7fe      	b.n	8000fbc <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <vTaskStartScheduler+0x94>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001a0 	.word	0x200001a0
 8000fd0:	080033dc 	.word	0x080033dc
 8000fd4:	0800157d 	.word	0x0800157d
 8000fd8:	2000019c 	.word	0x2000019c
 8000fdc:	20000188 	.word	0x20000188
 8000fe0:	20000180 	.word	0x20000180
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <vTaskSuspendAll+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a03      	ldr	r2, [pc, #12]	; (8001000 <vTaskSuspendAll+0x18>)
 8000ff4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200001a4 	.word	0x200001a4

08001004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <xTaskResumeAll+0x114>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10a      	bne.n	8001030 <xTaskResumeAll+0x2c>
        __asm volatile
 800101a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800101e:	f383 8811 	msr	BASEPRI, r3
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	603b      	str	r3, [r7, #0]
    }
 800102c:	bf00      	nop
 800102e:	e7fe      	b.n	800102e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001030:	f000 fe6c 	bl	8001d0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <xTaskResumeAll+0x114>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a37      	ldr	r2, [pc, #220]	; (8001118 <xTaskResumeAll+0x114>)
 800103c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <xTaskResumeAll+0x114>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d161      	bne.n	800110a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <xTaskResumeAll+0x118>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d05d      	beq.n	800110a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800104e:	e02e      	b.n	80010ae <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <xTaskResumeAll+0x11c>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3318      	adds	r3, #24
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f90d 	bl	800027c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f908 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2201      	movs	r2, #1
 8001072:	409a      	lsls	r2, r3
 8001074:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <xTaskResumeAll+0x120>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <xTaskResumeAll+0x120>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <xTaskResumeAll+0x124>)
 800108c:	441a      	add	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff f896 	bl	80001c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <xTaskResumeAll+0x128>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d302      	bcc.n	80010ae <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <xTaskResumeAll+0x12c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <xTaskResumeAll+0x11c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1cc      	bne.n	8001050 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80010bc:	f000 faf4 	bl	80016a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <xTaskResumeAll+0x130>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d010      	beq.n	80010ee <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80010cc:	f000 f836 	bl	800113c <xTaskIncrementTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <xTaskResumeAll+0x12c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f1      	bne.n	80010cc <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <xTaskResumeAll+0x130>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <xTaskResumeAll+0x12c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <xTaskResumeAll+0x134>)
 80010fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	f3bf 8f4f 	dsb	sy
 8001106:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800110a:	f000 fe2f 	bl	8001d6c <vPortExitCritical>

    return xAlreadyYielded;
 800110e:	68bb      	ldr	r3, [r7, #8]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200001a4 	.word	0x200001a4
 800111c:	2000017c 	.word	0x2000017c
 8001120:	2000013c 	.word	0x2000013c
 8001124:	20000184 	.word	0x20000184
 8001128:	200000a8 	.word	0x200000a8
 800112c:	200000a4 	.word	0x200000a4
 8001130:	20000190 	.word	0x20000190
 8001134:	2000018c 	.word	0x2000018c
 8001138:	e000ed04 	.word	0xe000ed04

0800113c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <xTaskIncrementTick+0x144>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 808e 	bne.w	800126c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001150:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <xTaskIncrementTick+0x148>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001158:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <xTaskIncrementTick+0x148>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d120      	bne.n	80011a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <xTaskIncrementTick+0x14c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <xTaskIncrementTick+0x48>
        __asm volatile
 800116e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001172:	f383 8811 	msr	BASEPRI, r3
 8001176:	f3bf 8f6f 	isb	sy
 800117a:	f3bf 8f4f 	dsb	sy
 800117e:	603b      	str	r3, [r7, #0]
    }
 8001180:	bf00      	nop
 8001182:	e7fe      	b.n	8001182 <xTaskIncrementTick+0x46>
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <xTaskIncrementTick+0x14c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <xTaskIncrementTick+0x150>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a3e      	ldr	r2, [pc, #248]	; (8001288 <xTaskIncrementTick+0x14c>)
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4a3e      	ldr	r2, [pc, #248]	; (800128c <xTaskIncrementTick+0x150>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <xTaskIncrementTick+0x154>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a3c      	ldr	r2, [pc, #240]	; (8001290 <xTaskIncrementTick+0x154>)
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	f000 fa81 	bl	80016a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <xTaskIncrementTick+0x158>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d348      	bcc.n	8001242 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <xTaskIncrementTick+0x14c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d104      	bne.n	80011c4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <xTaskIncrementTick+0x158>)
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	601a      	str	r2, [r3, #0]
                    break;
 80011c2:	e03e      	b.n	8001242 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011c4:	4b30      	ldr	r3, [pc, #192]	; (8001288 <xTaskIncrementTick+0x14c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d203      	bcs.n	80011e4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80011dc:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <xTaskIncrementTick+0x158>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80011e2:	e02e      	b.n	8001242 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3304      	adds	r3, #4
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f847 	bl	800027c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3318      	adds	r3, #24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f83e 	bl	800027c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2201      	movs	r2, #1
 8001206:	409a      	lsls	r2, r3
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <xTaskIncrementTick+0x15c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4313      	orrs	r3, r2
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <xTaskIncrementTick+0x15c>)
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <xTaskIncrementTick+0x160>)
 8001220:	441a      	add	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3304      	adds	r3, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f7fe ffcc 	bl	80001c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <xTaskIncrementTick+0x164>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	429a      	cmp	r2, r3
 800123a:	d3b9      	bcc.n	80011b0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001240:	e7b6      	b.n	80011b0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <xTaskIncrementTick+0x164>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001248:	4914      	ldr	r1, [pc, #80]	; (800129c <xTaskIncrementTick+0x160>)
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d901      	bls.n	800125e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <xTaskIncrementTick+0x168>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e004      	b.n	8001276 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <xTaskIncrementTick+0x16c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <xTaskIncrementTick+0x16c>)
 8001274:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001276:	697b      	ldr	r3, [r7, #20]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001a4 	.word	0x200001a4
 8001284:	20000180 	.word	0x20000180
 8001288:	20000134 	.word	0x20000134
 800128c:	20000138 	.word	0x20000138
 8001290:	20000194 	.word	0x20000194
 8001294:	2000019c 	.word	0x2000019c
 8001298:	20000184 	.word	0x20000184
 800129c:	200000a8 	.word	0x200000a8
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	20000190 	.word	0x20000190
 80012a8:	2000018c 	.word	0x2000018c

080012ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <vTaskSwitchContext+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <vTaskSwitchContext+0xa4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80012c0:	e03f      	b.n	8001342 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <vTaskSwitchContext+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <vTaskSwitchContext+0xa8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	f1c3 031f 	rsb	r3, r3, #31
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	491e      	ldr	r1, [pc, #120]	; (8001358 <vTaskSwitchContext+0xac>)
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10a      	bne.n	8001308 <vTaskSwitchContext+0x5c>
        __asm volatile
 80012f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80012f6:	f383 8811 	msr	BASEPRI, r3
 80012fa:	f3bf 8f6f 	isb	sy
 80012fe:	f3bf 8f4f 	dsb	sy
 8001302:	607b      	str	r3, [r7, #4]
    }
 8001304:	bf00      	nop
 8001306:	e7fe      	b.n	8001306 <vTaskSwitchContext+0x5a>
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <vTaskSwitchContext+0xac>)
 8001314:	4413      	add	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	3308      	adds	r3, #8
 800132a:	429a      	cmp	r2, r3
 800132c:	d104      	bne.n	8001338 <vTaskSwitchContext+0x8c>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <vTaskSwitchContext+0xb0>)
 8001340:	6013      	str	r3, [r2, #0]
}
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	200001a4 	.word	0x200001a4
 8001350:	20000190 	.word	0x20000190
 8001354:	20000184 	.word	0x20000184
 8001358:	200000a8 	.word	0x200000a8
 800135c:	200000a4 	.word	0x200000a4

08001360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001370:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001374:	f383 8811 	msr	BASEPRI, r3
 8001378:	f3bf 8f6f 	isb	sy
 800137c:	f3bf 8f4f 	dsb	sy
 8001380:	60fb      	str	r3, [r7, #12]
    }
 8001382:	bf00      	nop
 8001384:	e7fe      	b.n	8001384 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <vTaskPlaceOnEventList+0x44>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3318      	adds	r3, #24
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7fe ff3c 	bl	800020c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001394:	2101      	movs	r1, #1
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f000 fb6e 	bl	8001a78 <prvAddCurrentTaskToDelayedList>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000a4 	.word	0x200000a4

080013a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10a      	bne.n	80013d4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80013be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80013c2:	f383 8811 	msr	BASEPRI, r3
 80013c6:	f3bf 8f6f 	isb	sy
 80013ca:	f3bf 8f4f 	dsb	sy
 80013ce:	60fb      	str	r3, [r7, #12]
    }
 80013d0:	bf00      	nop
 80013d2:	e7fe      	b.n	80013d2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	3318      	adds	r3, #24
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff4f 	bl	800027c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <xTaskRemoveFromEventList+0xac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d11c      	bne.n	8001420 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3304      	adds	r3, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff46 	bl	800027c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2201      	movs	r2, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <xTaskRemoveFromEventList+0xb0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <xTaskRemoveFromEventList+0xb0>)
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <xTaskRemoveFromEventList+0xb4>)
 8001410:	441a      	add	r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3304      	adds	r3, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7fe fed4 	bl	80001c6 <vListInsertEnd>
 800141e:	e005      	b.n	800142c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3318      	adds	r3, #24
 8001424:	4619      	mov	r1, r3
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <xTaskRemoveFromEventList+0xb8>)
 8001428:	f7fe fecd 	bl	80001c6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <xTaskRemoveFromEventList+0xbc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	429a      	cmp	r2, r3
 8001438:	d905      	bls.n	8001446 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <xTaskRemoveFromEventList+0xc0>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e001      	b.n	800144a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800144a:	697b      	ldr	r3, [r7, #20]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200001a4 	.word	0x200001a4
 8001458:	20000184 	.word	0x20000184
 800145c:	200000a8 	.word	0x200000a8
 8001460:	2000013c 	.word	0x2000013c
 8001464:	200000a4 	.word	0x200000a4
 8001468:	20000190 	.word	0x20000190

0800146c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <vTaskInternalSetTimeOutState+0x24>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <vTaskInternalSetTimeOutState+0x28>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	605a      	str	r2, [r3, #4]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000194 	.word	0x20000194
 8001494:	20000180 	.word	0x20000180

08001498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10a      	bne.n	80014be <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80014a8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	f3bf 8f6f 	isb	sy
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	613b      	str	r3, [r7, #16]
    }
 80014ba:	bf00      	nop
 80014bc:	e7fe      	b.n	80014bc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10a      	bne.n	80014da <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80014c4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80014c8:	f383 8811 	msr	BASEPRI, r3
 80014cc:	f3bf 8f6f 	isb	sy
 80014d0:	f3bf 8f4f 	dsb	sy
 80014d4:	60fb      	str	r3, [r7, #12]
    }
 80014d6:	bf00      	nop
 80014d8:	e7fe      	b.n	80014d8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80014da:	f000 fc17 	bl	8001d0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <xTaskCheckForTimeOut+0xc4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d102      	bne.n	80014fe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e026      	b.n	800154c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <xTaskCheckForTimeOut+0xc8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d00a      	beq.n	8001520 <xTaskCheckForTimeOut+0x88>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	429a      	cmp	r2, r3
 8001512:	d305      	bcc.n	8001520 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e015      	b.n	800154c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	429a      	cmp	r2, r3
 8001528:	d20b      	bcs.n	8001542 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff98 	bl	800146c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	e004      	b.n	800154c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800154c:	f000 fc0e 	bl	8001d6c <vPortExitCritical>

    return xReturn;
 8001550:	69fb      	ldr	r3, [r7, #28]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000180 	.word	0x20000180
 8001560:	20000194 	.word	0x20000194

08001564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <vTaskMissedYield+0x14>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000190 	.word	0x20000190

0800157c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001584:	f000 f852 	bl	800162c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <prvIdleTask+0x28>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d9f9      	bls.n	8001584 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <prvIdleTask+0x2c>)
 8001592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f3bf 8f4f 	dsb	sy
 800159c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80015a0:	e7f0      	b.n	8001584 <prvIdleTask+0x8>
 80015a2:	bf00      	nop
 80015a4:	200000a8 	.word	0x200000a8
 80015a8:	e000ed04 	.word	0xe000ed04

080015ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	e00c      	b.n	80015d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <prvInitialiseTaskLists+0x60>)
 80015c4:	4413      	add	r3, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fdd2 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d9ef      	bls.n	80015b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <prvInitialiseTaskLists+0x64>)
 80015da:	f7fe fdc9 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <prvInitialiseTaskLists+0x68>)
 80015e0:	f7fe fdc6 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <prvInitialiseTaskLists+0x6c>)
 80015e6:	f7fe fdc3 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <prvInitialiseTaskLists+0x70>)
 80015ec:	f7fe fdc0 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <prvInitialiseTaskLists+0x74>)
 80015f2:	f7fe fdbd 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <prvInitialiseTaskLists+0x78>)
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <prvInitialiseTaskLists+0x64>)
 80015fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <prvInitialiseTaskLists+0x7c>)
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <prvInitialiseTaskLists+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000a8 	.word	0x200000a8
 8001610:	2000010c 	.word	0x2000010c
 8001614:	20000120 	.word	0x20000120
 8001618:	2000013c 	.word	0x2000013c
 800161c:	20000150 	.word	0x20000150
 8001620:	20000168 	.word	0x20000168
 8001624:	20000134 	.word	0x20000134
 8001628:	20000138 	.word	0x20000138

0800162c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001632:	e019      	b.n	8001668 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001634:	f000 fb6a 	bl	8001d0c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <prvCheckTasksWaitingTermination+0x50>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe fe19 	bl	800027c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <prvCheckTasksWaitingTermination+0x54>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <prvCheckTasksWaitingTermination+0x54>)
 8001652:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <prvCheckTasksWaitingTermination+0x58>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3b01      	subs	r3, #1
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <prvCheckTasksWaitingTermination+0x58>)
 800165c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800165e:	f000 fb85 	bl	8001d6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f810 	bl	8001688 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <prvCheckTasksWaitingTermination+0x58>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e1      	bne.n	8001634 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000150 	.word	0x20000150
 8001680:	2000017c 	.word	0x2000017c
 8001684:	20000164 	.word	0x20000164

08001688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fcd3 	bl	8002040 <vPortFree>
                vPortFree( pxTCB );
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fcd0 	bl	8002040 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <prvResetNextTaskUnblockTime+0x2c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <prvResetNextTaskUnblockTime+0x30>)
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80016be:	e005      	b.n	80016cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <prvResetNextTaskUnblockTime+0x2c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <prvResetNextTaskUnblockTime+0x30>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000134 	.word	0x20000134
 80016d8:	2000019c 	.word	0x2000019c

080016dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d063      	beq.n	80017ba <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80016f2:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <xTaskPriorityDisinherit+0xe8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d00a      	beq.n	8001712 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80016fc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001700:	f383 8811 	msr	BASEPRI, r3
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	60fb      	str	r3, [r7, #12]
    }
 800170e:	bf00      	nop
 8001710:	e7fe      	b.n	8001710 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10a      	bne.n	8001730 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800171a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800171e:	f383 8811 	msr	BASEPRI, r3
 8001722:	f3bf 8f6f 	isb	sy
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	60bb      	str	r3, [r7, #8]
    }
 800172c:	bf00      	nop
 800172e:	e7fe      	b.n	800172e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	429a      	cmp	r2, r3
 8001744:	d039      	beq.n	80017ba <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	2b00      	cmp	r3, #0
 800174c:	d135      	bne.n	80017ba <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3304      	adds	r3, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fd92 	bl	800027c <uxListRemove>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	2201      	movs	r2, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43da      	mvns	r2, r3
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <xTaskPriorityDisinherit+0xec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4013      	ands	r3, r2
 8001770:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <xTaskPriorityDisinherit+0xec>)
 8001772:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f1c3 0205 	rsb	r2, r3, #5
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	2201      	movs	r2, #1
 800178e:	409a      	lsls	r2, r3
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <xTaskPriorityDisinherit+0xec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4313      	orrs	r3, r2
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <xTaskPriorityDisinherit+0xec>)
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <xTaskPriorityDisinherit+0xf0>)
 80017a8:	441a      	add	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	3304      	adds	r3, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f7fe fd08 	bl	80001c6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80017ba:	697b      	ldr	r3, [r7, #20]
    }
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000a4 	.word	0x200000a4
 80017c8:	20000184 	.word	0x20000184
 80017cc:	200000a8 	.word	0x200000a8

080017d0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 80017e2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	613b      	str	r3, [r7, #16]
    }
 80017f4:	bf00      	nop
 80017f6:	e7fe      	b.n	80017f6 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 80017f8:	f000 fa88 	bl	8001d0c <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <ulTaskGenericNotifyTake+0xd0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3312      	adds	r3, #18
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d115      	bne.n	800183a <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <ulTaskGenericNotifyTake+0xd0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	3350      	adds	r3, #80	; 0x50
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001822:	2101      	movs	r1, #1
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f927 	bl	8001a78 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <ulTaskGenericNotifyTake+0xd4>)
 800182c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f3bf 8f4f 	dsb	sy
 8001836:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800183a:	f000 fa97 	bl	8001d6c <vPortExitCritical>

        taskENTER_CRITICAL();
 800183e:	f000 fa65 	bl	8001d0c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <ulTaskGenericNotifyTake+0xd0>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3312      	adds	r3, #18
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d014      	beq.n	8001882 <ulTaskGenericNotifyTake+0xb2>
            {
                if( xClearCountOnExit != pdFALSE )
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <ulTaskGenericNotifyTake+0xa0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <ulTaskGenericNotifyTake+0xd0>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3312      	adds	r3, #18
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e008      	b.n	8001882 <ulTaskGenericNotifyTake+0xb2>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <ulTaskGenericNotifyTake+0xd0>)
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3312      	adds	r3, #18
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <ulTaskGenericNotifyTake+0xd0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4413      	add	r3, r2
 800188a:	3350      	adds	r3, #80	; 0x50
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001890:	f000 fa6c 	bl	8001d6c <vPortExitCritical>

        return ulReturn;
 8001894:	697b      	ldr	r3, [r7, #20]
    }
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000a4 	.word	0x200000a4
 80018a4:	e000ed04 	.word	0xe000ed04

080018a8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80018b6:	2301      	movs	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00a      	beq.n	80018d6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80018c0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	623b      	str	r3, [r7, #32]
    }
 80018d2:	bf00      	nop
 80018d4:	e7fe      	b.n	80018d4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10a      	bne.n	80018f2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80018dc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	61fb      	str	r3, [r7, #28]
    }
 80018ee:	bf00      	nop
 80018f0:	e7fe      	b.n	80018f0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80018f6:	f000 fa09 	bl	8001d0c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80018fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3312      	adds	r3, #18
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	4413      	add	r3, r2
 8001916:	3350      	adds	r3, #80	; 0x50
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800191e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	3350      	adds	r3, #80	; 0x50
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d841      	bhi.n	80019b4 <xTaskGenericNotify+0x10c>
 8001930:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <xTaskGenericNotify+0x90>)
 8001932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001936:	bf00      	nop
 8001938:	080019d3 	.word	0x080019d3
 800193c:	0800194d 	.word	0x0800194d
 8001940:	0800196b 	.word	0x0800196b
 8001944:	08001987 	.word	0x08001987
 8001948:	08001997 	.word	0x08001997
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800194c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3312      	adds	r3, #18
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	431a      	orrs	r2, r3
 800195c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3312      	adds	r3, #18
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	605a      	str	r2, [r3, #4]
                    break;
 8001968:	e036      	b.n	80019d8 <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800196a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3312      	adds	r3, #18
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	3312      	adds	r3, #18
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	605a      	str	r2, [r3, #4]
                    break;
 8001984:	e028      	b.n	80019d8 <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	3312      	adds	r3, #18
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	605a      	str	r2, [r3, #4]
                    break;
 8001994:	e020      	b.n	80019d8 <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800199a:	2b02      	cmp	r3, #2
 800199c:	d007      	beq.n	80019ae <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800199e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3312      	adds	r3, #18
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80019ac:	e014      	b.n	80019d8 <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80019b2:	e011      	b.n	80019d8 <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <xTaskGenericNotify+0x1bc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00c      	beq.n	80019d6 <xTaskGenericNotify+0x12e>
        __asm volatile
 80019bc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80019c0:	f383 8811 	msr	BASEPRI, r3
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	61bb      	str	r3, [r7, #24]
    }
 80019ce:	bf00      	nop
 80019d0:	e7fe      	b.n	80019d0 <xTaskGenericNotify+0x128>
                    break;
 80019d2:	bf00      	nop
 80019d4:	e000      	b.n	80019d8 <xTaskGenericNotify+0x130>

                    break;
 80019d6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80019d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d139      	bne.n	8001a54 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e2:	3304      	adds	r3, #4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fc49 	bl	800027c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	2201      	movs	r2, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <xTaskGenericNotify+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <xTaskGenericNotify+0x1c0>)
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <xTaskGenericNotify+0x1c4>)
 8001a0a:	441a      	add	r2, r3
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7fe fbd7 	bl	80001c6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00a      	beq.n	8001a36 <xTaskGenericNotify+0x18e>
        __asm volatile
 8001a20:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a24:	f383 8811 	msr	BASEPRI, r3
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	f3bf 8f4f 	dsb	sy
 8001a30:	617b      	str	r3, [r7, #20]
    }
 8001a32:	bf00      	nop
 8001a34:	e7fe      	b.n	8001a34 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <xTaskGenericNotify+0x1c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d907      	bls.n	8001a54 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <xTaskGenericNotify+0x1cc>)
 8001a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f3bf 8f4f 	dsb	sy
 8001a50:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001a54:	f000 f98a 	bl	8001d6c <vPortExitCritical>

        return xReturn;
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3730      	adds	r7, #48	; 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000180 	.word	0x20000180
 8001a68:	20000184 	.word	0x20000184
 8001a6c:	200000a8 	.word	0x200000a8
 8001a70:	200000a4 	.word	0x200000a4
 8001a74:	e000ed04 	.word	0xe000ed04

08001a78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fbf4 	bl	800027c <uxListRemove>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10b      	bne.n	8001ab2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4013      	ands	r3, r2
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001ab0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d10a      	bne.n	8001ad0 <prvAddCurrentTaskToDelayedList+0x58>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481a      	ldr	r0, [pc, #104]	; (8001b34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001aca:	f7fe fb7c 	bl	80001c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ace:	e026      	b.n	8001b1e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d209      	bcs.n	8001afc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3304      	adds	r3, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7fe fb89 	bl	800020c <vListInsert>
}
 8001afa:	e010      	b.n	8001b1e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3304      	adds	r3, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f7fe fb7f 	bl	800020c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d202      	bcs.n	8001b1e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8001b18:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6013      	str	r3, [r2, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000180 	.word	0x20000180
 8001b2c:	200000a4 	.word	0x200000a4
 8001b30:	20000184 	.word	0x20000184
 8001b34:	20000168 	.word	0x20000168
 8001b38:	20000138 	.word	0x20000138
 8001b3c:	20000134 	.word	0x20000134
 8001b40:	2000019c 	.word	0x2000019c

08001b44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3b04      	subs	r3, #4
 8001b54:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3b04      	subs	r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f023 0201 	bic.w	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3b04      	subs	r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <pxPortInitialiseStack+0x54>)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3b14      	subs	r3, #20
 8001b7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3b20      	subs	r3, #32
 8001b8a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	08001b9d 	.word	0x08001b9d

08001b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <prvTaskExitError+0x54>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bae:	d00a      	beq.n	8001bc6 <prvTaskExitError+0x2a>
        __asm volatile
 8001bb0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	60fb      	str	r3, [r7, #12]
    }
 8001bc2:	bf00      	nop
 8001bc4:	e7fe      	b.n	8001bc4 <prvTaskExitError+0x28>
        __asm volatile
 8001bc6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	60bb      	str	r3, [r7, #8]
    }
 8001bd8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001bda:	bf00      	nop
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0fc      	beq.n	8001bdc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000004 	.word	0x20000004
	...

08001c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <pxCurrentTCBConst2>)
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	6808      	ldr	r0, [r1, #0]
 8001c06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c0a:	f380 8809 	msr	PSP, r0
 8001c0e:	f3bf 8f6f 	isb	sy
 8001c12:	f04f 0000 	mov.w	r0, #0
 8001c16:	f380 8811 	msr	BASEPRI, r0
 8001c1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001c1e:	4770      	bx	lr

08001c20 <pxCurrentTCBConst2>:
 8001c20:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop

08001c28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <prvPortStartFirstTask+0x1c>)
 8001c2a:	6800      	ldr	r0, [r0, #0]
 8001c2c:	6800      	ldr	r0, [r0, #0]
 8001c2e:	f380 8808 	msr	MSP, r0
 8001c32:	b662      	cpsie	i
 8001c34:	b661      	cpsie	f
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	df00      	svc	0
 8001c40:	bf00      	nop
 8001c42:	0000      	.short	0x0000
 8001c44:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop

08001c4c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <xPortStartScheduler+0xac>)
 8001c54:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <xPortStartScheduler+0xb0>)
 8001c78:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c80:	e009      	b.n	8001c96 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001c8a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b80      	cmp	r3, #128	; 0x80
 8001ca0:	d0ef      	beq.n	8001c82 <xPortStartScheduler+0x36>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001caa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <xPortStartScheduler+0xb4>)
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <xPortStartScheduler+0xb8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <xPortStartScheduler+0xb8>)
 8001cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <xPortStartScheduler+0xb8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <xPortStartScheduler+0xb8>)
 8001cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cd6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001cd8:	f000 f8b8 	bl	8001e4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <xPortStartScheduler+0xbc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ce2:	f7ff ffa1 	bl	8001c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001ce6:	f7ff fae1 	bl	80012ac <vTaskSwitchContext>
    prvTaskExitError();
 8001cea:	f7ff ff57 	bl	8001b9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	e000e400 	.word	0xe000e400
 8001cfc:	200001a8 	.word	0x200001a8
 8001d00:	200001ac 	.word	0x200001ac
 8001d04:	e000ed20 	.word	0xe000ed20
 8001d08:	20000004 	.word	0x20000004

08001d0c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
        __asm volatile
 8001d12:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d16:	f383 8811 	msr	BASEPRI, r3
 8001d1a:	f3bf 8f6f 	isb	sy
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	607b      	str	r3, [r7, #4]
    }
 8001d24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <vPortEnterCritical+0x58>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <vPortEnterCritical+0x58>)
 8001d2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <vPortEnterCritical+0x58>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10f      	bne.n	8001d58 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <vPortEnterCritical+0x5c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <vPortEnterCritical+0x4c>
        __asm volatile
 8001d42:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	603b      	str	r3, [r7, #0]
    }
 8001d54:	bf00      	nop
 8001d56:	e7fe      	b.n	8001d56 <vPortEnterCritical+0x4a>
    }
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000004 	.word	0x20000004
 8001d68:	e000ed04 	.word	0xe000ed04

08001d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <vPortExitCritical+0x4c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <vPortExitCritical+0x24>
        __asm volatile
 8001d7a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	607b      	str	r3, [r7, #4]
    }
 8001d8c:	bf00      	nop
 8001d8e:	e7fe      	b.n	8001d8e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <vPortExitCritical+0x4c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <vPortExitCritical+0x4c>)
 8001d98:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <vPortExitCritical+0x4c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <vPortExitCritical+0x42>
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001dac:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001dc0:	f3ef 8009 	mrs	r0, PSP
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <pxCurrentTCBConst>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dd0:	6010      	str	r0, [r2, #0]
 8001dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001dd6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8001dda:	f380 8811 	msr	BASEPRI, r0
 8001dde:	f7ff fa65 	bl	80012ac <vTaskSwitchContext>
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f380 8811 	msr	BASEPRI, r0
 8001dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	6808      	ldr	r0, [r1, #0]
 8001df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001df6:	f380 8809 	msr	PSP, r0
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	4770      	bx	lr

08001e00 <pxCurrentTCBConst>:
 8001e00:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop

08001e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
        __asm volatile
 8001e0e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e12:	f383 8811 	msr	BASEPRI, r3
 8001e16:	f3bf 8f6f 	isb	sy
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	607b      	str	r3, [r7, #4]
    }
 8001e20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001e22:	f7ff f98b 	bl	800113c <xTaskIncrementTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SysTick_Handler+0x40>)
 8001e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f383 8811 	msr	BASEPRI, r3
    }
 8001e3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	e000ed04 	.word	0xe000ed04

08001e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <vPortSetupTimerInterrupt+0x28>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <vPortSetupTimerInterrupt+0x2c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <vPortSetupTimerInterrupt+0x30>)
 8001e5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e62:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <vPortSetupTimerInterrupt+0x28>)
 8001e66:	2207      	movs	r2, #7
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e010 	.word	0xe000e010
 8001e78:	e000e018 	.word	0xe000e018
 8001e7c:	e000e014 	.word	0xe000e014

08001e80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001e8c:	f7ff f8ac 	bl	8000fe8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001e90:	4b65      	ldr	r3, [pc, #404]	; (8002028 <pvPortMalloc+0x1a8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001e98:	f000 f934 	bl	8002104 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <pvPortMalloc+0x1ac>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 80a7 	bne.w	8001ff8 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d02d      	beq.n	8001f0c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d227      	bcs.n	8001f0c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d021      	beq.n	8001f12 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f023 0307 	bic.w	r3, r3, #7
 8001ed4:	3308      	adds	r3, #8
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d214      	bcs.n	8001f06 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f023 0307 	bic.w	r3, r3, #7
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d010      	beq.n	8001f12 <pvPortMalloc+0x92>
        __asm volatile
 8001ef0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	617b      	str	r3, [r7, #20]
    }
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f0a:	e002      	b.n	8001f12 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	e000      	b.n	8001f14 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f12:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06e      	beq.n	8001ff8 <pvPortMalloc+0x178>
 8001f1a:	4b45      	ldr	r3, [pc, #276]	; (8002030 <pvPortMalloc+0x1b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d869      	bhi.n	8001ff8 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <pvPortMalloc+0x1b4>)
 8001f26:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <pvPortMalloc+0x1b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f2e:	e004      	b.n	8001f3a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d903      	bls.n	8001f4c <pvPortMalloc+0xcc>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f1      	bne.n	8001f30 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <pvPortMalloc+0x1a8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d050      	beq.n	8001ff8 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	4413      	add	r3, r2
 8001f5e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1ad2      	subs	r2, r2, r3
 8001f70:	2308      	movs	r3, #8
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d91f      	bls.n	8001fb8 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <pvPortMalloc+0x120>
        __asm volatile
 8001f8a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	613b      	str	r3, [r7, #16]
    }
 8001f9c:	bf00      	nop
 8001f9e:	e7fe      	b.n	8001f9e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1ad2      	subs	r2, r2, r3
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001fb2:	69b8      	ldr	r0, [r7, #24]
 8001fb4:	f000 f908 	bl	80021c8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <pvPortMalloc+0x1b0>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <pvPortMalloc+0x1b0>)
 8001fc4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <pvPortMalloc+0x1b0>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <pvPortMalloc+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d203      	bcs.n	8001fda <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <pvPortMalloc+0x1b0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <pvPortMalloc+0x1b8>)
 8001fd8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <pvPortMalloc+0x1ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <pvPortMalloc+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <pvPortMalloc+0x1bc>)
 8001ff6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001ff8:	f7ff f804 	bl	8001004 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <pvPortMalloc+0x19c>
        __asm volatile
 8002006:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	60fb      	str	r3, [r7, #12]
    }
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <pvPortMalloc+0x19a>
    return pvReturn;
 800201c:	69fb      	ldr	r3, [r7, #28]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200045b8 	.word	0x200045b8
 800202c:	200045cc 	.word	0x200045cc
 8002030:	200045bc 	.word	0x200045bc
 8002034:	200045b0 	.word	0x200045b0
 8002038:	200045c0 	.word	0x200045c0
 800203c:	200045c4 	.word	0x200045c4

08002040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04d      	beq.n	80020ee <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002052:	2308      	movs	r3, #8
 8002054:	425b      	negs	r3, r3
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <vPortFree+0xb8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <vPortFree+0x44>
        __asm volatile
 800206e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002072:	f383 8811 	msr	BASEPRI, r3
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	60fb      	str	r3, [r7, #12]
    }
 8002080:	bf00      	nop
 8002082:	e7fe      	b.n	8002082 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <vPortFree+0x62>
        __asm volatile
 800208c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002090:	f383 8811 	msr	BASEPRI, r3
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	60bb      	str	r3, [r7, #8]
    }
 800209e:	bf00      	nop
 80020a0:	e7fe      	b.n	80020a0 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <vPortFree+0xb8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01e      	beq.n	80020ee <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11a      	bne.n	80020ee <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <vPortFree+0xb8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80020c8:	f7fe ff8e 	bl	8000fe8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <vPortFree+0xbc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <vPortFree+0xbc>)
 80020d8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020da:	6938      	ldr	r0, [r7, #16]
 80020dc:	f000 f874 	bl	80021c8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <vPortFree+0xc0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a06      	ldr	r2, [pc, #24]	; (8002100 <vPortFree+0xc0>)
 80020e8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80020ea:	f7fe ff8b 	bl	8001004 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200045cc 	.word	0x200045cc
 80020fc:	200045bc 	.word	0x200045bc
 8002100:	200045c8 	.word	0x200045c8

08002104 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800210a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800210e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <prvHeapInit+0xac>)
 8002112:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3307      	adds	r3, #7
 8002122:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <prvHeapInit+0xac>)
 8002134:	4413      	add	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <prvHeapInit+0xb0>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <prvHeapInit+0xb0>)
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	4413      	add	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002150:	2208      	movs	r2, #8
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0307 	bic.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <prvHeapInit+0xb4>)
 8002164:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <prvHeapInit+0xb4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <prvHeapInit+0xb4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	1ad2      	subs	r2, r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <prvHeapInit+0xb4>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <prvHeapInit+0xb8>)
 8002192:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <prvHeapInit+0xbc>)
 800219a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <prvHeapInit+0xc0>)
 800219e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	200001b0 	.word	0x200001b0
 80021b4:	200045b0 	.word	0x200045b0
 80021b8:	200045b8 	.word	0x200045b8
 80021bc:	200045c0 	.word	0x200045c0
 80021c0:	200045bc 	.word	0x200045bc
 80021c4:	200045cc 	.word	0x200045cc

080021c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <prvInsertBlockIntoFreeList+0xa8>)
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e002      	b.n	80021dc <prvInsertBlockIntoFreeList+0x14>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d8f7      	bhi.n	80021d6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d108      	bne.n	800220a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	441a      	add	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d118      	bne.n	8002250 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <prvInsertBlockIntoFreeList+0xac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d00d      	beq.n	8002246 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e008      	b.n	8002258 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <prvInsertBlockIntoFreeList+0xac>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e003      	b.n	8002258 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d002      	beq.n	8002266 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	200045b0 	.word	0x200045b0
 8002274:	200045b8 	.word	0x200045b8

08002278 <Dio_WriteChannel>:
/*
  Input  : Dio_ChannelType
  output : Dio_LevelType
  description :
*/
void              Dio_WriteChannel(Dio_ChannelType ChannelId,Dio_LevelType Level){
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	460a      	mov	r2, r1
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	4613      	mov	r3, r2
 8002286:	71bb      	strb	r3, [r7, #6]
	if ( ChannelId >= Dio_A0  && ChannelId <= Dio_A15 ){
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d817      	bhi.n	80022be <Dio_WriteChannel+0x46>

		if (Level == STD_HIGH){
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <Dio_WriteChannel+0x28>
			GPIOA->BSRR = ( 1 << ChannelId ) ;
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2201      	movs	r2, #1
 8002298:	409a      	lsls	r2, r3
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <Dio_WriteChannel+0xe4>)
 800229c:	611a      	str	r2, [r3, #16]
		}
	}
	else {
		Det_ReportError(MODULE_ID,  Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
	}
}
 800229e:	e058      	b.n	8002352 <Dio_WriteChannel+0xda>
		else if (Level == STD_LOW){
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <Dio_WriteChannel+0x3a>
			GPIOA->BRR  = ( 1 << ChannelId ) ;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <Dio_WriteChannel+0xe4>)
 80022ae:	615a      	str	r2, [r3, #20]
}
 80022b0:	e04f      	b.n	8002352 <Dio_WriteChannel+0xda>
			Det_ReportError(MODULE_ID,  Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 80022b2:	220a      	movs	r2, #10
 80022b4:	2101      	movs	r1, #1
 80022b6:	2078      	movs	r0, #120	; 0x78
 80022b8:	f000 f8a4 	bl	8002404 <Det_ReportError>
}
 80022bc:	e049      	b.n	8002352 <Dio_WriteChannel+0xda>
	else if (ChannelId >= Dio_B0  && ChannelId <= Dio_B15){
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d91e      	bls.n	8002302 <Dio_WriteChannel+0x8a>
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b1f      	cmp	r3, #31
 80022c8:	d81b      	bhi.n	8002302 <Dio_WriteChannel+0x8a>
		CLR_BIT(ChannelId,4);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f023 0310 	bic.w	r3, r3, #16
 80022d0:	71fb      	strb	r3, [r7, #7]
		if (Level == STD_HIGH){
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <Dio_WriteChannel+0x6c>
			GPIOB->BSRR = ( 1 << ChannelId ) ;
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <Dio_WriteChannel+0xe8>)
 80022e0:	611a      	str	r2, [r3, #16]
		if (Level == STD_HIGH){
 80022e2:	e036      	b.n	8002352 <Dio_WriteChannel+0xda>
		else if (Level == STD_LOW){
 80022e4:	79bb      	ldrb	r3, [r7, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <Dio_WriteChannel+0x7e>
			GPIOB->BRR  = ( 1 << ChannelId ) ;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2201      	movs	r2, #1
 80022ee:	409a      	lsls	r2, r3
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <Dio_WriteChannel+0xe8>)
 80022f2:	615a      	str	r2, [r3, #20]
		if (Level == STD_HIGH){
 80022f4:	e02d      	b.n	8002352 <Dio_WriteChannel+0xda>
			Det_ReportError(MODULE_ID,  Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 80022f6:	220a      	movs	r2, #10
 80022f8:	2101      	movs	r1, #1
 80022fa:	2078      	movs	r0, #120	; 0x78
 80022fc:	f000 f882 	bl	8002404 <Det_ReportError>
		if (Level == STD_HIGH){
 8002300:	e027      	b.n	8002352 <Dio_WriteChannel+0xda>
	else if (ChannelId > Dio_B15  && ChannelId <= Dio_C15){
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	2b1f      	cmp	r3, #31
 8002306:	d91e      	bls.n	8002346 <Dio_WriteChannel+0xce>
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b2f      	cmp	r3, #47	; 0x2f
 800230c:	d81b      	bhi.n	8002346 <Dio_WriteChannel+0xce>
		CLR_BIT(ChannelId,5);
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f023 0320 	bic.w	r3, r3, #32
 8002314:	71fb      	strb	r3, [r7, #7]
		if (Level == STD_HIGH){
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <Dio_WriteChannel+0xb0>
			GPIOC->BSRR = ( 1 << ChannelId ) ;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2201      	movs	r2, #1
 8002320:	409a      	lsls	r2, r3
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <Dio_WriteChannel+0xec>)
 8002324:	611a      	str	r2, [r3, #16]
		if (Level == STD_HIGH){
 8002326:	e014      	b.n	8002352 <Dio_WriteChannel+0xda>
		else if (Level == STD_LOW){
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <Dio_WriteChannel+0xc2>
			GPIOC->BRR  = ( 1 << ChannelId ) ;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2201      	movs	r2, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <Dio_WriteChannel+0xec>)
 8002336:	615a      	str	r2, [r3, #20]
		if (Level == STD_HIGH){
 8002338:	e00b      	b.n	8002352 <Dio_WriteChannel+0xda>
			Det_ReportError(MODULE_ID,  Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 800233a:	220a      	movs	r2, #10
 800233c:	2101      	movs	r1, #1
 800233e:	2078      	movs	r0, #120	; 0x78
 8002340:	f000 f860 	bl	8002404 <Det_ReportError>
		if (Level == STD_HIGH){
 8002344:	e005      	b.n	8002352 <Dio_WriteChannel+0xda>
		Det_ReportError(MODULE_ID,  Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 8002346:	220a      	movs	r2, #10
 8002348:	2101      	movs	r1, #1
 800234a:	2078      	movs	r0, #120	; 0x78
 800234c:	f000 f85a 	bl	8002404 <Det_ReportError>
}
 8002350:	e7ff      	b.n	8002352 <Dio_WriteChannel+0xda>
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40010800 	.word	0x40010800
 8002360:	40010c00 	.word	0x40010c00
 8002364:	40011000 	.word	0x40011000

08002368 <Dio_FlipChannel>:
/*
  Input  : Dio_ChannelType
  output : Dio_LevelType
  description :
*/
Dio_LevelType     Dio_FlipChannel(Dio_ChannelType ChannelId){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	if ( ChannelId >= Dio_A0  && ChannelId <= Dio_A15 ){
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <Dio_FlipChannel+0x26>
		TOGGLE_BIT(GPIOA->ODR,ChannelId);
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <Dio_FlipChannel+0x90>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	4611      	mov	r1, r2
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <Dio_FlipChannel+0x90>)
 8002388:	404b      	eors	r3, r1
 800238a:	60d3      	str	r3, [r2, #12]
 800238c:	e02e      	b.n	80023ec <Dio_FlipChannel+0x84>
	}
	else if (ChannelId >= Dio_B0  && ChannelId <= Dio_B15){
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b0f      	cmp	r3, #15
 8002392:	d911      	bls.n	80023b8 <Dio_FlipChannel+0x50>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b1f      	cmp	r3, #31
 8002398:	d80e      	bhi.n	80023b8 <Dio_FlipChannel+0x50>
		/*  to clear the bit that we used in define port */
		CLR_BIT(ChannelId,5);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f023 0320 	bic.w	r3, r3, #32
 80023a0:	71fb      	strb	r3, [r7, #7]

		TOGGLE_BIT(GPIOB->ODR,ChannelId);
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <Dio_FlipChannel+0x94>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <Dio_FlipChannel+0x94>)
 80023b2:	404b      	eors	r3, r1
 80023b4:	60d3      	str	r3, [r2, #12]
 80023b6:	e019      	b.n	80023ec <Dio_FlipChannel+0x84>
	}
	else if (ChannelId >  Dio_B15  && ChannelId <= Dio_C15){
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b1f      	cmp	r3, #31
 80023bc:	d911      	bls.n	80023e2 <Dio_FlipChannel+0x7a>
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b2f      	cmp	r3, #47	; 0x2f
 80023c2:	d80e      	bhi.n	80023e2 <Dio_FlipChannel+0x7a>
		/*  to clear the bit that we used in define port */
		CLR_BIT(ChannelId,5);
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f023 0320 	bic.w	r3, r3, #32
 80023ca:	71fb      	strb	r3, [r7, #7]

		TOGGLE_BIT(GPIOC->ODR,ChannelId);
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <Dio_FlipChannel+0x98>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f202 	lsl.w	r2, r1, r2
 80023d8:	4611      	mov	r1, r2
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <Dio_FlipChannel+0x98>)
 80023dc:	404b      	eors	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
 80023e0:	e004      	b.n	80023ec <Dio_FlipChannel+0x84>
	}
	else {
		Det_ReportError(MODULE_ID,   Dio_FlipChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 80023e2:	220a      	movs	r2, #10
 80023e4:	2111      	movs	r1, #17
 80023e6:	2078      	movs	r0, #120	; 0x78
 80023e8:	f000 f80c 	bl	8002404 <Det_ReportError>
	}
	return STD_IDLE;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40010800 	.word	0x40010800
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	40011000 	.word	0x40011000

08002404 <Det_ReportError>:
*   SW Version       : 1.0.0
============================================================================*/

#include <Det.h>

Std_ReturnType Det_ReportError(uint16 ModuleId,uint8 ApiId , uint8 ErrorId){
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
 800240e:	460b      	mov	r3, r1
 8002410:	717b      	strb	r3, [r7, #5]
 8002412:	4613      	mov	r3, r2
 8002414:	713b      	strb	r3, [r7, #4]
	for(;;);
 8002416:	e7fe      	b.n	8002416 <Det_ReportError+0x12>

08002418 <LCD_VidSendCommend>:

#ifndef EIGHT_BIT
extern uint8 ArrOfPins[4];
#endif

void LCD_VidSendCommend(uint8 Copy_U8Commend){
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	Dio_WriteChannel(RS, LOW);
 8002422:	2100      	movs	r1, #0
 8002424:	2010      	movs	r0, #16
 8002426:	f7ff ff27 	bl	8002278 <Dio_WriteChannel>
/******to out the value of commend on data port *****/
	uint8 ArrOfPins_Level[8];

	for (uint8 i=0;i<=7;i++){
 800242a:	2300      	movs	r3, #0
 800242c:	77fb      	strb	r3, [r7, #31]
 800242e:	e00f      	b.n	8002450 <LCD_VidSendCommend+0x38>
		ArrOfPins_Level[i] = GET_BIT(Copy_U8Commend,i);
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	7ffb      	ldrb	r3, [r7, #31]
 8002434:	fa42 f303 	asr.w	r3, r2, r3
 8002438:	b2da      	uxtb	r2, r3
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	f002 0201 	and.w	r2, r2, #1
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	3320      	adds	r3, #32
 8002444:	443b      	add	r3, r7
 8002446:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8 i=0;i<=7;i++){
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	3301      	adds	r3, #1
 800244e:	77fb      	strb	r3, [r7, #31]
 8002450:	7ffb      	ldrb	r3, [r7, #31]
 8002452:	2b07      	cmp	r3, #7
 8002454:	d9ec      	bls.n	8002430 <LCD_VidSendCommend+0x18>
	}

	for (uint8 i=0;i<=7;i++){
 8002456:	2300      	movs	r3, #0
 8002458:	77bb      	strb	r3, [r7, #30]
 800245a:	e00e      	b.n	800247a <LCD_VidSendCommend+0x62>
		Dio_WriteChannel ( ArrOfPins[i] , ArrOfPins_Level[i] );
 800245c:	7fbb      	ldrb	r3, [r7, #30]
 800245e:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <LCD_VidSendCommend+0xac>)
 8002460:	5cd2      	ldrb	r2, [r2, r3]
 8002462:	7fbb      	ldrb	r3, [r7, #30]
 8002464:	3320      	adds	r3, #32
 8002466:	443b      	add	r3, r7
 8002468:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f7ff ff02 	bl	8002278 <Dio_WriteChannel>
	for (uint8 i=0;i<=7;i++){
 8002474:	7fbb      	ldrb	r3, [r7, #30]
 8002476:	3301      	adds	r3, #1
 8002478:	77bb      	strb	r3, [r7, #30]
 800247a:	7fbb      	ldrb	r3, [r7, #30]
 800247c:	2b07      	cmp	r3, #7
 800247e:	d9ed      	bls.n	800245c <LCD_VidSendCommend+0x44>
	}
/*************to make pulse for enable **************/
	Dio_WriteChannel(E, HIGH);
 8002480:	2101      	movs	r1, #1
 8002482:	2011      	movs	r0, #17
 8002484:	f7ff fef8 	bl	8002278 <Dio_WriteChannel>
	for (uint32 i = 0 ; i < 8000 ; i++);
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e002      	b.n	8002494 <LCD_VidSendCommend+0x7c>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3301      	adds	r3, #1
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800249a:	d3f8      	bcc.n	800248e <LCD_VidSendCommend+0x76>
	Dio_WriteChannel(E,LOW);
 800249c:	2100      	movs	r1, #0
 800249e:	2011      	movs	r0, #17
 80024a0:	f7ff feea 	bl	8002278 <Dio_WriteChannel>
	for (uint32 i = 0 ; i < 16000 ; i++);
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e002      	b.n	80024b0 <LCD_VidSendCommend+0x98>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80024b6:	d3f8      	bcc.n	80024aa <LCD_VidSendCommend+0x92>
	for (uint32 i = 0 ; i < 8000 ; i++);
	Dio_WriteChannel(E,LOW);
	for (uint32 i = 0 ; i < 16000 ; i++);

#endif
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008

080024c8 <LCD_VidInit>:

void LCD_VidInit (void) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0

#ifdef EIGHT_BIT
	/***/
	Port_EnumSetterPin(D0,PORT_PIN_OUT|G_PUSH_PULL);
 80024ce:	2102      	movs	r1, #2
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 f9cf 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D1,PORT_PIN_OUT|G_PUSH_PULL);
 80024d6:	2102      	movs	r1, #2
 80024d8:	2001      	movs	r0, #1
 80024da:	f000 f9cb 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D2,PORT_PIN_OUT|G_PUSH_PULL);
 80024de:	2102      	movs	r1, #2
 80024e0:	2002      	movs	r0, #2
 80024e2:	f000 f9c7 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D3,PORT_PIN_OUT|G_PUSH_PULL);
 80024e6:	2102      	movs	r1, #2
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 f9c3 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D4,PORT_PIN_OUT|G_PUSH_PULL);
 80024ee:	2102      	movs	r1, #2
 80024f0:	2004      	movs	r0, #4
 80024f2:	f000 f9bf 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D5,PORT_PIN_OUT|G_PUSH_PULL);
 80024f6:	2102      	movs	r1, #2
 80024f8:	2005      	movs	r0, #5
 80024fa:	f000 f9bb 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D6,PORT_PIN_OUT|G_PUSH_PULL);
 80024fe:	2102      	movs	r1, #2
 8002500:	2006      	movs	r0, #6
 8002502:	f000 f9b7 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(D7,PORT_PIN_OUT|G_PUSH_PULL);
 8002506:	2102      	movs	r1, #2
 8002508:	2007      	movs	r0, #7
 800250a:	f000 f9b3 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(RS,PORT_PIN_OUT|G_PUSH_PULL);
 800250e:	2102      	movs	r1, #2
 8002510:	2010      	movs	r0, #16
 8002512:	f000 f9af 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(E,PORT_PIN_OUT|G_PUSH_PULL);
 8002516:	2102      	movs	r1, #2
 8002518:	2011      	movs	r0, #17
 800251a:	f000 f9ab 	bl	8002874 <Port_EnumSetterPin>
	Port_VidRunnable();
 800251e:	f000 f9c9 	bl	80028b4 <Port_VidRunnable>

	/********************************/
	for (uint16 i = 0 ; i < 320 ; i++);
 8002522:	2300      	movs	r3, #0
 8002524:	81fb      	strh	r3, [r7, #14]
 8002526:	e002      	b.n	800252e <LCD_VidInit+0x66>
 8002528:	89fb      	ldrh	r3, [r7, #14]
 800252a:	3301      	adds	r3, #1
 800252c:	81fb      	strh	r3, [r7, #14]
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002534:	d3f8      	bcc.n	8002528 <LCD_VidInit+0x60>
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
 8002536:	203c      	movs	r0, #60	; 0x3c
 8002538:	f7ff ff6e 	bl	8002418 <LCD_VidSendCommend>
	// Delay for more than 39 us
	for (uint16 i = 0 ; i < 320 ; i++);
 800253c:	2300      	movs	r3, #0
 800253e:	81bb      	strh	r3, [r7, #12]
 8002540:	e002      	b.n	8002548 <LCD_VidInit+0x80>
 8002542:	89bb      	ldrh	r3, [r7, #12]
 8002544:	3301      	adds	r3, #1
 8002546:	81bb      	strh	r3, [r7, #12]
 8002548:	89bb      	ldrh	r3, [r7, #12]
 800254a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800254e:	d3f8      	bcc.n	8002542 <LCD_VidInit+0x7a>
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
 8002550:	200c      	movs	r0, #12
 8002552:	f7ff ff61 	bl	8002418 <LCD_VidSendCommend>
	// Delay for more than 39 us
	for (uint16 i = 0 ; i < 320 ; i++);
 8002556:	2300      	movs	r3, #0
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	e002      	b.n	8002562 <LCD_VidInit+0x9a>
 800255c:	897b      	ldrh	r3, [r7, #10]
 800255e:	3301      	adds	r3, #1
 8002560:	817b      	strh	r3, [r7, #10]
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002568:	d3f8      	bcc.n	800255c <LCD_VidInit+0x94>
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE_RIGHT);
 800256a:	2006      	movs	r0, #6
 800256c:	f7ff ff54 	bl	8002418 <LCD_VidSendCommend>
	// Delay for more than 39 us
	for (uint16 i = 0 ; i < 320 ; i++);
 8002570:	2300      	movs	r3, #0
 8002572:	813b      	strh	r3, [r7, #8]
 8002574:	e002      	b.n	800257c <LCD_VidInit+0xb4>
 8002576:	893b      	ldrh	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	813b      	strh	r3, [r7, #8]
 800257c:	893b      	ldrh	r3, [r7, #8]
 800257e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002582:	d3f8      	bcc.n	8002576 <LCD_VidInit+0xae>
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
 8002584:	2001      	movs	r0, #1
 8002586:	f7ff ff47 	bl	8002418 <LCD_VidSendCommend>
	// Delay for more than 1.53 ms
	for (uint32 i = 0 ; i < 16000 ; i++);
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	e002      	b.n	8002596 <LCD_VidInit+0xce>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3301      	adds	r3, #1
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800259c:	d3f8      	bcc.n	8002590 <LCD_VidInit+0xc8>
		// Send Clear Display Command
		LCD_VidSendCommend(DISPLAY_CLEAR);
		// Delay for more than 1.53 ms
		for (uint32 i = 0 ; i < 16000 ; i++);
	#endif
}
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LCD_VidSendChar>:

void LCD_VidSendChar(uint8 Copy_U8Char){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]

#ifdef EIGHT_BIT
	uint8 ArrOfPins_Level[8];
	/******* to define RS / RW ***********/
	Dio_WriteChannel(RS,HIGH);
 80025b2:	2101      	movs	r1, #1
 80025b4:	2010      	movs	r0, #16
 80025b6:	f7ff fe5f 	bl	8002278 <Dio_WriteChannel>
	/*to define value of character on port*/
	for (uint8 i=0;i<=7;i++){
 80025ba:	2300      	movs	r3, #0
 80025bc:	77fb      	strb	r3, [r7, #31]
 80025be:	e00f      	b.n	80025e0 <LCD_VidSendChar+0x38>
		ArrOfPins_Level[i] = GET_BIT(Copy_U8Char,i);
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	fa42 f303 	asr.w	r3, r2, r3
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	f002 0201 	and.w	r2, r2, #1
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	3320      	adds	r3, #32
 80025d4:	443b      	add	r3, r7
 80025d6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8 i=0;i<=7;i++){
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	3301      	adds	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	2b07      	cmp	r3, #7
 80025e4:	d9ec      	bls.n	80025c0 <LCD_VidSendChar+0x18>
	}

	for (uint8 i=0;i<=7;i++){
 80025e6:	2300      	movs	r3, #0
 80025e8:	77bb      	strb	r3, [r7, #30]
 80025ea:	e00e      	b.n	800260a <LCD_VidSendChar+0x62>
		Dio_WriteChannel ( ArrOfPins[i] , ArrOfPins_Level[i] );
 80025ec:	7fbb      	ldrb	r3, [r7, #30]
 80025ee:	4a19      	ldr	r2, [pc, #100]	; (8002654 <LCD_VidSendChar+0xac>)
 80025f0:	5cd2      	ldrb	r2, [r2, r3]
 80025f2:	7fbb      	ldrb	r3, [r7, #30]
 80025f4:	3320      	adds	r3, #32
 80025f6:	443b      	add	r3, r7
 80025f8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f7ff fe3a 	bl	8002278 <Dio_WriteChannel>
	for (uint8 i=0;i<=7;i++){
 8002604:	7fbb      	ldrb	r3, [r7, #30]
 8002606:	3301      	adds	r3, #1
 8002608:	77bb      	strb	r3, [r7, #30]
 800260a:	7fbb      	ldrb	r3, [r7, #30]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d9ed      	bls.n	80025ec <LCD_VidSendChar+0x44>
	}
	/*********to make enable pulse*********/
	Dio_WriteChannel(E,HIGH);
 8002610:	2101      	movs	r1, #1
 8002612:	2011      	movs	r0, #17
 8002614:	f7ff fe30 	bl	8002278 <Dio_WriteChannel>
	for (uint32 i = 0 ; i < 8000 ; i++);
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	e002      	b.n	8002624 <LCD_VidSendChar+0x7c>
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3301      	adds	r3, #1
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800262a:	d3f8      	bcc.n	800261e <LCD_VidSendChar+0x76>
	Dio_WriteChannel(E,LOW);
 800262c:	2100      	movs	r1, #0
 800262e:	2011      	movs	r0, #17
 8002630:	f7ff fe22 	bl	8002278 <Dio_WriteChannel>
	for (uint32 i = 0 ; i < 16000 ; i++);
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e002      	b.n	8002640 <LCD_VidSendChar+0x98>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002646:	d3f8      	bcc.n	800263a <LCD_VidSendChar+0x92>
	for (uint32 i = 0 ; i < 8000 ; i++);
	Dio_WriteChannel(E,LOW);
	for (uint32 i = 0 ; i < 16000 ; i++);

#endif
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000008 	.word	0x20000008

08002658 <Mcu_Init>:
static uint32 PerpherialsAPB1;
static uint32 PerpherialsAPB2;
static uint32 PerpherialsAHB;


void   Mcu_Init () {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
	/* check on coming pointer */
	if (NULL_PTR == ConfigPtr){
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <Mcu_Init+0xc4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <Mcu_Init+0x18>
		Det_ReportError(MODULE_ID, Mcu_Init_ID, MCU_E_PARAM_POINTER);
 8002666:	2210      	movs	r2, #16
 8002668:	2101      	movs	r1, #1
 800266a:	2065      	movs	r0, #101	; 0x65
 800266c:	f7ff feca 	bl	8002404 <Det_ReportError>
	}

	/* to select HSE[16] */
	RCC->CR      = ConfigPtr->CLOCK_SYS | ( ConfigPtr->HSITRIM << 3 ) ;
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <Mcu_Init+0xc4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a29      	ldr	r2, [pc, #164]	; (800271c <Mcu_Init+0xc4>)
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	7d52      	ldrb	r2, [r2, #21]
 800267c:	00d2      	lsls	r2, r2, #3
 800267e:	4611      	mov	r1, r2
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <Mcu_Init+0xc8>)
 8002682:	430b      	orrs	r3, r1
 8002684:	6013      	str	r3, [r2, #0]

	/* to check that the clock is stabled  :
	 PLLRDY    or   HSERDY   or   HSIRDY
	 */
	uint32 LOCAL_Clock_Flag = ( ConfigPtr->CLOCK_SYS << 1 ) ;  /*  to check on one in the bit of flag  */
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <Mcu_Init+0xc4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	603b      	str	r3, [r7, #0]
	uint16 LOCAL_Time_limit = TIMEOUT_ROOF ;
 8002690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002694:	80fb      	strh	r3, [r7, #6]
	while ( (LOCAL_Clock_Flag & RCC->CR) && (0 == LOCAL_Time_limit))
 8002696:	e002      	b.n	800269e <Mcu_Init+0x46>
	{
		LOCAL_Time_limit--;
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	3b01      	subs	r3, #1
 800269c:	80fb      	strh	r3, [r7, #6]
	while ( (LOCAL_Clock_Flag & RCC->CR) && (0 == LOCAL_Time_limit))
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <Mcu_Init+0xc8>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <Mcu_Init+0x58>
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f3      	beq.n	8002698 <Mcu_Init+0x40>
	}
	if (0 == LOCAL_Time_limit){
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d104      	bne.n	80026c0 <Mcu_Init+0x68>
		Det_ReportError(MODULE_ID, Mcu_Init_ID, MCU_E_TIMEOUT);
 80026b6:	2212      	movs	r2, #18
 80026b8:	2101      	movs	r1, #1
 80026ba:	2065      	movs	r0, #101	; 0x65
 80026bc:	f7ff fea2 	bl	8002404 <Det_ReportError>
	}

	/* to turn off VCC in PIN out that used in HSE to get clock */
#if   HSE == HSE_CRSTYAL
	CLR_BIT(RCC->CR,HSE_BYP);
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <Mcu_Init+0xc8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <Mcu_Init+0xc8>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]
#elif HSE == HSE_RC
	SET_BIT(RCC->CR,HSE_BYP);
#endif

#if CSS_CFG == CSS_OFF
	CLR_BIT(RCC->CR,CSSON);
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <Mcu_Init+0xc8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a13      	ldr	r2, [pc, #76]	; (8002720 <Mcu_Init+0xc8>)
 80026d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80026d6:	6013      	str	r3, [r2, #0]
	/* to select SW[1:0]
	 00: HSI selected as system clock
	 01: HSE selected as system clock
     10: PLL selected as system clock
	  */
	RCC->CFGR    = ConfigPtr->PLL_MUL_NUMBER | ConfigPtr->PLL_ENTRY_CLOCK | ConfigPtr->ADC_PRESCALAR_
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <Mcu_Init+0xc4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <Mcu_Init+0xc4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <Mcu_Init+0xc4>)
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	8992      	ldrh	r2, [r2, #12]
 80026ec:	4313      	orrs	r3, r2
			       | ConfigPtr->APB2_PRESCALAR_ | ConfigPtr->APB1_PRESCALAR_ | ConfigPtr->AHB_PRESCALAR_
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <Mcu_Init+0xc4>)
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	89d2      	ldrh	r2, [r2, #14]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <Mcu_Init+0xc4>)
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	8a12      	ldrh	r2, [r2, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	4a07      	ldr	r2, [pc, #28]	; (800271c <Mcu_Init+0xc4>)
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	8a52      	ldrh	r2, [r2, #18]
 8002704:	4313      	orrs	r3, r2
				   | ConfigPtr->SW_ENABLE_CLOCK  ;
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <Mcu_Init+0xc4>)
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	7d12      	ldrb	r2, [r2, #20]
 800270c:	4611      	mov	r1, r2
	RCC->CFGR    = ConfigPtr->PLL_MUL_NUMBER | ConfigPtr->PLL_ENTRY_CLOCK | ConfigPtr->ADC_PRESCALAR_
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <Mcu_Init+0xc8>)
				   | ConfigPtr->SW_ENABLE_CLOCK  ;
 8002710:	430b      	orrs	r3, r1
	RCC->CFGR    = ConfigPtr->PLL_MUL_NUMBER | ConfigPtr->PLL_ENTRY_CLOCK | ConfigPtr->ADC_PRESCALAR_
 8002712:	6053      	str	r3, [r2, #4]

}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000028 	.word	0x20000028
 8002720:	40021000 	.word	0x40021000

08002724 <Mcu_EnumSetPerAPB1>:

Error_State       Mcu_EnumSetPerAPB1(BUS_PERPHERIALS Mcu_Per ) {
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	if ( Mcu_Per >= APB1_PER_TIM2  && Mcu_Per <= APB1_PER_DAC ){
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <Mcu_EnumSetPerAPB1+0x26>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002738:	d807      	bhi.n	800274a <Mcu_EnumSetPerAPB1+0x26>
		PerpherialsAPB1 |= Mcu_Per ;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <Mcu_EnumSetPerAPB1+0x34>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <Mcu_EnumSetPerAPB1+0x34>)
 8002744:	6013      	str	r3, [r2, #0]
		return E_OK ;
 8002746:	2303      	movs	r3, #3
 8002748:	e000      	b.n	800274c <Mcu_EnumSetPerAPB1+0x28>
	}
	return E_NOT_OK ;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200045d0 	.word	0x200045d0

0800275c <Mcu_EnumSetPerAPB2>:
Error_State       Mcu_EnumSetPerAPB2(BUS_PERPHERIALS Mcu_Per ) {
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	if (Mcu_Per >= APB2_PER_AFIO  && Mcu_Per <= APB2_PER_TIM11){
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800276a:	d90b      	bls.n	8002784 <Mcu_EnumSetPerAPB2+0x28>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <Mcu_EnumSetPerAPB2+0x34>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d807      	bhi.n	8002784 <Mcu_EnumSetPerAPB2+0x28>
		PerpherialsAPB2 |= Mcu_Per ;
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <Mcu_EnumSetPerAPB2+0x38>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4313      	orrs	r3, r2
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <Mcu_EnumSetPerAPB2+0x38>)
 800277e:	6013      	str	r3, [r2, #0]
		return E_OK;
 8002780:	2303      	movs	r3, #3
 8002782:	e000      	b.n	8002786 <Mcu_EnumSetPerAPB2+0x2a>
	}
	return E_NOT_OK ;
 8002784:	2301      	movs	r3, #1
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	80200000 	.word	0x80200000
 8002794:	200045d4 	.word	0x200045d4

08002798 <Mcu_VidRunnable>:
		return E_OK;
	}
	return E_NOT_OK ;
}

void              Mcu_VidRunnable (void){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	if (PerpherialsAPB1 != 0){
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <Mcu_VidRunnable+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <Mcu_VidRunnable+0x16>
		Mcu_SetMode(PerpherialsAPB1);
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <Mcu_VidRunnable+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f81b 	bl	80027e4 <Mcu_SetMode>
	}

	if (PerpherialsAPB2 != 0){
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <Mcu_VidRunnable+0x44>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <Mcu_VidRunnable+0x28>
		Mcu_SetMode(PerpherialsAPB2);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <Mcu_VidRunnable+0x44>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f812 	bl	80027e4 <Mcu_SetMode>
	}

	if (PerpherialsAHB  != 0){
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <Mcu_VidRunnable+0x48>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <Mcu_VidRunnable+0x3a>
		Mcu_SetMode(PerpherialsAHB) ;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <Mcu_VidRunnable+0x48>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f809 	bl	80027e4 <Mcu_SetMode>
	}
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200045d0 	.word	0x200045d0
 80027dc:	200045d4 	.word	0x200045d4
 80027e0:	200045d8 	.word	0x200045d8

080027e4 <Mcu_SetMode>:

void Mcu_SetMode (Mcu_ModeType McuMode){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	if ( McuMode >= APB1_PER_TIM2  && McuMode <= APB1_PER_DAC ){
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <Mcu_SetMode+0x24>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f8:	d806      	bhi.n	8002808 <Mcu_SetMode+0x24>
		RCC->APB1ENR  |= McuMode ;
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <Mcu_SetMode+0x84>)
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	491a      	ldr	r1, [pc, #104]	; (8002868 <Mcu_SetMode+0x84>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4313      	orrs	r3, r2
 8002804:	61cb      	str	r3, [r1, #28]
 8002806:	e02b      	b.n	8002860 <Mcu_SetMode+0x7c>
	}
	else if (McuMode >= APB2_PER_AFIO  && McuMode <= APB2_PER_TIM11){
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800280e:	d90e      	bls.n	800282e <Mcu_SetMode+0x4a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <Mcu_SetMode+0x88>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d80a      	bhi.n	800282e <Mcu_SetMode+0x4a>
		CLR_BIT(McuMode,31);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800281e:	607b      	str	r3, [r7, #4]
		RCC->APB2ENR  |= McuMode ;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <Mcu_SetMode+0x84>)
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	4910      	ldr	r1, [pc, #64]	; (8002868 <Mcu_SetMode+0x84>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	618b      	str	r3, [r1, #24]
 800282c:	e018      	b.n	8002860 <Mcu_SetMode+0x7c>
	}
	else if (McuMode >= AHB_PER_DMA_1  && McuMode <= AHB_PER_SDIO){
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d90e      	bls.n	8002854 <Mcu_SetMode+0x70>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <Mcu_SetMode+0x8c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d80a      	bhi.n	8002854 <Mcu_SetMode+0x70>
		CLR_BIT(McuMode,30);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002844:	607b      	str	r3, [r7, #4]
		RCC->AHBENR  |= McuMode ;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <Mcu_SetMode+0x84>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	4907      	ldr	r1, [pc, #28]	; (8002868 <Mcu_SetMode+0x84>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4313      	orrs	r3, r2
 8002850:	614b      	str	r3, [r1, #20]
 8002852:	e005      	b.n	8002860 <Mcu_SetMode+0x7c>
	}
	else {
		Det_ReportError(MODULE_ID, Mcu_SetMode_ID, MCU_E_PARAM_MODE);
 8002854:	220c      	movs	r2, #12
 8002856:	2108      	movs	r1, #8
 8002858:	2065      	movs	r0, #101	; 0x65
 800285a:	f7ff fdd3 	bl	8002404 <Det_ReportError>
	}
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	80200000 	.word	0x80200000
 8002870:	40000400 	.word	0x40000400

08002874 <Port_EnumSetterPin>:
			break ;

		}
	}
}
Error_State       Port_EnumSetterPin(Port_PinType Copy_ChannelId ,Port_PinModeType Copy_Mode){
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	460a      	mov	r2, r1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	4613      	mov	r3, r2
 8002882:	71bb      	strb	r3, [r7, #6]
	if ( Copy_ChannelId >=Port_A0 && Copy_ChannelId <=Port_C15){
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	2b2f      	cmp	r3, #47	; 0x2f
 8002888:	d809      	bhi.n	800289e <Port_EnumSetterPin+0x2a>
		Port_ArryOfPins[Copy_ChannelId]       = Copy_Mode      ;
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <Port_EnumSetterPin+0x38>)
 800288e:	79ba      	ldrb	r2, [r7, #6]
 8002890:	54ca      	strb	r2, [r1, r3]
		Port_ArryOfActivition[Copy_ChannelId] = STD_ON         ;
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <Port_EnumSetterPin+0x3c>)
 8002896:	2101      	movs	r1, #1
 8002898:	54d1      	strb	r1, [r2, r3]
		return E_OK ;
 800289a:	2303      	movs	r3, #3
 800289c:	e000      	b.n	80028a0 <Port_EnumSetterPin+0x2c>
	}
	return E_INVALID_PARAMETER ;
 800289e:	2302      	movs	r3, #2
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	200045dc 	.word	0x200045dc
 80028b0:	2000460c 	.word	0x2000460c

080028b4 <Port_VidRunnable>:

void              Port_VidRunnable (void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
	uint8 i = 0 ;
 80028ba:	2300      	movs	r3, #0
 80028bc:	71fb      	strb	r3, [r7, #7]
	while(  i < AMOUNT_PINS ){
 80028be:	e00f      	b.n	80028e0 <Port_VidRunnable+0x2c>
		if (Port_ArryOfActivition[i] != STD_OFF){
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <Port_VidRunnable+0x3c>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <Port_VidRunnable+0x26>
			Port_SetPinMode(i, Port_ArryOfPins[i]);
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <Port_VidRunnable+0x40>)
 80028ce:	5cd2      	ldrb	r2, [r2, r3]
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f80f 	bl	80028f8 <Port_SetPinMode>
		}
		i++;
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	3301      	adds	r3, #1
 80028de:	71fb      	strb	r3, [r7, #7]
	while(  i < AMOUNT_PINS ){
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b2f      	cmp	r3, #47	; 0x2f
 80028e4:	d9ec      	bls.n	80028c0 <Port_VidRunnable+0xc>
	}
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000460c 	.word	0x2000460c
 80028f4:	200045dc 	.word	0x200045dc

080028f8 <Port_SetPinMode>:
	00: Input mode (reset state)
	01: Output mode, max speed 10 MHz.
	10: Output mode, max speed 2 MHz.
	11: Output mode, max speed 50 MHz
=============================================== */
void    Port_SetPinMode      (Port_PinType Pin,Port_PinModeType Mode){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	460a      	mov	r2, r1
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	4613      	mov	r3, r2
 8002906:	71bb      	strb	r3, [r7, #6]

	if (FlagOfReset == 0){
 8002908:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <Port_SetPinMode+0x134>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d123      	bne.n	8002958 <Port_SetPinMode+0x60>
		GPIOA->CRL &= ~(0xFFFFFFFF);
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <Port_SetPinMode+0x138>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <Port_SetPinMode+0x138>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
		GPIOB->CRL &= ~(0xFFFFFFFF);
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <Port_SetPinMode+0x13c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4b45      	ldr	r3, [pc, #276]	; (8002a34 <Port_SetPinMode+0x13c>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
		GPIOC->CRL &= ~(0xFFFFFFFF);
 8002924:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <Port_SetPinMode+0x140>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <Port_SetPinMode+0x140>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
		GPIOA->CRH &= ~(0xFFFFFFFF);
 800292e:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <Port_SetPinMode+0x138>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <Port_SetPinMode+0x138>)
 8002934:	2200      	movs	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
		GPIOB->CRH &= ~(0xFFFFFFFF);
 8002938:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <Port_SetPinMode+0x13c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <Port_SetPinMode+0x13c>)
 800293e:	2200      	movs	r2, #0
 8002940:	605a      	str	r2, [r3, #4]
		GPIOC->CRH &= ~(0xFFFFFFFF);
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <Port_SetPinMode+0x140>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <Port_SetPinMode+0x140>)
 8002948:	2200      	movs	r2, #0
 800294a:	605a      	str	r2, [r3, #4]
		FlagOfReset++;
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <Port_SetPinMode+0x134>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <Port_SetPinMode+0x134>)
 8002956:	701a      	strb	r2, [r3, #0]
	}

	if ( Pin >= Port_A0  && Pin <= Port_A15 ){
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d81b      	bhi.n	8002996 <Port_SetPinMode+0x9e>
		if (Pin <= Port_A7){
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	2b07      	cmp	r3, #7
 8002962:	d80b      	bhi.n	800297c <Port_SetPinMode+0x84>
			GPIOA->CRL |= ( Mode <<(Pin  * BASE_CRL_CRH) ) ;
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <Port_SetPinMode+0x138>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	79b9      	ldrb	r1, [r7, #6]
 800296a:	79fa      	ldrb	r2, [r7, #7]
 800296c:	0092      	lsls	r2, r2, #2
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <Port_SetPinMode+0x138>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6013      	str	r3, [r2, #0]
		GPIOB->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
	}
	else {
		Det_ReportError(MODULE_ID, Port_SetPinMode_ID, PORT_E_PARAM_PIN);
	}
}
 800297a:	e053      	b.n	8002a24 <Port_SetPinMode+0x12c>
			GPIOA->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <Port_SetPinMode+0x138>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	79b9      	ldrb	r1, [r7, #6]
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	3a08      	subs	r2, #8
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	4611      	mov	r1, r2
 800298e:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <Port_SetPinMode+0x138>)
 8002990:	430b      	orrs	r3, r1
 8002992:	6053      	str	r3, [r2, #4]
}
 8002994:	e046      	b.n	8002a24 <Port_SetPinMode+0x12c>
	else if (Pin >= Port_B0  && Pin <= Port_B15){
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d926      	bls.n	80029ea <Port_SetPinMode+0xf2>
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2b1f      	cmp	r3, #31
 80029a0:	d823      	bhi.n	80029ea <Port_SetPinMode+0xf2>
		if (Pin  <= Port_B7 ){
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	2b17      	cmp	r3, #23
 80029a6:	d80f      	bhi.n	80029c8 <Port_SetPinMode+0xd0>
			CLR_BIT(Pin,4);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f023 0310 	bic.w	r3, r3, #16
 80029ae:	71fb      	strb	r3, [r7, #7]
			GPIOB->CRL |= ( Mode << (Pin *BASE_CRL_CRH) ) ;
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <Port_SetPinMode+0x13c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	79b9      	ldrb	r1, [r7, #6]
 80029b6:	79fa      	ldrb	r2, [r7, #7]
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	4611      	mov	r1, r2
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <Port_SetPinMode+0x13c>)
 80029c2:	430b      	orrs	r3, r1
 80029c4:	6013      	str	r3, [r2, #0]
		if (Pin  <= Port_B7 ){
 80029c6:	e02d      	b.n	8002a24 <Port_SetPinMode+0x12c>
			CLR_BIT(Pin,4);
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f023 0310 	bic.w	r3, r3, #16
 80029ce:	71fb      	strb	r3, [r7, #7]
			GPIOB->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <Port_SetPinMode+0x13c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	79b9      	ldrb	r1, [r7, #6]
 80029d6:	79fa      	ldrb	r2, [r7, #7]
 80029d8:	3a08      	subs	r2, #8
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4611      	mov	r1, r2
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <Port_SetPinMode+0x13c>)
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6053      	str	r3, [r2, #4]
		if (Pin  <= Port_B7 ){
 80029e8:	e01c      	b.n	8002a24 <Port_SetPinMode+0x12c>
	else if (Pin >= Port_C0  && Pin <= Port_C15){
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	d913      	bls.n	8002a18 <Port_SetPinMode+0x120>
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b2f      	cmp	r3, #47	; 0x2f
 80029f4:	d810      	bhi.n	8002a18 <Port_SetPinMode+0x120>
		CLR_BIT(Pin,5);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f023 0320 	bic.w	r3, r3, #32
 80029fc:	71fb      	strb	r3, [r7, #7]
		GPIOB->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <Port_SetPinMode+0x13c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	79b9      	ldrb	r1, [r7, #6]
 8002a04:	79fa      	ldrb	r2, [r7, #7]
 8002a06:	3a08      	subs	r2, #8
 8002a08:	0092      	lsls	r2, r2, #2
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <Port_SetPinMode+0x13c>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6053      	str	r3, [r2, #4]
 8002a16:	e005      	b.n	8002a24 <Port_SetPinMode+0x12c>
		Det_ReportError(MODULE_ID, Port_SetPinMode_ID, PORT_E_PARAM_PIN);
 8002a18:	220a      	movs	r2, #10
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	207c      	movs	r0, #124	; 0x7c
 8002a1e:	f7ff fcf1 	bl	8002404 <Det_ReportError>
}
 8002a22:	e7ff      	b.n	8002a24 <Port_SetPinMode+0x12c>
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000463c 	.word	0x2000463c
 8002a30:	40010800 	.word	0x40010800
 8002a34:	40010c00 	.word	0x40010c00
 8002a38:	40011000 	.word	0x40011000

08002a3c <USART_VidInit>:
 * \enduml
 */


void USART_VidInit(const USART_ConfigType *USART_CFG)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    if (USART_CFG == NULL){
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80c3 	beq.w	8002bd2 <USART_VidInit+0x196>
        return;
    }

	for (int i = 0; i < NUMBER_OF_USED_UARTS; i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e0ba      	b.n	8002bc8 <USART_VidInit+0x18c>
	    {
 if (USART_CFG->UART_Array[i].USARTEnableType == UE_DISEBLE)
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	440b      	add	r3, r1
 8002a60:	3308      	adds	r3, #8
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80ab 	beq.w	8002bc0 <USART_VidInit+0x184>
	continue;


 switch (USART_CFG->UART_Array[i].USARTid)
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d02d      	beq.n	8002ada <USART_VidInit+0x9e>
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	dc3f      	bgt.n	8002b02 <USART_VidInit+0xc6>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <USART_VidInit+0x50>
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d013      	beq.n	8002ab2 <USART_VidInit+0x76>
 8002a8a:	e03a      	b.n	8002b02 <USART_VidInit+0xc6>
 {
 case UART1:
			Mcu_EnumSetPerAPB2(APB2_PER_USART1);
 8002a8c:	4853      	ldr	r0, [pc, #332]	; (8002bdc <USART_VidInit+0x1a0>)
 8002a8e:	f7ff fe65 	bl	800275c <Mcu_EnumSetPerAPB2>
			Mcu_VidRunnable();
 8002a92:	f7ff fe81 	bl	8002798 <Mcu_VidRunnable>

			Port_EnumSetterPin(Port_A9, PORT_PIN_OUT | A_PUSH_PULL);
 8002a96:	210a      	movs	r1, #10
 8002a98:	2009      	movs	r0, #9
 8002a9a:	f7ff feeb 	bl	8002874 <Port_EnumSetterPin>
			Port_EnumSetterPin(Port_A10, PORT_PIN_IN | FLOATING_INPUT);
 8002a9e:	2104      	movs	r1, #4
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f7ff fee7 	bl	8002874 <Port_EnumSetterPin>
			Port_VidRunnable();
 8002aa6:	f7ff ff05 	bl	80028b4 <Port_VidRunnable>
			UART_PTR = MUART1;
 8002aaa:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <USART_VidInit+0x1a4>)
 8002aac:	4a4d      	ldr	r2, [pc, #308]	; (8002be4 <USART_VidInit+0x1a8>)
 8002aae:	601a      	str	r2, [r3, #0]
			break;
 8002ab0:	e027      	b.n	8002b02 <USART_VidInit+0xc6>
 case UART2:
		Mcu_EnumSetPerAPB1(APB1_PER_USART2);
 8002ab2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ab6:	f7ff fe35 	bl	8002724 <Mcu_EnumSetPerAPB1>
		Mcu_VidRunnable();
 8002aba:	f7ff fe6d 	bl	8002798 <Mcu_VidRunnable>

		Port_EnumSetterPin(Port_A2, PORT_PIN_OUT | A_PUSH_PULL);
 8002abe:	210a      	movs	r1, #10
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7ff fed7 	bl	8002874 <Port_EnumSetterPin>
		Port_EnumSetterPin(Port_A3, PORT_PIN_IN | FLOATING_INPUT);
 8002ac6:	2104      	movs	r1, #4
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f7ff fed3 	bl	8002874 <Port_EnumSetterPin>
		Port_VidRunnable();
 8002ace:	f7ff fef1 	bl	80028b4 <Port_VidRunnable>
		UART_PTR = MUART2;
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <USART_VidInit+0x1a4>)
 8002ad4:	4a44      	ldr	r2, [pc, #272]	; (8002be8 <USART_VidInit+0x1ac>)
 8002ad6:	601a      	str	r2, [r3, #0]
		break;
 8002ad8:	e013      	b.n	8002b02 <USART_VidInit+0xc6>
 case UART3:
		Mcu_EnumSetPerAPB1(APB1_PER_USART3);
 8002ada:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ade:	f7ff fe21 	bl	8002724 <Mcu_EnumSetPerAPB1>
		Mcu_VidRunnable();
 8002ae2:	f7ff fe59 	bl	8002798 <Mcu_VidRunnable>

		Port_EnumSetterPin(Port_B10, PORT_PIN_OUT | A_PUSH_PULL);
 8002ae6:	210a      	movs	r1, #10
 8002ae8:	201a      	movs	r0, #26
 8002aea:	f7ff fec3 	bl	8002874 <Port_EnumSetterPin>
		Port_EnumSetterPin(Port_B11, PORT_PIN_IN | FLOATING_INPUT);
 8002aee:	2104      	movs	r1, #4
 8002af0:	201b      	movs	r0, #27
 8002af2:	f7ff febf 	bl	8002874 <Port_EnumSetterPin>
		Port_VidRunnable();
 8002af6:	f7ff fedd 	bl	80028b4 <Port_VidRunnable>
		UART_PTR = MUART3;
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <USART_VidInit+0x1a4>)
 8002afc:	4a3b      	ldr	r2, [pc, #236]	; (8002bec <USART_VidInit+0x1b0>)
 8002afe:	601a      	str	r2, [r3, #0]
		break;
 8002b00:	bf00      	nop
}


UART_PTR->BR.R = USART_CFG->UART_Array[i].USARTBaud;
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	440b      	add	r3, r1
 8002b10:	3302      	adds	r3, #2
 8002b12:	881a      	ldrh	r2, [r3, #0]
 8002b14:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <USART_VidInit+0x1a4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	609a      	str	r2, [r3, #8]
UART_PTR->CR1.B.M= USART_CFG->UART_Array[i].USARTWordLength;
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	3304      	adds	r3, #4
 8002b2a:	7819      	ldrb	r1, [r3, #0]
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <USART_VidInit+0x1a4>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	b2d9      	uxtb	r1, r3
 8002b38:	68d3      	ldr	r3, [r2, #12]
 8002b3a:	f361 330c 	bfi	r3, r1, #12, #1
 8002b3e:	60d3      	str	r3, [r2, #12]
UART_PTR->CR2.B.STOP = USART_CFG->UART_Array[i].USARTStopBits;
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3305      	adds	r3, #5
 8002b50:	7819      	ldrb	r1, [r3, #0]
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <USART_VidInit+0x1a4>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	460b      	mov	r3, r1
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	b2d9      	uxtb	r1, r3
 8002b5e:	6913      	ldr	r3, [r2, #16]
 8002b60:	f361 330d 	bfi	r3, r1, #12, #2
 8002b64:	6113      	str	r3, [r2, #16]
UART_PTR->CR1.B.REnTE = USART_CFG->UART_Array[i].USARTMode;
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	440b      	add	r3, r1
 8002b74:	3306      	adds	r3, #6
 8002b76:	7819      	ldrb	r1, [r3, #0]
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <USART_VidInit+0x1a4>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	b2d9      	uxtb	r1, r3
 8002b84:	68d3      	ldr	r3, [r2, #12]
 8002b86:	f361 0383 	bfi	r3, r1, #2, #2
 8002b8a:	60d3      	str	r3, [r2, #12]
UART_PTR->CR1.B.PSnPCE = USART_CFG->UART_Array[i].USARTParitySelection;
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	440b      	add	r3, r1
 8002b9a:	3307      	adds	r3, #7
 8002b9c:	7819      	ldrb	r1, [r3, #0]
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <USART_VidInit+0x1a4>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	b2d9      	uxtb	r1, r3
 8002baa:	68d3      	ldr	r3, [r2, #12]
 8002bac:	f361 234a 	bfi	r3, r1, #9, #2
 8002bb0:	60d3      	str	r3, [r2, #12]
					/*Start the USART*/
		UART_PTR->CR1.B.UE = UE_ENABLE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <USART_VidInit+0x1a4>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68d3      	ldr	r3, [r2, #12]
 8002bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bbc:	60d3      	str	r3, [r2, #12]
 8002bbe:	e000      	b.n	8002bc2 <USART_VidInit+0x186>
	continue;
 8002bc0:	bf00      	nop
	for (int i = 0; i < NUMBER_OF_USED_UARTS; i++)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	f77f af41 	ble.w	8002a52 <USART_VidInit+0x16>
 8002bd0:	e000      	b.n	8002bd4 <USART_VidInit+0x198>
        return;
 8002bd2:	bf00      	nop
}
}
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	80004000 	.word	0x80004000
 8002be0:	20004640 	.word	0x20004640
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40004400 	.word	0x40004400
 8002bec:	40004800 	.word	0x40004800

08002bf0 <USART_ReceiveByte>:
 *	:return recievedData;
 * end
 * \enduml
*/
uint8 USART_ReceiveByte(USART_ID UART_ID)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
    uint8 Copy_U8Data;
    uint32 Copy_U32TimeOut=0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
	//UART_PTR->DR.R = 0;
	switch(UART_ID)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d00e      	beq.n	8002c22 <USART_ReceiveByte+0x32>
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	dc14      	bgt.n	8002c32 <USART_ReceiveByte+0x42>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <USART_ReceiveByte+0x22>
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d004      	beq.n	8002c1a <USART_ReceiveByte+0x2a>
 8002c10:	e00b      	b.n	8002c2a <USART_ReceiveByte+0x3a>
	{
	case UART1:
		UART_PTR = MUART1;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <USART_ReceiveByte+0x8c>)
 8002c14:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <USART_ReceiveByte+0x90>)
 8002c16:	601a      	str	r2, [r3, #0]
		break;
 8002c18:	e007      	b.n	8002c2a <USART_ReceiveByte+0x3a>
	case UART2:
		UART_PTR = MUART2;
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <USART_ReceiveByte+0x8c>)
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <USART_ReceiveByte+0x94>)
 8002c1e:	601a      	str	r2, [r3, #0]
		break;
 8002c20:	e003      	b.n	8002c2a <USART_ReceiveByte+0x3a>
	case UART3:
		UART_PTR = MUART3;
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <USART_ReceiveByte+0x8c>)
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <USART_ReceiveByte+0x98>)
 8002c26:	601a      	str	r2, [r3, #0]
		break;
 8002c28:	bf00      	nop
	}
    while((UART_PTR->SR.B.RXNE == 0) && (Copy_U32TimeOut < THRESHOLD_VALUE))
 8002c2a:	e002      	b.n	8002c32 <USART_ReceiveByte+0x42>
    {
           Copy_U32TimeOut++;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
    while((UART_PTR->SR.B.RXNE == 0) && (Copy_U32TimeOut < THRESHOLD_VALUE))
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <USART_ReceiveByte+0x8c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <USART_ReceiveByte+0x5a>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <USART_ReceiveByte+0x9c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d9f0      	bls.n	8002c2c <USART_ReceiveByte+0x3c>
       }

       if(Copy_U32TimeOut == THRESHOLD_VALUE)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <USART_ReceiveByte+0xa0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d102      	bne.n	8002c58 <USART_ReceiveByte+0x68>
       {
           Copy_U8Data = 255;
 8002c52:	23ff      	movs	r3, #255	; 0xff
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e005      	b.n	8002c64 <USART_ReceiveByte+0x74>
       }
       else
       {
           Copy_U8Data = UART_PTR->DR.R;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <USART_ReceiveByte+0x8c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
           Copy_U32TimeOut=0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]

       }
       UART_PTR->SR.B.RXNE = 0;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <USART_ReceiveByte+0x8c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	f36f 1345 	bfc	r3, #5, #1
 8002c6e:	6013      	str	r3, [r2, #0]
       return Copy_U8Data;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20004640 	.word	0x20004640
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40004800 	.word	0x40004800
 8002c8c:	0001869f 	.word	0x0001869f
 8002c90:	000186a0 	.word	0x000186a0

08002c94 <USART_VidSendChar>:
 *	:MUART->SR.B.TC = 0;
 * end
 * \enduml
 */
void USART_VidSendChar(USART_ID UART_ID, uint8 Copy_U8Data)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	71fb      	strb	r3, [r7, #7]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71bb      	strb	r3, [r7, #6]
	switch(UART_ID)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d00e      	beq.n	8002cc8 <USART_VidSendChar+0x34>
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	dc10      	bgt.n	8002cd0 <USART_VidSendChar+0x3c>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <USART_VidSendChar+0x24>
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d004      	beq.n	8002cc0 <USART_VidSendChar+0x2c>
 8002cb6:	e00b      	b.n	8002cd0 <USART_VidSendChar+0x3c>
		{
		case UART1:
			UART_PTR = MUART1;
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <USART_VidSendChar+0x70>)
 8002cba:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <USART_VidSendChar+0x74>)
 8002cbc:	601a      	str	r2, [r3, #0]
			break;
 8002cbe:	e007      	b.n	8002cd0 <USART_VidSendChar+0x3c>
		case UART2:
			UART_PTR = MUART2;
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <USART_VidSendChar+0x70>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <USART_VidSendChar+0x78>)
 8002cc4:	601a      	str	r2, [r3, #0]
			break;
 8002cc6:	e003      	b.n	8002cd0 <USART_VidSendChar+0x3c>
		case UART3:
			UART_PTR = MUART3;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <USART_VidSendChar+0x70>)
 8002cca:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <USART_VidSendChar+0x7c>)
 8002ccc:	601a      	str	r2, [r3, #0]
			break;
 8002cce:	bf00      	nop
		}

	UART_PTR->SR.B.TC = 0;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <USART_VidSendChar+0x70>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	f36f 1386 	bfc	r3, #6, #1
 8002cda:	6013      	str	r3, [r2, #0]
	UART_PTR->DR.R = Copy_U8Data;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <USART_VidSendChar+0x70>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	79ba      	ldrb	r2, [r7, #6]
 8002ce2:	605a      	str	r2, [r3, #4]
    while (!UART_PTR->SR.B.TC);
 8002ce4:	bf00      	nop
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <USART_VidSendChar+0x70>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f7      	beq.n	8002ce6 <USART_VidSendChar+0x52>
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20004640 	.word	0x20004640
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	40004800 	.word	0x40004800

08002d14 <USART_TransmitString>:
  * stop
  * \enduml
  */

 void USART_TransmitString(USART_ID UART_ID,uint8 *string_Copy_U8Data)
 {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
     for (int i = 0 ; string_Copy_U8Data[i] != '\0' ; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e00b      	b.n	8002d3e <USART_TransmitString+0x2a>
     	USART_VidSendChar(UART_ID, string_Copy_U8Data[i]);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ffae 	bl	8002c94 <USART_VidSendChar>
     for (int i = 0 ; string_Copy_U8Data[i] != '\0' ; i++)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ed      	bne.n	8002d26 <USART_TransmitString+0x12>
 }
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <main>:
void LedShape3();
void LedShape4();
void TTL_ReciveString();

int main(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af02      	add	r7, sp, #8
	BaseType_t ret1;
	BaseType_t ret2;
	BaseType_t ret3;
	BaseType_t ret4;

	Mcu_Init();
 8002d5a:	f7ff fc7d 	bl	8002658 <Mcu_Init>
	Mcu_EnumSetPerAPB2(APB2_PER_GPIOA);
 8002d5e:	483e      	ldr	r0, [pc, #248]	; (8002e58 <main+0x104>)
 8002d60:	f7ff fcfc 	bl	800275c <Mcu_EnumSetPerAPB2>
	Mcu_EnumSetPerAPB2(APB2_PER_GPIOB);
 8002d64:	483d      	ldr	r0, [pc, #244]	; (8002e5c <main+0x108>)
 8002d66:	f7ff fcf9 	bl	800275c <Mcu_EnumSetPerAPB2>
	Mcu_VidRunnable();
 8002d6a:	f7ff fd15 	bl	8002798 <Mcu_VidRunnable>

	USART_VidInit(arrOfUART);
 8002d6e:	483c      	ldr	r0, [pc, #240]	; (8002e60 <main+0x10c>)
 8002d70:	f7ff fe64 	bl	8002a3c <USART_VidInit>
	LCD_VidInit();
 8002d74:	f7ff fba8 	bl	80024c8 <LCD_VidInit>

	ret1 = xTaskCreate(ActionTask,"ActionTask", (configSTACK_DEPTH_TYPE) 100,
 8002d78:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <main+0x110>)
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <main+0x114>)
 8002d82:	2264      	movs	r2, #100	; 0x64
 8002d84:	4938      	ldr	r1, [pc, #224]	; (8002e68 <main+0x114>)
 8002d86:	4839      	ldr	r0, [pc, #228]	; (8002e6c <main+0x118>)
 8002d88:	f7fd fe46 	bl	8000a18 <xTaskCreate>
 8002d8c:	61f8      	str	r0, [r7, #28]
			"ActionTask", (UBaseType_t) 1, &ActionTask_Handler);
	ret2 = xTaskCreate(ManagerTask, "ManagerTask", (configSTACK_DEPTH_TYPE) 100,
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <main+0x11c>)
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2302      	movs	r3, #2
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <main+0x120>)
 8002d98:	2264      	movs	r2, #100	; 0x64
 8002d9a:	4936      	ldr	r1, [pc, #216]	; (8002e74 <main+0x120>)
 8002d9c:	4836      	ldr	r0, [pc, #216]	; (8002e78 <main+0x124>)
 8002d9e:	f7fd fe3b 	bl	8000a18 <xTaskCreate>
 8002da2:	61b8      	str	r0, [r7, #24]
			"ManagerTask", (UBaseType_t) 2, &TaskManager_Handler);
	ret3 = xTaskCreate(Led_Update,"Led_Update", (configSTACK_DEPTH_TYPE) 100,
 8002da4:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <main+0x128>)
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <main+0x114>)
 8002dae:	2264      	movs	r2, #100	; 0x64
 8002db0:	4933      	ldr	r1, [pc, #204]	; (8002e80 <main+0x12c>)
 8002db2:	4834      	ldr	r0, [pc, #208]	; (8002e84 <main+0x130>)
 8002db4:	f7fd fe30 	bl	8000a18 <xTaskCreate>
 8002db8:	6178      	str	r0, [r7, #20]
			"ActionTask", (UBaseType_t) 0, &Led_Update_Handler);
	ret4 = xTaskCreate(LCD_Update, "LCD_Update", (configSTACK_DEPTH_TYPE) 100,
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <main+0x134>)
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <main+0x120>)
 8002dc4:	2264      	movs	r2, #100	; 0x64
 8002dc6:	4931      	ldr	r1, [pc, #196]	; (8002e8c <main+0x138>)
 8002dc8:	4831      	ldr	r0, [pc, #196]	; (8002e90 <main+0x13c>)
 8002dca:	f7fd fe25 	bl	8000a18 <xTaskCreate>
 8002dce:	6138      	str	r0, [r7, #16]
			"ManagerTask", (UBaseType_t) 0, &LCD_Update_Handler);

	GLobalQueue = xQueueCreate( (UBaseType_t) 3, (UBaseType_t) sizeof(uint8) );
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f7fd fae3 	bl	80003a0 <xQueueGenericCreate>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <main+0x140>)
 8002dde:	6013      	str	r3, [r2, #0]

	configASSERT(ret1 == pdPASS);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d00a      	beq.n	8002dfc <main+0xa8>
        __asm volatile
 8002de6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	60fb      	str	r3, [r7, #12]
    }
 8002df8:	bf00      	nop
 8002dfa:	e7fe      	b.n	8002dfa <main+0xa6>
	configASSERT(ret2 == pdPASS);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d00a      	beq.n	8002e18 <main+0xc4>
        __asm volatile
 8002e02:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	60bb      	str	r3, [r7, #8]
    }
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <main+0xc2>
	configASSERT(ret3 == pdPASS);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d00a      	beq.n	8002e34 <main+0xe0>
        __asm volatile
 8002e1e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	607b      	str	r3, [r7, #4]
    }
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <main+0xde>
	configASSERT(ret4 == pdPASS);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d00a      	beq.n	8002e50 <main+0xfc>
        __asm volatile
 8002e3a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	603b      	str	r3, [r7, #0]
    }
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <main+0xfa>

	vTaskStartScheduler();
 8002e50:	f7fe f87e 	bl	8000f50 <vTaskStartScheduler>
    /* Loop forever */

	for(;;);
 8002e54:	e7fe      	b.n	8002e54 <main+0x100>
 8002e56:	bf00      	nop
 8002e58:	80000004 	.word	0x80000004
 8002e5c:	80000008 	.word	0x80000008
 8002e60:	2000002c 	.word	0x2000002c
 8002e64:	20004648 	.word	0x20004648
 8002e68:	080033e4 	.word	0x080033e4
 8002e6c:	08002f05 	.word	0x08002f05
 8002e70:	20004644 	.word	0x20004644
 8002e74:	080033f0 	.word	0x080033f0
 8002e78:	08002e99 	.word	0x08002e99
 8002e7c:	2000464c 	.word	0x2000464c
 8002e80:	080033fc 	.word	0x080033fc
 8002e84:	08002f89 	.word	0x08002f89
 8002e88:	20004650 	.word	0x20004650
 8002e8c:	08003408 	.word	0x08003408
 8002e90:	08003041 	.word	0x08003041
 8002e94:	20004654 	.word	0x20004654

08002e98 <ManagerTask>:
}

void ManagerTask(void *pvParameter ){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(1));
 8002ea0:	2008      	movs	r0, #8
 8002ea2:	f7fd fef3 	bl	8000c8c <vTaskDelay>

	uint8 RecivedMassage ;

	for(;;){
		/* to clear recive massege with each iteration */
		RecivedMassage = 0 ;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]

		/* To show the first statement */
		USART_TransmitString(UART3,"   Choose option 1-Led update 2-LCD update    ");
 8002eaa:	4913      	ldr	r1, [pc, #76]	; (8002ef8 <ManagerTask+0x60>)
 8002eac:	2002      	movs	r0, #2
 8002eae:	f7ff ff31 	bl	8002d14 <USART_TransmitString>

		/*  to check on option */
		while( RecivedMassage != '1' && RecivedMassage != '2' ){
 8002eb2:	e004      	b.n	8002ebe <ManagerTask+0x26>
		RecivedMassage = USART_ReceiveByte(UART3) ;
 8002eb4:	2002      	movs	r0, #2
 8002eb6:	f7ff fe9b 	bl	8002bf0 <USART_ReceiveByte>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73fb      	strb	r3, [r7, #15]
		while( RecivedMassage != '1' && RecivedMassage != '2' ){
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b31      	cmp	r3, #49	; 0x31
 8002ec2:	d002      	beq.n	8002eca <ManagerTask+0x32>
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b32      	cmp	r3, #50	; 0x32
 8002ec8:	d1f4      	bne.n	8002eb4 <ManagerTask+0x1c>
		}

		xQueueSend( GLobalQueue,&RecivedMassage, portMAX_DELAY );
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <ManagerTask+0x64>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f107 010f 	add.w	r1, r7, #15
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	f7fd fae0 	bl	800049c <xQueueGenericSend>

		xTaskNotify( ActionTask_Handler , (uint32) 0 , eIncrement );
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <ManagerTask+0x68>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f7fe fcdd 	bl	80018a8 <xTaskGenericNotify>

        /* to out from scheduling */
		vTaskSuspend(NULL);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd ff00 	bl	8000cf4 <vTaskSuspend>
		RecivedMassage = 0 ;
 8002ef4:	e7d7      	b.n	8002ea6 <ManagerTask+0xe>
 8002ef6:	bf00      	nop
 8002ef8:	08003414 	.word	0x08003414
 8002efc:	20004654 	.word	0x20004654
 8002f00:	20004648 	.word	0x20004648

08002f04 <ActionTask>:
	}
	vTaskDelete(NULL_PTR);
}

void ActionTask(void *pvParameter ){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(2));
 8002f0c:	2010      	movs	r0, #16
 8002f0e:	f7fd febd 	bl	8000c8c <vTaskDelay>

	uint8 RecivedMassage ;

	for(;;){
		/* to clear recive massege with each iteration */
		RecivedMassage = 0 ;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]

        // Wait for a notification
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002f16:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fe fc57 	bl	80017d0 <ulTaskGenericNotifyTake>

		xQueueReceive(GLobalQueue, &RecivedMassage,portMAX_DELAY );
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <ActionTask+0x78>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f107 010f 	add.w	r1, r7, #15
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fb9a 	bl	8000668 <xQueueReceive>

		/* to see option on putty */
		USART_TransmitString(UART3,&RecivedMassage);
 8002f34:	f107 030f 	add.w	r3, r7, #15
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2002      	movs	r0, #2
 8002f3c:	f7ff feea 	bl	8002d14 <USART_TransmitString>

		/* to notify other tasks */
        switch ( RecivedMassage){
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b31      	cmp	r3, #49	; 0x31
 8002f44:	d002      	beq.n	8002f4c <ActionTask+0x48>
 8002f46:	2b32      	cmp	r3, #50	; 0x32
 8002f48:	d00a      	beq.n	8002f60 <ActionTask+0x5c>
 8002f4a:	e013      	b.n	8002f74 <ActionTask+0x70>

        case '1' :
    		xTaskNotify( Led_Update_Handler , (uint32) 0, eIncrement );
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <ActionTask+0x7c>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	2300      	movs	r3, #0
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2302      	movs	r3, #2
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f7fe fca5 	bl	80018a8 <xTaskGenericNotify>
        	break ;
 8002f5e:	e009      	b.n	8002f74 <ActionTask+0x70>
        case '2' :
    		xTaskNotify( LCD_Update_Handler , (uint32) 0, eIncrement );
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <ActionTask+0x80>)
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f7fe fc9b 	bl	80018a8 <xTaskGenericNotify>
        	break ;
 8002f72:	bf00      	nop

                }

        /* to out from scheduling */
		vTaskSuspend(NULL);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fd febd 	bl	8000cf4 <vTaskSuspend>
		RecivedMassage = 0 ;
 8002f7a:	e7ca      	b.n	8002f12 <ActionTask+0xe>
 8002f7c:	20004654 	.word	0x20004654
 8002f80:	2000464c 	.word	0x2000464c
 8002f84:	20004650 	.word	0x20004650

08002f88 <Led_Update>:

	}
	vTaskDelete(NULL_PTR);
}

void Led_Update(void *pvParameter ){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(3));
 8002f90:	2018      	movs	r0, #24
 8002f92:	f7fd fe7b 	bl	8000c8c <vTaskDelay>

	uint8 RecivedMassage ;

	/* Intilaize four leds */
	Port_EnumSetterPin(Port_A9, PORT_PIN_OUT|G_PUSH_PULL);
 8002f96:	2102      	movs	r1, #2
 8002f98:	2009      	movs	r0, #9
 8002f9a:	f7ff fc6b 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(Port_A10, PORT_PIN_OUT|G_PUSH_PULL);
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	f7ff fc67 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(Port_A11, PORT_PIN_OUT|G_PUSH_PULL);
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	200b      	movs	r0, #11
 8002faa:	f7ff fc63 	bl	8002874 <Port_EnumSetterPin>
	Port_EnumSetterPin(Port_A12, PORT_PIN_OUT|G_PUSH_PULL);
 8002fae:	2102      	movs	r1, #2
 8002fb0:	200c      	movs	r0, #12
 8002fb2:	f7ff fc5f 	bl	8002874 <Port_EnumSetterPin>
	Port_VidRunnable();
 8002fb6:	f7ff fc7d 	bl	80028b4 <Port_VidRunnable>

	for(;;){
		/* to clear recive massege with each iteration */
		RecivedMassage = 0 ;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]

        // Wait for a notification
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fe fc03 	bl	80017d0 <ulTaskGenericNotifyTake>

		USART_TransmitString(UART3,"   Wanted shape (1:4) = ");
 8002fca:	491c      	ldr	r1, [pc, #112]	; (800303c <Led_Update+0xb4>)
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f7ff fea1 	bl	8002d14 <USART_TransmitString>

		/*  to check on option */
		while (RecivedMassage != '1' && RecivedMassage != '2'
 8002fd2:	e004      	b.n	8002fde <Led_Update+0x56>
				&& RecivedMassage != '3' && RecivedMassage != '4') {
		RecivedMassage = USART_ReceiveByte(UART3) ;
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f7ff fe0b 	bl	8002bf0 <USART_ReceiveByte>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	73fb      	strb	r3, [r7, #15]
		while (RecivedMassage != '1' && RecivedMassage != '2'
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
				&& RecivedMassage != '3' && RecivedMassage != '4') {
 8002fe0:	2b31      	cmp	r3, #49	; 0x31
 8002fe2:	d008      	beq.n	8002ff6 <Led_Update+0x6e>
		while (RecivedMassage != '1' && RecivedMassage != '2'
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b32      	cmp	r3, #50	; 0x32
 8002fe8:	d005      	beq.n	8002ff6 <Led_Update+0x6e>
				&& RecivedMassage != '3' && RecivedMassage != '4') {
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b33      	cmp	r3, #51	; 0x33
 8002fee:	d002      	beq.n	8002ff6 <Led_Update+0x6e>
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b34      	cmp	r3, #52	; 0x34
 8002ff4:	d1ee      	bne.n	8002fd4 <Led_Update+0x4c>
		}

		/* to see option on putty */
		USART_TransmitString(UART3,&RecivedMassage);
 8002ff6:	f107 030f 	add.w	r3, r7, #15
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	2002      	movs	r0, #2
 8002ffe:	f7ff fe89 	bl	8002d14 <USART_TransmitString>

		/* to notify other tasks */
        switch ( RecivedMassage){
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3b31      	subs	r3, #49	; 0x31
 8003006:	2b03      	cmp	r3, #3
 8003008:	d8d7      	bhi.n	8002fba <Led_Update+0x32>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <Led_Update+0x88>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003021 	.word	0x08003021
 8003014:	08003027 	.word	0x08003027
 8003018:	0800302d 	.word	0x0800302d
 800301c:	08003033 	.word	0x08003033
        case '1' :
        	LedShape1();
 8003020:	f000 f830 	bl	8003084 <LedShape1>
        	break ;
 8003024:	e009      	b.n	800303a <Led_Update+0xb2>
        case '2' :
        	LedShape2();
 8003026:	f000 f873 	bl	8003110 <LedShape2>
        	break ;
 800302a:	e006      	b.n	800303a <Led_Update+0xb2>
        case '3' :
        	LedShape3();
 800302c:	f000 f8b6 	bl	800319c <LedShape3>
        	break ;
 8003030:	e003      	b.n	800303a <Led_Update+0xb2>
        case '4' :
        	LedShape4();
 8003032:	f000 f8f5 	bl	8003220 <LedShape4>
        	break ;
 8003036:	bf00      	nop
 8003038:	e7bf      	b.n	8002fba <Led_Update+0x32>
		RecivedMassage = 0 ;
 800303a:	e7be      	b.n	8002fba <Led_Update+0x32>
 800303c:	08003444 	.word	0x08003444

08003040 <LCD_Update>:
                }
	}
	vTaskDelete(NULL_PTR);
}

void LCD_Update(void *pvParameter ){
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(3));
 8003048:	2018      	movs	r0, #24
 800304a:	f7fd fe1f 	bl	8000c8c <vTaskDelay>

	for(;;){
        // Wait for a notification
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800304e:	f04f 32ff 	mov.w	r2, #4294967295
 8003052:	2101      	movs	r1, #1
 8003054:	2000      	movs	r0, #0
 8003056:	f7fe fbbb 	bl	80017d0 <ulTaskGenericNotifyTake>

		TTL_ReciveString();
 800305a:	f000 f923 	bl	80032a4 <TTL_ReciveString>

		vTaskResume(TaskManager_Handler);
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <LCD_Update+0x3c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd ff16 	bl	8000e94 <vTaskResume>
		vTaskResume(ActionTask_Handler);
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <LCD_Update+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd ff11 	bl	8000e94 <vTaskResume>
		vTaskSuspend(NULL_PTR);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fe3e 	bl	8000cf4 <vTaskSuspend>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003078:	e7e9      	b.n	800304e <LCD_Update+0xe>
 800307a:	bf00      	nop
 800307c:	20004644 	.word	0x20004644
 8003080:	20004648 	.word	0x20004648

08003084 <LedShape1>:
	}

	vTaskDelete(NULL_PTR);
}

void LedShape1(){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
	for (uint8 i = 0 ; i < 10 ; i++){
 800308a:	2300      	movs	r3, #0
 800308c:	71fb      	strb	r3, [r7, #7]
 800308e:	e02a      	b.n	80030e6 <LedShape1+0x62>
		Dio_WriteChannel(Dio_A9, STD_ON);
 8003090:	2101      	movs	r1, #1
 8003092:	2009      	movs	r0, #9
 8003094:	f7ff f8f0 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A10, STD_OFF);
 8003098:	2100      	movs	r1, #0
 800309a:	200a      	movs	r0, #10
 800309c:	f7ff f8ec 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A11, STD_OFF);
 80030a0:	2100      	movs	r1, #0
 80030a2:	200b      	movs	r0, #11
 80030a4:	f7ff f8e8 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A12, STD_ON);
 80030a8:	2101      	movs	r1, #1
 80030aa:	200c      	movs	r0, #12
 80030ac:	f7ff f8e4 	bl	8002278 <Dio_WriteChannel>
		vTaskDelay(pdMS_TO_TICKS(250));
 80030b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030b4:	f7fd fdea 	bl	8000c8c <vTaskDelay>
		Dio_WriteChannel(Dio_A9, STD_OFF);
 80030b8:	2100      	movs	r1, #0
 80030ba:	2009      	movs	r0, #9
 80030bc:	f7ff f8dc 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A10, STD_ON);
 80030c0:	2101      	movs	r1, #1
 80030c2:	200a      	movs	r0, #10
 80030c4:	f7ff f8d8 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A11, STD_ON);
 80030c8:	2101      	movs	r1, #1
 80030ca:	200b      	movs	r0, #11
 80030cc:	f7ff f8d4 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A12, STD_OFF);
 80030d0:	2100      	movs	r1, #0
 80030d2:	200c      	movs	r0, #12
 80030d4:	f7ff f8d0 	bl	8002278 <Dio_WriteChannel>
		vTaskDelay(pdMS_TO_TICKS(250));
 80030d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030dc:	f7fd fdd6 	bl	8000c8c <vTaskDelay>
	for (uint8 i = 0 ; i < 10 ; i++){
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	3301      	adds	r3, #1
 80030e4:	71fb      	strb	r3, [r7, #7]
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d9d1      	bls.n	8003090 <LedShape1+0xc>
	}
	vTaskResume(TaskManager_Handler);
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <LedShape1+0x84>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fecf 	bl	8000e94 <vTaskResume>
	vTaskResume(ActionTask_Handler);
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <LedShape1+0x88>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd feca 	bl	8000e94 <vTaskResume>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20004644 	.word	0x20004644
 800310c:	20004648 	.word	0x20004648

08003110 <LedShape2>:
void LedShape2(){
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
	for (uint8 i = 0 ; i < 10 ; i++){
 8003116:	2300      	movs	r3, #0
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	e02a      	b.n	8003172 <LedShape2+0x62>
		Dio_WriteChannel(Dio_A9, STD_ON);
 800311c:	2101      	movs	r1, #1
 800311e:	2009      	movs	r0, #9
 8003120:	f7ff f8aa 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A10, STD_OFF);
 8003124:	2100      	movs	r1, #0
 8003126:	200a      	movs	r0, #10
 8003128:	f7ff f8a6 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A11, STD_ON);
 800312c:	2101      	movs	r1, #1
 800312e:	200b      	movs	r0, #11
 8003130:	f7ff f8a2 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A12, STD_OFF);
 8003134:	2100      	movs	r1, #0
 8003136:	200c      	movs	r0, #12
 8003138:	f7ff f89e 	bl	8002278 <Dio_WriteChannel>
		vTaskDelay(pdMS_TO_TICKS(250));
 800313c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003140:	f7fd fda4 	bl	8000c8c <vTaskDelay>
		Dio_WriteChannel(Dio_A9, STD_OFF);
 8003144:	2100      	movs	r1, #0
 8003146:	2009      	movs	r0, #9
 8003148:	f7ff f896 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A10, STD_ON);
 800314c:	2101      	movs	r1, #1
 800314e:	200a      	movs	r0, #10
 8003150:	f7ff f892 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A11, STD_OFF);
 8003154:	2100      	movs	r1, #0
 8003156:	200b      	movs	r0, #11
 8003158:	f7ff f88e 	bl	8002278 <Dio_WriteChannel>
		Dio_WriteChannel(Dio_A12, STD_ON);
 800315c:	2101      	movs	r1, #1
 800315e:	200c      	movs	r0, #12
 8003160:	f7ff f88a 	bl	8002278 <Dio_WriteChannel>
		vTaskDelay(pdMS_TO_TICKS(250));
 8003164:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003168:	f7fd fd90 	bl	8000c8c <vTaskDelay>
	for (uint8 i = 0 ; i < 10 ; i++){
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	3301      	adds	r3, #1
 8003170:	71fb      	strb	r3, [r7, #7]
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	2b09      	cmp	r3, #9
 8003176:	d9d1      	bls.n	800311c <LedShape2+0xc>
	}
	vTaskResume(TaskManager_Handler);
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <LedShape2+0x84>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fe89 	bl	8000e94 <vTaskResume>
	vTaskResume(ActionTask_Handler);
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <LedShape2+0x88>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fe84 	bl	8000e94 <vTaskResume>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20004644 	.word	0x20004644
 8003198:	20004648 	.word	0x20004648

0800319c <LedShape3>:
void LedShape3(){
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
	Dio_WriteChannel(Dio_A9, STD_ON);
 80031a2:	2101      	movs	r1, #1
 80031a4:	2009      	movs	r0, #9
 80031a6:	f7ff f867 	bl	8002278 <Dio_WriteChannel>
	Dio_WriteChannel(Dio_A10, STD_ON);
 80031aa:	2101      	movs	r1, #1
 80031ac:	200a      	movs	r0, #10
 80031ae:	f7ff f863 	bl	8002278 <Dio_WriteChannel>
	Dio_WriteChannel(Dio_A11, STD_OFF);
 80031b2:	2100      	movs	r1, #0
 80031b4:	200b      	movs	r0, #11
 80031b6:	f7ff f85f 	bl	8002278 <Dio_WriteChannel>
	Dio_WriteChannel(Dio_A12, STD_OFF);
 80031ba:	2100      	movs	r1, #0
 80031bc:	200c      	movs	r0, #12
 80031be:	f7ff f85b 	bl	8002278 <Dio_WriteChannel>
	vTaskDelay(pdMS_TO_TICKS(250));
 80031c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031c6:	f7fd fd61 	bl	8000c8c <vTaskDelay>

	for (uint8 i = 0 ; i < 10 ; i++){
 80031ca:	2300      	movs	r3, #0
 80031cc:	71fb      	strb	r3, [r7, #7]
 80031ce:	e012      	b.n	80031f6 <LedShape3+0x5a>
		Dio_FlipChannel(Dio_A9);
 80031d0:	2009      	movs	r0, #9
 80031d2:	f7ff f8c9 	bl	8002368 <Dio_FlipChannel>
		Dio_FlipChannel(Dio_A10);
 80031d6:	200a      	movs	r0, #10
 80031d8:	f7ff f8c6 	bl	8002368 <Dio_FlipChannel>
		Dio_FlipChannel(Dio_A11);
 80031dc:	200b      	movs	r0, #11
 80031de:	f7ff f8c3 	bl	8002368 <Dio_FlipChannel>
		Dio_FlipChannel(Dio_A12);
 80031e2:	200c      	movs	r0, #12
 80031e4:	f7ff f8c0 	bl	8002368 <Dio_FlipChannel>
		vTaskDelay(pdMS_TO_TICKS(250));
 80031e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031ec:	f7fd fd4e 	bl	8000c8c <vTaskDelay>
	for (uint8 i = 0 ; i < 10 ; i++){
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	3301      	adds	r3, #1
 80031f4:	71fb      	strb	r3, [r7, #7]
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d9e9      	bls.n	80031d0 <LedShape3+0x34>
	}
	vTaskResume(TaskManager_Handler);
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <LedShape3+0x7c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd fe47 	bl	8000e94 <vTaskResume>
	vTaskResume(ActionTask_Handler);
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <LedShape3+0x80>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fe42 	bl	8000e94 <vTaskResume>
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20004644 	.word	0x20004644
 800321c:	20004648 	.word	0x20004648

08003220 <LedShape4>:
void LedShape4(){
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
	Dio_WriteChannel(Dio_A9, STD_OFF);
 8003226:	2100      	movs	r1, #0
 8003228:	2009      	movs	r0, #9
 800322a:	f7ff f825 	bl	8002278 <Dio_WriteChannel>
	Dio_WriteChannel(Dio_A10, STD_OFF);
 800322e:	2100      	movs	r1, #0
 8003230:	200a      	movs	r0, #10
 8003232:	f7ff f821 	bl	8002278 <Dio_WriteChannel>
	Dio_WriteChannel(Dio_A11, STD_ON);
 8003236:	2101      	movs	r1, #1
 8003238:	200b      	movs	r0, #11
 800323a:	f7ff f81d 	bl	8002278 <Dio_WriteChannel>
	Dio_WriteChannel(Dio_A12, STD_ON);
 800323e:	2101      	movs	r1, #1
 8003240:	200c      	movs	r0, #12
 8003242:	f7ff f819 	bl	8002278 <Dio_WriteChannel>
	vTaskDelay(pdMS_TO_TICKS(250));
 8003246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800324a:	f7fd fd1f 	bl	8000c8c <vTaskDelay>

	for (uint8 i = 0 ; i < 10 ; i++){
 800324e:	2300      	movs	r3, #0
 8003250:	71fb      	strb	r3, [r7, #7]
 8003252:	e012      	b.n	800327a <LedShape4+0x5a>
		Dio_FlipChannel(Dio_A9);
 8003254:	2009      	movs	r0, #9
 8003256:	f7ff f887 	bl	8002368 <Dio_FlipChannel>
		Dio_FlipChannel(Dio_A10);
 800325a:	200a      	movs	r0, #10
 800325c:	f7ff f884 	bl	8002368 <Dio_FlipChannel>
		Dio_FlipChannel(Dio_A11);
 8003260:	200b      	movs	r0, #11
 8003262:	f7ff f881 	bl	8002368 <Dio_FlipChannel>
		Dio_FlipChannel(Dio_A12);
 8003266:	200c      	movs	r0, #12
 8003268:	f7ff f87e 	bl	8002368 <Dio_FlipChannel>
		vTaskDelay(pdMS_TO_TICKS(250));
 800326c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003270:	f7fd fd0c 	bl	8000c8c <vTaskDelay>
	for (uint8 i = 0 ; i < 10 ; i++){
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	3301      	adds	r3, #1
 8003278:	71fb      	strb	r3, [r7, #7]
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	2b09      	cmp	r3, #9
 800327e:	d9e9      	bls.n	8003254 <LedShape4+0x34>
	}
	vTaskResume(TaskManager_Handler);
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <LedShape4+0x7c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fe05 	bl	8000e94 <vTaskResume>
	vTaskResume(ActionTask_Handler);
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <LedShape4+0x80>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fe00 	bl	8000e94 <vTaskResume>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20004644 	.word	0x20004644
 80032a0:	20004648 	.word	0x20004648

080032a4 <TTL_ReciveString>:

void TTL_ReciveString(){
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
	/* declare buffer */
	uint8 RecivedMassage ;
	USART_TransmitString(UART3,"     ");
 80032aa:	4913      	ldr	r1, [pc, #76]	; (80032f8 <TTL_ReciveString+0x54>)
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7ff fd31 	bl	8002d14 <USART_TransmitString>

	/*  to recive string from putty using TTL module */
	while ( RecivedMassage != '#') {
 80032b2:	e019      	b.n	80032e8 <TTL_ReciveString+0x44>

		RecivedMassage = USART_ReceiveByte(UART3) ;
 80032b4:	2002      	movs	r0, #2
 80032b6:	f7ff fc9b 	bl	8002bf0 <USART_ReceiveByte>
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]

		if ((RecivedMassage >= 'A' && RecivedMassage <= 'Z')
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d902      	bls.n	80032ca <TTL_ReciveString+0x26>
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	2b5a      	cmp	r3, #90	; 0x5a
 80032c8:	d905      	bls.n	80032d6 <TTL_ReciveString+0x32>
			|| (RecivedMassage >= 'a' && RecivedMassage <= 'z') ){
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b60      	cmp	r3, #96	; 0x60
 80032ce:	d90b      	bls.n	80032e8 <TTL_ReciveString+0x44>
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b7a      	cmp	r3, #122	; 0x7a
 80032d4:	d808      	bhi.n	80032e8 <TTL_ReciveString+0x44>

			/* to transmit data */
			USART_TransmitString(UART3,&RecivedMassage);
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	4619      	mov	r1, r3
 80032da:	2002      	movs	r0, #2
 80032dc:	f7ff fd1a 	bl	8002d14 <USART_TransmitString>
			LCD_VidSendChar(RecivedMassage);
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f960 	bl	80025a8 <LCD_VidSendChar>
	while ( RecivedMassage != '#') {
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2b23      	cmp	r3, #35	; 0x23
 80032ec:	d1e2      	bne.n	80032b4 <TTL_ReciveString+0x10>
		}//end if
	}//end while
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08003460 	.word	0x08003460

080032fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032fc:	480d      	ldr	r0, [pc, #52]	; (8003334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003304:	480c      	ldr	r0, [pc, #48]	; (8003338 <LoopForever+0x6>)
  ldr r1, =_edata
 8003306:	490d      	ldr	r1, [pc, #52]	; (800333c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <LoopForever+0xe>)
  movs r3, #0
 800330a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800330c:	e002      	b.n	8003314 <LoopCopyDataInit>

0800330e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800330e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003312:	3304      	adds	r3, #4

08003314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003318:	d3f9      	bcc.n	800330e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800331c:	4c0a      	ldr	r4, [pc, #40]	; (8003348 <LoopForever+0x16>)
  movs r3, #0
 800331e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003320:	e001      	b.n	8003326 <LoopFillZerobss>

08003322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003324:	3204      	adds	r2, #4

08003326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003328:	d3fb      	bcc.n	8003322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800332a:	f000 f819 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800332e:	f7ff fd11 	bl	8002d54 <main>

08003332 <LoopForever>:

LoopForever:
  b LoopForever
 8003332:	e7fe      	b.n	8003332 <LoopForever>
  ldr   r0, =_estack
 8003334:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800333c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003340:	08003470 	.word	0x08003470
  ldr r2, =_sbss
 8003344:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003348:	20004658 	.word	0x20004658

0800334c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800334c:	e7fe      	b.n	800334c <ADC1_2_IRQHandler>

0800334e <memset>:
 800334e:	4603      	mov	r3, r0
 8003350:	4402      	add	r2, r0
 8003352:	4293      	cmp	r3, r2
 8003354:	d100      	bne.n	8003358 <memset+0xa>
 8003356:	4770      	bx	lr
 8003358:	f803 1b01 	strb.w	r1, [r3], #1
 800335c:	e7f9      	b.n	8003352 <memset+0x4>
	...

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	2600      	movs	r6, #0
 8003364:	4d0c      	ldr	r5, [pc, #48]	; (8003398 <__libc_init_array+0x38>)
 8003366:	4c0d      	ldr	r4, [pc, #52]	; (800339c <__libc_init_array+0x3c>)
 8003368:	1b64      	subs	r4, r4, r5
 800336a:	10a4      	asrs	r4, r4, #2
 800336c:	42a6      	cmp	r6, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	f000 f828 	bl	80033c4 <_init>
 8003374:	2600      	movs	r6, #0
 8003376:	4d0a      	ldr	r5, [pc, #40]	; (80033a0 <__libc_init_array+0x40>)
 8003378:	4c0a      	ldr	r4, [pc, #40]	; (80033a4 <__libc_init_array+0x44>)
 800337a:	1b64      	subs	r4, r4, r5
 800337c:	10a4      	asrs	r4, r4, #2
 800337e:	42a6      	cmp	r6, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f855 3b04 	ldr.w	r3, [r5], #4
 8003388:	4798      	blx	r3
 800338a:	3601      	adds	r6, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003392:	4798      	blx	r3
 8003394:	3601      	adds	r6, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	08003468 	.word	0x08003468
 800339c:	08003468 	.word	0x08003468
 80033a0:	08003468 	.word	0x08003468
 80033a4:	0800346c 	.word	0x0800346c

080033a8 <memcpy>:
 80033a8:	440a      	add	r2, r1
 80033aa:	4291      	cmp	r1, r2
 80033ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80033b0:	d100      	bne.n	80033b4 <memcpy+0xc>
 80033b2:	4770      	bx	lr
 80033b4:	b510      	push	{r4, lr}
 80033b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ba:	4291      	cmp	r1, r2
 80033bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033c0:	d1f9      	bne.n	80033b6 <memcpy+0xe>
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <_init>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr

080033d0 <_fini>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr
