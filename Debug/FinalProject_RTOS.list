
FinalProject_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003920  08003920  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08003920  08003920  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003920  08003920  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004670  20000088  080039b0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046f8  080039b0  000246f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008689  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a69  00000000  00000000  0002877d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  0002a1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000044e  00000000  00000000  0002a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000186f  00000000  00000000  0002ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008038  00000000  00000000  0002c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00011c4c  00000000  00000000  000344e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000155c  00000000  00000000  00046134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00047690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	0800387c 	.word	0x0800387c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	0800387c 	.word	0x0800387c

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10a      	bne.n	80002fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002e4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80002e8:	f383 8811 	msr	BASEPRI, r3
 80002ec:	f3bf 8f6f 	isb	sy
 80002f0:	f3bf 8f4f 	dsb	sy
 80002f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002f6:	bf00      	nop
 80002f8:	e7fe      	b.n	80002f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80002fa:	f001 ff27 	bl	800214c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000306:	68f9      	ldr	r1, [r7, #12]
 8000308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800030a:	fb01 f303 	mul.w	r3, r1, r3
 800030e:	441a      	add	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2200      	movs	r2, #0
 8000318:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800032a:	3b01      	subs	r3, #1
 800032c:	68f9      	ldr	r1, [r7, #12]
 800032e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000330:	fb01 f303 	mul.w	r3, r1, r3
 8000334:	441a      	add	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	22ff      	movs	r2, #255	; 0xff
 800033e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	22ff      	movs	r2, #255	; 0xff
 8000346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d114      	bne.n	800037a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d01a      	beq.n	800038e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3310      	adds	r3, #16
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f92d 	bl	80015bc <xTaskRemoveFromEventList>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d012      	beq.n	800038e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <xQueueGenericReset+0xcc>)
 800036a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	f3bf 8f4f 	dsb	sy
 8000374:	f3bf 8f6f 	isb	sy
 8000378:	e009      	b.n	800038e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3310      	adds	r3, #16
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fef6 	bl	8000170 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3324      	adds	r3, #36	; 0x24
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fef1 	bl	8000170 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800038e:	f001 ff0d 	bl	80021ac <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	e000ed04 	.word	0xe000ed04

080003a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	4613      	mov	r3, r2
 80003ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10a      	bne.n	80003ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80003b4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003b8:	f383 8811 	msr	BASEPRI, r3
 80003bc:	f3bf 8f6f 	isb	sy
 80003c0:	f3bf 8f4f 	dsb	sy
 80003c4:	61bb      	str	r3, [r7, #24]
    }
 80003c6:	bf00      	nop
 80003c8:	e7fe      	b.n	80003c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	fb02 f303 	mul.w	r3, r2, r3
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d006      	beq.n	80003e8 <xQueueGenericCreate+0x48>
 80003da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d101      	bne.n	80003ec <xQueueGenericCreate+0x4c>
 80003e8:	2301      	movs	r3, #1
 80003ea:	e000      	b.n	80003ee <xQueueGenericCreate+0x4e>
 80003ec:	2300      	movs	r3, #0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d10a      	bne.n	8000408 <xQueueGenericCreate+0x68>
        __asm volatile
 80003f2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80003f6:	f383 8811 	msr	BASEPRI, r3
 80003fa:	f3bf 8f6f 	isb	sy
 80003fe:	f3bf 8f4f 	dsb	sy
 8000402:	617b      	str	r3, [r7, #20]
    }
 8000404:	bf00      	nop
 8000406:	e7fe      	b.n	8000406 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800040e:	d90a      	bls.n	8000426 <xQueueGenericCreate+0x86>
        __asm volatile
 8000410:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000414:	f383 8811 	msr	BASEPRI, r3
 8000418:	f3bf 8f6f 	isb	sy
 800041c:	f3bf 8f4f 	dsb	sy
 8000420:	613b      	str	r3, [r7, #16]
    }
 8000422:	bf00      	nop
 8000424:	e7fe      	b.n	8000424 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000428:	3348      	adds	r3, #72	; 0x48
 800042a:	4618      	mov	r0, r3
 800042c:	f001 ff48 	bl	80022c0 <pvPortMalloc>
 8000430:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000432:	6a3b      	ldr	r3, [r7, #32]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00d      	beq.n	8000454 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000438:	6a3b      	ldr	r3, [r7, #32]
 800043a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3348      	adds	r3, #72	; 0x48
 8000440:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000442:	79fa      	ldrb	r2, [r7, #7]
 8000444:	6a3b      	ldr	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	4613      	mov	r3, r2
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	68b9      	ldr	r1, [r7, #8]
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f000 f805 	bl	800045e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000454:	6a3b      	ldr	r3, [r7, #32]
    }
 8000456:	4618      	mov	r0, r3
 8000458:	3728      	adds	r7, #40	; 0x28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d103      	bne.n	800047a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	69ba      	ldr	r2, [r7, #24]
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	e002      	b.n	8000480 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800048c:	2101      	movs	r1, #1
 800048e:	69b8      	ldr	r0, [r7, #24]
 8000490:	f7ff ff1e 	bl	80002d0 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80004aa:	2300      	movs	r3, #0
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80004b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10a      	bne.n	80004ce <xQueueGenericSend+0x32>
        __asm volatile
 80004b8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004bc:	f383 8811 	msr	BASEPRI, r3
 80004c0:	f3bf 8f6f 	isb	sy
 80004c4:	f3bf 8f4f 	dsb	sy
 80004c8:	623b      	str	r3, [r7, #32]
    }
 80004ca:	bf00      	nop
 80004cc:	e7fe      	b.n	80004cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <xQueueGenericSend+0x40>
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d101      	bne.n	80004e0 <xQueueGenericSend+0x44>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <xQueueGenericSend+0x46>
 80004e0:	2300      	movs	r3, #0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10a      	bne.n	80004fc <xQueueGenericSend+0x60>
        __asm volatile
 80004e6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80004ea:	f383 8811 	msr	BASEPRI, r3
 80004ee:	f3bf 8f6f 	isb	sy
 80004f2:	f3bf 8f4f 	dsb	sy
 80004f6:	61fb      	str	r3, [r7, #28]
    }
 80004f8:	bf00      	nop
 80004fa:	e7fe      	b.n	80004fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d103      	bne.n	800050a <xQueueGenericSend+0x6e>
 8000502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000506:	2b01      	cmp	r3, #1
 8000508:	d101      	bne.n	800050e <xQueueGenericSend+0x72>
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <xQueueGenericSend+0x74>
 800050e:	2300      	movs	r3, #0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <xQueueGenericSend+0x8e>
        __asm volatile
 8000514:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	61bb      	str	r3, [r7, #24]
    }
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800052a:	f001 fe0f 	bl	800214c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800052e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000536:	429a      	cmp	r2, r3
 8000538:	d302      	bcc.n	8000540 <xQueueGenericSend+0xa4>
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d129      	bne.n	8000594 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	68b9      	ldr	r1, [r7, #8]
 8000544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000546:	f000 fa62 	bl	8000a0e <prvCopyDataToQueue>
 800054a:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	2b00      	cmp	r3, #0
 8000552:	d010      	beq.n	8000576 <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000556:	3324      	adds	r3, #36	; 0x24
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f82f 	bl	80015bc <xTaskRemoveFromEventList>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d013      	beq.n	800058c <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000564:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <xQueueGenericSend+0x1c8>)
 8000566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	f3bf 8f4f 	dsb	sy
 8000570:	f3bf 8f6f 	isb	sy
 8000574:	e00a      	b.n	800058c <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <xQueueGenericSend+0x1c8>)
 800057e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	f3bf 8f4f 	dsb	sy
 8000588:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800058c:	f001 fe0e 	bl	80021ac <vPortExitCritical>
                return pdPASS;
 8000590:	2301      	movs	r3, #1
 8000592:	e063      	b.n	800065c <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800059a:	f001 fe07 	bl	80021ac <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	e05c      	b.n	800065c <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d106      	bne.n	80005b6 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f867 	bl	8001680 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80005b6:	f001 fdf9 	bl	80021ac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80005ba:	f000 fe1f 	bl	80011fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80005be:	f001 fdc5 	bl	800214c <vPortEnterCritical>
 80005c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ce:	d103      	bne.n	80005d8 <xQueueGenericSend+0x13c>
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d103      	bne.n	80005ee <xQueueGenericSend+0x152>
 80005e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005ee:	f001 fddd 	bl	80021ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f856 	bl	80016ac <xTaskCheckForTimeOut>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d124      	bne.n	8000650 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000608:	f000 faf9 	bl	8000bfe <prvIsQueueFull>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d018      	beq.n	8000644 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000614:	3310      	adds	r3, #16
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 ffaa 	bl	8001574 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000622:	f000 fa84 	bl	8000b2e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000626:	f000 fdf7 	bl	8001218 <xTaskResumeAll>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	f47f af7c 	bne.w	800052a <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <xQueueGenericSend+0x1c8>)
 8000634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	e772      	b.n	800052a <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000646:	f000 fa72 	bl	8000b2e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800064a:	f000 fde5 	bl	8001218 <xTaskResumeAll>
 800064e:	e76c      	b.n	800052a <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000652:	f000 fa6c 	bl	8000b2e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000656:	f000 fddf 	bl	8001218 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800065a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800065c:	4618      	mov	r0, r3
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	e000ed04 	.word	0xe000ed04

08000668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10a      	bne.n	8000698 <xQueueReceive+0x30>
        __asm volatile
 8000682:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	623b      	str	r3, [r7, #32]
    }
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <xQueueReceive+0x3e>
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <xQueueReceive+0x42>
 80006a6:	2301      	movs	r3, #1
 80006a8:	e000      	b.n	80006ac <xQueueReceive+0x44>
 80006aa:	2300      	movs	r3, #0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10a      	bne.n	80006c6 <xQueueReceive+0x5e>
        __asm volatile
 80006b0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	61fb      	str	r3, [r7, #28]
    }
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006c6:	f001 fd41 	bl	800214c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01f      	beq.n	8000716 <xQueueReceive+0xae>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006da:	f000 fa02 	bl	8000ae2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00f      	beq.n	800070e <xQueueReceive+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	3310      	adds	r3, #16
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ff62 	bl	80015bc <xTaskRemoveFromEventList>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <xQueueReceive+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <xQueueReceive+0x18c>)
 8000700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800070e:	f001 fd4d 	bl	80021ac <vPortExitCritical>
                return pdPASS;
 8000712:	2301      	movs	r3, #1
 8000714:	e069      	b.n	80007ea <xQueueReceive+0x182>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <xQueueReceive+0xbc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800071c:	f001 fd46 	bl	80021ac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000720:	2300      	movs	r3, #0
 8000722:	e062      	b.n	80007ea <xQueueReceive+0x182>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	2b00      	cmp	r3, #0
 8000728:	d106      	bne.n	8000738 <xQueueReceive+0xd0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ffa6 	bl	8001680 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000738:	f001 fd38 	bl	80021ac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800073c:	f000 fd5e 	bl	80011fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000740:	f001 fd04 	bl	800214c <vPortEnterCritical>
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800074a:	b25b      	sxtb	r3, r3
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000750:	d103      	bne.n	800075a <xQueueReceive+0xf2>
 8000752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000760:	b25b      	sxtb	r3, r3
 8000762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000766:	d103      	bne.n	8000770 <xQueueReceive+0x108>
 8000768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000770:	f001 fd1c 	bl	80021ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 ff95 	bl	80016ac <xTaskCheckForTimeOut>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d123      	bne.n	80007d0 <xQueueReceive+0x168>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800078a:	f000 fa22 	bl	8000bd2 <prvIsQueueEmpty>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d017      	beq.n	80007c4 <xQueueReceive+0x15c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000796:	3324      	adds	r3, #36	; 0x24
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fee9 	bl	8001574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007a4:	f000 f9c3 	bl	8000b2e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80007a8:	f000 fd36 	bl	8001218 <xTaskResumeAll>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d189      	bne.n	80006c6 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <xQueueReceive+0x18c>)
 80007b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	e780      	b.n	80006c6 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80007c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007c6:	f000 f9b2 	bl	8000b2e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80007ca:	f000 fd25 	bl	8001218 <xTaskResumeAll>
 80007ce:	e77a      	b.n	80006c6 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80007d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007d2:	f000 f9ac 	bl	8000b2e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80007d6:	f000 fd1f 	bl	8001218 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007dc:	f000 f9f9 	bl	8000bd2 <prvIsQueueEmpty>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f43f af6f 	beq.w	80006c6 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80007e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3730      	adds	r7, #48	; 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000ed04 	.word	0xe000ed04

080007f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10a      	bne.n	800082a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8000814:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	61bb      	str	r3, [r7, #24]
    }
 8000826:	bf00      	nop
 8000828:	e7fe      	b.n	8000828 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8000832:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	617b      	str	r3, [r7, #20]
    }
 8000844:	bf00      	nop
 8000846:	e7fe      	b.n	8000846 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000848:	f001 fc80 	bl	800214c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000850:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000852:	6a3b      	ldr	r3, [r7, #32]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d024      	beq.n	80008a2 <xQueueSemaphoreTake+0xaa>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000868:	f001 f9c0 	bl	8001bec <pvTaskIncrementMutexHeldCount>
 800086c:	4602      	mov	r2, r0
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00f      	beq.n	800089a <xQueueSemaphoreTake+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	3310      	adds	r3, #16
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fe9c 	bl	80015bc <xTaskRemoveFromEventList>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <xQueueSemaphoreTake+0xa2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800088a:	4b54      	ldr	r3, [pc, #336]	; (80009dc <xQueueSemaphoreTake+0x1e4>)
 800088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	f3bf 8f4f 	dsb	sy
 8000896:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800089a:	f001 fc87 	bl	80021ac <vPortExitCritical>
                return pdPASS;
 800089e:	2301      	movs	r3, #1
 80008a0:	e097      	b.n	80009d2 <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d111      	bne.n	80008cc <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80008a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00a      	beq.n	80008c4 <xQueueSemaphoreTake+0xcc>
        __asm volatile
 80008ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008b2:	f383 8811 	msr	BASEPRI, r3
 80008b6:	f3bf 8f6f 	isb	sy
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	613b      	str	r3, [r7, #16]
    }
 80008c0:	bf00      	nop
 80008c2:	e7fe      	b.n	80008c2 <xQueueSemaphoreTake+0xca>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80008c4:	f001 fc72 	bl	80021ac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80008c8:	2300      	movs	r3, #0
 80008ca:	e082      	b.n	80009d2 <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fed2 	bl	8001680 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008e0:	f001 fc64 	bl	80021ac <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008e4:	f000 fc8a 	bl	80011fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008e8:	f001 fc30 	bl	800214c <vPortEnterCritical>
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d103      	bne.n	8000902 <xQueueSemaphoreTake+0x10a>
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000908:	b25b      	sxtb	r3, r3
 800090a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090e:	d103      	bne.n	8000918 <xQueueSemaphoreTake+0x120>
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000918:	f001 fc48 	bl	80021ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800091c:	463a      	mov	r2, r7
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fec1 	bl	80016ac <xTaskCheckForTimeOut>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d132      	bne.n	8000996 <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000932:	f000 f94e 	bl	8000bd2 <prvIsQueueEmpty>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d026      	beq.n	800098a <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d109      	bne.n	8000958 <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 8000944:	f001 fc02 	bl	800214c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	4618      	mov	r0, r3
 800094e:	f000 ffcf 	bl	80018f0 <xTaskPriorityInherit>
 8000952:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8000954:	f001 fc2a 	bl	80021ac <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	3324      	adds	r3, #36	; 0x24
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fe07 	bl	8001574 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000968:	f000 f8e1 	bl	8000b2e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800096c:	f000 fc54 	bl	8001218 <xTaskResumeAll>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	f47f af68 	bne.w	8000848 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <xQueueSemaphoreTake+0x1e4>)
 800097a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	e75e      	b.n	8000848 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800098a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800098c:	f000 f8cf 	bl	8000b2e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000990:	f000 fc42 	bl	8001218 <xTaskResumeAll>
 8000994:	e758      	b.n	8000848 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000998:	f000 f8c9 	bl	8000b2e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800099c:	f000 fc3c 	bl	8001218 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009a2:	f000 f916 	bl	8000bd2 <prvIsQueueEmpty>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f43f af4d 	beq.w	8000848 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00d      	beq.n	80009d0 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 80009b4:	f001 fbca 	bl	800214c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80009b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009ba:	f000 f811 	bl	80009e0 <prvGetDisinheritPriorityAfterTimeout>
 80009be:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	69f9      	ldr	r1, [r7, #28]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f882 	bl	8001ad0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80009cc:	f001 fbee 	bl	80021ac <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80009d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000ed04 	.word	0xe000ed04

080009e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f1c3 0305 	rsb	r3, r3, #5
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e001      	b.n	8000a02 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000a02:	68fb      	ldr	r3, [r7, #12]
    }
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a22:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10d      	bne.n	8000a48 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14d      	bne.n	8000ad0 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 ffcf 	bl	80019dc <xTaskPriorityDisinherit>
 8000a3e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	e043      	b.n	8000ad0 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d119      	bne.n	8000a82 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6858      	ldr	r0, [r3, #4]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	461a      	mov	r2, r3
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	f002 ff01 	bl	8003860 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	441a      	add	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d32b      	bcc.n	8000ad0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	e026      	b.n	8000ad0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68d8      	ldr	r0, [r3, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	f002 fee7 	bl	8003860 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	441a      	add	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d207      	bcs.n	8000abe <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	441a      	add	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d105      	bne.n	8000ad0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000ad8:	697b      	ldr	r3, [r7, #20]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d018      	beq.n	8000b26 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	441a      	add	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d303      	bcc.n	8000b16 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68d9      	ldr	r1, [r3, #12]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	461a      	mov	r2, r3
 8000b20:	6838      	ldr	r0, [r7, #0]
 8000b22:	f002 fe9d 	bl	8003860 <memcpy>
    }
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b36:	f001 fb09 	bl	800214c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b40:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b42:	e011      	b.n	8000b68 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d012      	beq.n	8000b72 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3324      	adds	r3, #36	; 0x24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fd33 	bl	80015bc <xTaskRemoveFromEventList>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000b5c:	f000 fe0c 	bl	8001778 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	dce9      	bgt.n	8000b44 <prvUnlockQueue+0x16>
 8000b70:	e000      	b.n	8000b74 <prvUnlockQueue+0x46>
                        break;
 8000b72:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000b7c:	f001 fb16 	bl	80021ac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b80:	f001 fae4 	bl	800214c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b8a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b8c:	e011      	b.n	8000bb2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d012      	beq.n	8000bbc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3310      	adds	r3, #16
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fd0e 	bl	80015bc <xTaskRemoveFromEventList>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ba6:	f000 fde7 	bl	8001778 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dce9      	bgt.n	8000b8e <prvUnlockQueue+0x60>
 8000bba:	e000      	b.n	8000bbe <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bbc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000bc6:	f001 faf1 	bl	80021ac <vPortExitCritical>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000bda:	f001 fab7 	bl	800214c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000be6:	2301      	movs	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e001      	b.n	8000bf0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000bf0:	f001 fadc 	bl	80021ac <vPortExitCritical>

    return xReturn;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c06:	f001 faa1 	bl	800214c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d102      	bne.n	8000c1c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	e001      	b.n	8000c20 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c20:	f001 fac4 	bl	80021ac <vPortExitCritical>

    return xReturn;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b08c      	sub	sp, #48	; 0x30
 8000c32:	af04      	add	r7, sp, #16
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fb3c 	bl	80022c0 <pvPortMalloc>
 8000c48:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00e      	beq.n	8000c6e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c50:	2054      	movs	r0, #84	; 0x54
 8000c52:	f001 fb35 	bl	80022c0 <pvPortMalloc>
 8000c56:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
 8000c64:	e005      	b.n	8000c72 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f001 fc0a 	bl	8002480 <vPortFree>
 8000c6c:	e001      	b.n	8000c72 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d013      	beq.n	8000ca0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c78:	88fa      	ldrh	r2, [r7, #6]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9303      	str	r3, [sp, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f000 f80e 	bl	8000cb0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000c94:	69f8      	ldr	r0, [r7, #28]
 8000c96:	f000 f899 	bl	8000dcc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	e002      	b.n	8000ca6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000ca6:	69bb      	ldr	r3, [r7, #24]
    }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	f023 0307 	bic.w	r3, r3, #7
 8000cd6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <prvInitialiseNewTask+0x48>
        __asm volatile
 8000ce2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	617b      	str	r3, [r7, #20]
    }
 8000cf4:	bf00      	nop
 8000cf6:	e7fe      	b.n	8000cf6 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d01f      	beq.n	8000d3e <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e012      	b.n	8000d2a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	4413      	add	r3, r2
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	4413      	add	r3, r2
 8000d12:	3334      	adds	r3, #52	; 0x34
 8000d14:	460a      	mov	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	3301      	adds	r3, #1
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d9e9      	bls.n	8000d04 <prvInitialiseNewTask+0x54>
 8000d30:	e000      	b.n	8000d34 <prvInitialiseNewTask+0x84>
            {
                break;
 8000d32:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000d3c:	e003      	b.n	8000d46 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d901      	bls.n	8000d50 <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d5a:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5e:	2200      	movs	r2, #0
 8000d60:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d64:	3304      	adds	r3, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fa21 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6e:	3318      	adds	r3, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fa1c 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	f1c3 0205 	rsb	r2, r3, #5
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	334c      	adds	r3, #76	; 0x4c
 8000d90:	2204      	movs	r2, #4
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fd36 	bl	8003806 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	3350      	adds	r3, #80	; 0x50
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fd2f 	bl	8003806 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	68f9      	ldr	r1, [r7, #12]
 8000dac:	69b8      	ldr	r0, [r7, #24]
 8000dae:	f001 f8eb 	bl	8001f88 <pxPortInitialiseStack>
 8000db2:	4602      	mov	r2, r0
 8000db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dc2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000dd4:	f001 f9ba 	bl	800214c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <prvAddNewTaskToReadyList+0xb8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a29      	ldr	r2, [pc, #164]	; (8000e84 <prvAddNewTaskToReadyList+0xb8>)
 8000de0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <prvAddNewTaskToReadyList+0xbc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000dea:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <prvAddNewTaskToReadyList+0xbc>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <prvAddNewTaskToReadyList+0xb8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d110      	bne.n	8000e1a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000df8:	f000 fce2 	bl	80017c0 <prvInitialiseTaskLists>
 8000dfc:	e00d      	b.n	8000e1a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <prvAddNewTaskToReadyList+0xc0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <prvAddNewTaskToReadyList+0xbc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d802      	bhi.n	8000e1a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <prvAddNewTaskToReadyList+0xbc>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <prvAddNewTaskToReadyList+0xc4>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <prvAddNewTaskToReadyList+0xc4>)
 8000e22:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	2201      	movs	r2, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <prvAddNewTaskToReadyList+0xc8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <prvAddNewTaskToReadyList+0xc8>)
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <prvAddNewTaskToReadyList+0xcc>)
 8000e44:	441a      	add	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	f7ff f9ba 	bl	80001c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000e52:	f001 f9ab 	bl	80021ac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <prvAddNewTaskToReadyList+0xc0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00e      	beq.n	8000e7c <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <prvAddNewTaskToReadyList+0xbc>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <prvAddNewTaskToReadyList+0xd0>)
 8000e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000017c 	.word	0x2000017c
 8000e88:	200000a4 	.word	0x200000a4
 8000e8c:	20000188 	.word	0x20000188
 8000e90:	20000198 	.word	0x20000198
 8000e94:	20000184 	.word	0x20000184
 8000e98:	200000a8 	.word	0x200000a8
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d017      	beq.n	8000ee2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <vTaskDelay+0x60>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <vTaskDelay+0x30>
        __asm volatile
 8000eba:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ebe:	f383 8811 	msr	BASEPRI, r3
 8000ec2:	f3bf 8f6f 	isb	sy
 8000ec6:	f3bf 8f4f 	dsb	sy
 8000eca:	60bb      	str	r3, [r7, #8]
    }
 8000ecc:	bf00      	nop
 8000ece:	e7fe      	b.n	8000ece <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000ed0:	f000 f994 	bl	80011fc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fff0 	bl	8001ebc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000edc:	f000 f99c 	bl	8001218 <xTaskResumeAll>
 8000ee0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d107      	bne.n	8000ef8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <vTaskDelay+0x64>)
 8000eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001a4 	.word	0x200001a4
 8000f04:	e000ed04 	.word	0xe000ed04

08000f08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000f10:	f001 f91c 	bl	800214c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <vTaskSuspend+0x18>
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <vTaskSuspend+0x120>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	e000      	b.n	8000f22 <vTaskSuspend+0x1a>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	3304      	adds	r3, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f9a7 	bl	800027c <uxListRemove>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d115      	bne.n	8000f60 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f38:	493c      	ldr	r1, [pc, #240]	; (800102c <vTaskSuspend+0x124>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10a      	bne.n	8000f60 <vTaskSuspend+0x58>
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	2201      	movs	r2, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43da      	mvns	r2, r3
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <vTaskSuspend+0x128>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	4a34      	ldr	r2, [pc, #208]	; (8001030 <vTaskSuspend+0x128>)
 8000f5e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f985 	bl	800027c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3304      	adds	r3, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	482e      	ldr	r0, [pc, #184]	; (8001034 <vTaskSuspend+0x12c>)
 8000f7a:	f7ff f924 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e010      	b.n	8000fa6 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	3350      	adds	r3, #80	; 0x50
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	4413      	add	r3, r2
 8000f9a:	3350      	adds	r3, #80	; 0x50
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	ddeb      	ble.n	8000f84 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000fac:	f001 f8fe 	bl	80021ac <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <vTaskSuspend+0x130>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000fb8:	f001 f8c8 	bl	800214c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000fbc:	f000 fc7e 	bl	80018bc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000fc0:	f001 f8f4 	bl	80021ac <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <vTaskSuspend+0x120>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d127      	bne.n	800101e <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <vTaskSuspend+0x130>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d017      	beq.n	8001006 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <vTaskSuspend+0x134>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00a      	beq.n	8000ff4 <vTaskSuspend+0xec>
        __asm volatile
 8000fde:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	60fb      	str	r3, [r7, #12]
    }
 8000ff0:	bf00      	nop
 8000ff2:	e7fe      	b.n	8000ff2 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <vTaskSuspend+0x138>)
 8000ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	f3bf 8f4f 	dsb	sy
 8001000:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001004:	e00b      	b.n	800101e <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <vTaskSuspend+0x12c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <vTaskSuspend+0x13c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d103      	bne.n	800101a <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <vTaskSuspend+0x120>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    }
 8001018:	e001      	b.n	800101e <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 800101a:	f000 fa51 	bl	80014c0 <vTaskSwitchContext>
    }
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000a4 	.word	0x200000a4
 800102c:	200000a8 	.word	0x200000a8
 8001030:	20000184 	.word	0x20000184
 8001034:	20000168 	.word	0x20000168
 8001038:	20000188 	.word	0x20000188
 800103c:	200001a4 	.word	0x200001a4
 8001040:	e000ed04 	.word	0xe000ed04
 8001044:	2000017c 	.word	0x2000017c

08001048 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10a      	bne.n	8001074 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800105e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001062:	f383 8811 	msr	BASEPRI, r3
 8001066:	f3bf 8f6f 	isb	sy
 800106a:	f3bf 8f4f 	dsb	sy
 800106e:	60fb      	str	r3, [r7, #12]
    }
 8001070:	bf00      	nop
 8001072:	e7fe      	b.n	8001072 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <prvTaskIsTaskSuspended+0x58>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10a      	bne.n	8001094 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <prvTaskIsTaskSuspended+0x5c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d005      	beq.n	8001094 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001094:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000168 	.word	0x20000168
 80010a4:	2000013c 	.word	0x2000013c

080010a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10a      	bne.n	80010d0 <vTaskResume+0x28>
        __asm volatile
 80010ba:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80010be:	f383 8811 	msr	BASEPRI, r3
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	60bb      	str	r3, [r7, #8]
    }
 80010cc:	bf00      	nop
 80010ce:	e7fe      	b.n	80010ce <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <vTaskResume+0xac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d037      	beq.n	800114a <vTaskResume+0xa2>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d034      	beq.n	800114a <vTaskResume+0xa2>
        {
            taskENTER_CRITICAL();
 80010e0:	f001 f834 	bl	800214c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff ffaf 	bl	8001048 <prvTaskIsTaskSuspended>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d02a      	beq.n	8001146 <vTaskResume+0x9e>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3304      	adds	r3, #4
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f8c1 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	2201      	movs	r2, #1
 8001100:	409a      	lsls	r2, r3
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <vTaskResume+0xb0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <vTaskResume+0xb0>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <vTaskResume+0xb4>)
 800111a:	441a      	add	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3304      	adds	r3, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f7ff f84f 	bl	80001c6 <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <vTaskResume+0xac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	429a      	cmp	r2, r3
 8001134:	d307      	bcc.n	8001146 <vTaskResume+0x9e>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <vTaskResume+0xb8>)
 8001138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8001146:	f001 f831 	bl	80021ac <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000a4 	.word	0x200000a4
 8001158:	20000184 	.word	0x20000184
 800115c:	200000a8 	.word	0x200000a8
 8001160:	e000ed04 	.word	0xe000ed04

08001164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <vTaskStartScheduler+0x7c>)
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	2300      	movs	r3, #0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	491b      	ldr	r1, [pc, #108]	; (80011e4 <vTaskStartScheduler+0x80>)
 8001178:	481b      	ldr	r0, [pc, #108]	; (80011e8 <vTaskStartScheduler+0x84>)
 800117a:	f7ff fd58 	bl	8000c2e <xTaskCreate>
 800117e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d116      	bne.n	80011b4 <vTaskStartScheduler+0x50>
        __asm volatile
 8001186:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
 8001196:	60bb      	str	r3, [r7, #8]
    }
 8001198:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <vTaskStartScheduler+0x88>)
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <vTaskStartScheduler+0x8c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <vTaskStartScheduler+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80011ae:	f000 ff6d 	bl	800208c <xPortStartScheduler>
 80011b2:	e00e      	b.n	80011d2 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ba:	d10a      	bne.n	80011d2 <vTaskStartScheduler+0x6e>
        __asm volatile
 80011bc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80011c0:	f383 8811 	msr	BASEPRI, r3
 80011c4:	f3bf 8f6f 	isb	sy
 80011c8:	f3bf 8f4f 	dsb	sy
 80011cc:	607b      	str	r3, [r7, #4]
    }
 80011ce:	bf00      	nop
 80011d0:	e7fe      	b.n	80011d0 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <vTaskStartScheduler+0x94>)
 80011d4:	681b      	ldr	r3, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200001a0 	.word	0x200001a0
 80011e4:	08003894 	.word	0x08003894
 80011e8:	08001791 	.word	0x08001791
 80011ec:	2000019c 	.word	0x2000019c
 80011f0:	20000188 	.word	0x20000188
 80011f4:	20000180 	.word	0x20000180
 80011f8:	20000000 	.word	0x20000000

080011fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <vTaskSuspendAll+0x18>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a03      	ldr	r2, [pc, #12]	; (8001214 <vTaskSuspendAll+0x18>)
 8001208:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	200001a4 	.word	0x200001a4

08001218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <xTaskResumeAll+0x114>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10a      	bne.n	8001244 <xTaskResumeAll+0x2c>
        __asm volatile
 800122e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001232:	f383 8811 	msr	BASEPRI, r3
 8001236:	f3bf 8f6f 	isb	sy
 800123a:	f3bf 8f4f 	dsb	sy
 800123e:	603b      	str	r3, [r7, #0]
    }
 8001240:	bf00      	nop
 8001242:	e7fe      	b.n	8001242 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001244:	f000 ff82 	bl	800214c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001248:	4b38      	ldr	r3, [pc, #224]	; (800132c <xTaskResumeAll+0x114>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3b01      	subs	r3, #1
 800124e:	4a37      	ldr	r2, [pc, #220]	; (800132c <xTaskResumeAll+0x114>)
 8001250:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <xTaskResumeAll+0x114>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d161      	bne.n	800131e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <xTaskResumeAll+0x118>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d05d      	beq.n	800131e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001262:	e02e      	b.n	80012c2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001264:	4b33      	ldr	r3, [pc, #204]	; (8001334 <xTaskResumeAll+0x11c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3318      	adds	r3, #24
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f803 	bl	800027c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe fffe 	bl	800027c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2201      	movs	r2, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <xTaskResumeAll+0x120>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4313      	orrs	r3, r2
 800128e:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <xTaskResumeAll+0x120>)
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4a27      	ldr	r2, [pc, #156]	; (800133c <xTaskResumeAll+0x124>)
 80012a0:	441a      	add	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3304      	adds	r3, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	f7fe ff8c 	bl	80001c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <xTaskResumeAll+0x128>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <xTaskResumeAll+0x12c>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <xTaskResumeAll+0x11c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1cc      	bne.n	8001264 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80012d0:	f000 faf4 	bl	80018bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <xTaskResumeAll+0x130>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d010      	beq.n	8001302 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80012e0:	f000 f836 	bl	8001350 <xTaskIncrementTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <xTaskResumeAll+0x12c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f1      	bne.n	80012e0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <xTaskResumeAll+0x130>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <xTaskResumeAll+0x12c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800130a:	2301      	movs	r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <xTaskResumeAll+0x134>)
 8001310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f3bf 8f4f 	dsb	sy
 800131a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800131e:	f000 ff45 	bl	80021ac <vPortExitCritical>

    return xAlreadyYielded;
 8001322:	68bb      	ldr	r3, [r7, #8]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200001a4 	.word	0x200001a4
 8001330:	2000017c 	.word	0x2000017c
 8001334:	2000013c 	.word	0x2000013c
 8001338:	20000184 	.word	0x20000184
 800133c:	200000a8 	.word	0x200000a8
 8001340:	200000a4 	.word	0x200000a4
 8001344:	20000190 	.word	0x20000190
 8001348:	2000018c 	.word	0x2000018c
 800134c:	e000ed04 	.word	0xe000ed04

08001350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800135a:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <xTaskIncrementTick+0x144>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 808e 	bne.w	8001480 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <xTaskIncrementTick+0x148>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800136c:	4a4a      	ldr	r2, [pc, #296]	; (8001498 <xTaskIncrementTick+0x148>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d120      	bne.n	80013ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <xTaskIncrementTick+0x14c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <xTaskIncrementTick+0x48>
        __asm volatile
 8001382:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001386:	f383 8811 	msr	BASEPRI, r3
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	f3bf 8f4f 	dsb	sy
 8001392:	603b      	str	r3, [r7, #0]
    }
 8001394:	bf00      	nop
 8001396:	e7fe      	b.n	8001396 <xTaskIncrementTick+0x46>
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <xTaskIncrementTick+0x14c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <xTaskIncrementTick+0x150>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a3e      	ldr	r2, [pc, #248]	; (800149c <xTaskIncrementTick+0x14c>)
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <xTaskIncrementTick+0x150>)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <xTaskIncrementTick+0x154>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a3c      	ldr	r2, [pc, #240]	; (80014a4 <xTaskIncrementTick+0x154>)
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	f000 fa81 	bl	80018bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80013ba:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <xTaskIncrementTick+0x158>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d348      	bcc.n	8001456 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013c4:	4b35      	ldr	r3, [pc, #212]	; (800149c <xTaskIncrementTick+0x14c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d104      	bne.n	80013d8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <xTaskIncrementTick+0x158>)
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	601a      	str	r2, [r3, #0]
                    break;
 80013d6:	e03e      	b.n	8001456 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <xTaskIncrementTick+0x14c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d203      	bcs.n	80013f8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80013f0:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <xTaskIncrementTick+0x158>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80013f6:	e02e      	b.n	8001456 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3304      	adds	r3, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe ff3d 	bl	800027c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3318      	adds	r3, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe ff34 	bl	800027c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	2201      	movs	r2, #1
 800141a:	409a      	lsls	r2, r3
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <xTaskIncrementTick+0x15c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4313      	orrs	r3, r2
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <xTaskIncrementTick+0x15c>)
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <xTaskIncrementTick+0x160>)
 8001434:	441a      	add	r2, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3304      	adds	r3, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7fe fec2 	bl	80001c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <xTaskIncrementTick+0x164>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	429a      	cmp	r2, r3
 800144e:	d3b9      	bcc.n	80013c4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001454:	e7b6      	b.n	80013c4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <xTaskIncrementTick+0x164>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145c:	4914      	ldr	r1, [pc, #80]	; (80014b0 <xTaskIncrementTick+0x160>)
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d901      	bls.n	8001472 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800146e:	2301      	movs	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <xTaskIncrementTick+0x168>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	e004      	b.n	800148a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <xTaskIncrementTick+0x16c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <xTaskIncrementTick+0x16c>)
 8001488:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800148a:	697b      	ldr	r3, [r7, #20]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001a4 	.word	0x200001a4
 8001498:	20000180 	.word	0x20000180
 800149c:	20000134 	.word	0x20000134
 80014a0:	20000138 	.word	0x20000138
 80014a4:	20000194 	.word	0x20000194
 80014a8:	2000019c 	.word	0x2000019c
 80014ac:	20000184 	.word	0x20000184
 80014b0:	200000a8 	.word	0x200000a8
 80014b4:	200000a4 	.word	0x200000a4
 80014b8:	20000190 	.word	0x20000190
 80014bc:	2000018c 	.word	0x2000018c

080014c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <vTaskSwitchContext+0xa0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <vTaskSwitchContext+0xa4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80014d4:	e03f      	b.n	8001556 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <vTaskSwitchContext+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <vTaskSwitchContext+0xa8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80014ea:	7afb      	ldrb	r3, [r7, #11]
 80014ec:	f1c3 031f 	rsb	r3, r3, #31
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	491e      	ldr	r1, [pc, #120]	; (800156c <vTaskSwitchContext+0xac>)
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10a      	bne.n	800151c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001506:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800150a:	f383 8811 	msr	BASEPRI, r3
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	607b      	str	r3, [r7, #4]
    }
 8001518:	bf00      	nop
 800151a:	e7fe      	b.n	800151a <vTaskSwitchContext+0x5a>
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4a11      	ldr	r2, [pc, #68]	; (800156c <vTaskSwitchContext+0xac>)
 8001528:	4413      	add	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3308      	adds	r3, #8
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <vTaskSwitchContext+0x8c>
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <vTaskSwitchContext+0xb0>)
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200001a4 	.word	0x200001a4
 8001564:	20000190 	.word	0x20000190
 8001568:	20000184 	.word	0x20000184
 800156c:	200000a8 	.word	0x200000a8
 8001570:	200000a4 	.word	0x200000a4

08001574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10a      	bne.n	800159a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001584:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	60fb      	str	r3, [r7, #12]
    }
 8001596:	bf00      	nop
 8001598:	e7fe      	b.n	8001598 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <vTaskPlaceOnEventList+0x44>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3318      	adds	r3, #24
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fe32 	bl	800020c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015a8:	2101      	movs	r1, #1
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f000 fc86 	bl	8001ebc <prvAddCurrentTaskToDelayedList>
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200000a4 	.word	0x200000a4

080015bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10a      	bne.n	80015e8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80015d2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	60fb      	str	r3, [r7, #12]
    }
 80015e4:	bf00      	nop
 80015e6:	e7fe      	b.n	80015e6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	3318      	adds	r3, #24
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe45 	bl	800027c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <xTaskRemoveFromEventList+0xac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d11c      	bne.n	8001634 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	3304      	adds	r3, #4
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fe3c 	bl	800027c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2201      	movs	r2, #1
 800160a:	409a      	lsls	r2, r3
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <xTaskRemoveFromEventList+0xb0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4313      	orrs	r3, r2
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <xTaskRemoveFromEventList+0xb0>)
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <xTaskRemoveFromEventList+0xb4>)
 8001624:	441a      	add	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3304      	adds	r3, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7fe fdca 	bl	80001c6 <vListInsertEnd>
 8001632:	e005      	b.n	8001640 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	3318      	adds	r3, #24
 8001638:	4619      	mov	r1, r3
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <xTaskRemoveFromEventList+0xb8>)
 800163c:	f7fe fdc3 	bl	80001c6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <xTaskRemoveFromEventList+0xbc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	429a      	cmp	r2, r3
 800164c:	d905      	bls.n	800165a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800164e:	2301      	movs	r3, #1
 8001650:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <xTaskRemoveFromEventList+0xc0>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e001      	b.n	800165e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800165e:	697b      	ldr	r3, [r7, #20]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001a4 	.word	0x200001a4
 800166c:	20000184 	.word	0x20000184
 8001670:	200000a8 	.word	0x200000a8
 8001674:	2000013c 	.word	0x2000013c
 8001678:	200000a4 	.word	0x200000a4
 800167c:	20000190 	.word	0x20000190

08001680 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <vTaskInternalSetTimeOutState+0x24>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <vTaskInternalSetTimeOutState+0x28>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000194 	.word	0x20000194
 80016a8:	20000180 	.word	0x20000180

080016ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10a      	bne.n	80016d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80016bc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	613b      	str	r3, [r7, #16]
    }
 80016ce:	bf00      	nop
 80016d0:	e7fe      	b.n	80016d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10a      	bne.n	80016ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80016d8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016dc:	f383 8811 	msr	BASEPRI, r3
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	f3bf 8f4f 	dsb	sy
 80016e8:	60fb      	str	r3, [r7, #12]
    }
 80016ea:	bf00      	nop
 80016ec:	e7fe      	b.n	80016ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80016ee:	f000 fd2d 	bl	800214c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <xTaskCheckForTimeOut+0xc4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170a:	d102      	bne.n	8001712 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	e026      	b.n	8001760 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <xTaskCheckForTimeOut+0xc8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d00a      	beq.n	8001734 <xTaskCheckForTimeOut+0x88>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	429a      	cmp	r2, r3
 8001726:	d305      	bcc.n	8001734 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001728:	2301      	movs	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e015      	b.n	8001760 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20b      	bcs.n	8001756 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	1ad2      	subs	r2, r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff98 	bl	8001680 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	e004      	b.n	8001760 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800175c:	2301      	movs	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001760:	f000 fd24 	bl	80021ac <vPortExitCritical>

    return xReturn;
 8001764:	69fb      	ldr	r3, [r7, #28]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000180 	.word	0x20000180
 8001774:	20000194 	.word	0x20000194

08001778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <vTaskMissedYield+0x14>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000190 	.word	0x20000190

08001790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001798:	f000 f852 	bl	8001840 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <prvIdleTask+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d9f9      	bls.n	8001798 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <prvIdleTask+0x2c>)
 80017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f3bf 8f4f 	dsb	sy
 80017b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80017b4:	e7f0      	b.n	8001798 <prvIdleTask+0x8>
 80017b6:	bf00      	nop
 80017b8:	200000a8 	.word	0x200000a8
 80017bc:	e000ed04 	.word	0xe000ed04

080017c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	e00c      	b.n	80017e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <prvInitialiseTaskLists+0x60>)
 80017d8:	4413      	add	r3, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fcc8 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d9ef      	bls.n	80017cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <prvInitialiseTaskLists+0x64>)
 80017ee:	f7fe fcbf 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80017f2:	480d      	ldr	r0, [pc, #52]	; (8001828 <prvInitialiseTaskLists+0x68>)
 80017f4:	f7fe fcbc 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <prvInitialiseTaskLists+0x6c>)
 80017fa:	f7fe fcb9 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <prvInitialiseTaskLists+0x70>)
 8001800:	f7fe fcb6 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <prvInitialiseTaskLists+0x74>)
 8001806:	f7fe fcb3 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <prvInitialiseTaskLists+0x78>)
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <prvInitialiseTaskLists+0x64>)
 800180e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <prvInitialiseTaskLists+0x7c>)
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <prvInitialiseTaskLists+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000a8 	.word	0x200000a8
 8001824:	2000010c 	.word	0x2000010c
 8001828:	20000120 	.word	0x20000120
 800182c:	2000013c 	.word	0x2000013c
 8001830:	20000150 	.word	0x20000150
 8001834:	20000168 	.word	0x20000168
 8001838:	20000134 	.word	0x20000134
 800183c:	20000138 	.word	0x20000138

08001840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001846:	e019      	b.n	800187c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001848:	f000 fc80 	bl	800214c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <prvCheckTasksWaitingTermination+0x50>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3304      	adds	r3, #4
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd0f 	bl	800027c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <prvCheckTasksWaitingTermination+0x54>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <prvCheckTasksWaitingTermination+0x54>)
 8001866:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <prvCheckTasksWaitingTermination+0x58>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <prvCheckTasksWaitingTermination+0x58>)
 8001870:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001872:	f000 fc9b 	bl	80021ac <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f810 	bl	800189c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <prvCheckTasksWaitingTermination+0x58>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e1      	bne.n	8001848 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000150 	.word	0x20000150
 8001894:	2000017c 	.word	0x2000017c
 8001898:	20000164 	.word	0x20000164

0800189c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fde9 	bl	8002480 <vPortFree>
                vPortFree( pxTCB );
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fde6 	bl	8002480 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <prvResetNextTaskUnblockTime+0x2c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d104      	bne.n	80018d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <prvResetNextTaskUnblockTime+0x30>)
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80018d2:	e005      	b.n	80018e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <prvResetNextTaskUnblockTime+0x2c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <prvResetNextTaskUnblockTime+0x30>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000134 	.word	0x20000134
 80018ec:	2000019c 	.word	0x2000019c

080018f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d05e      	beq.n	80019c4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <xTaskPriorityInherit+0xe0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	429a      	cmp	r2, r3
 8001912:	d24e      	bcs.n	80019b2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db06      	blt.n	800192a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <xTaskPriorityInherit+0xe0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f1c3 0205 	rsb	r2, r3, #5
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	6959      	ldr	r1, [r3, #20]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <xTaskPriorityInherit+0xe4>)
 800193c:	4413      	add	r3, r2
 800193e:	4299      	cmp	r1, r3
 8001940:	d12f      	bne.n	80019a2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3304      	adds	r3, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fc98 	bl	800027c <uxListRemove>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10a      	bne.n	8001968 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	2201      	movs	r2, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43da      	mvns	r2, r3
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <xTaskPriorityInherit+0xe8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4013      	ands	r3, r2
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <xTaskPriorityInherit+0xe8>)
 8001966:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <xTaskPriorityInherit+0xe0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <xTaskPriorityInherit+0xe8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <xTaskPriorityInherit+0xe8>)
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <xTaskPriorityInherit+0xe4>)
 8001992:	441a      	add	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f7fe fc13 	bl	80001c6 <vListInsertEnd>
 80019a0:	e004      	b.n	80019ac <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <xTaskPriorityInherit+0xe0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e008      	b.n	80019c4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <xTaskPriorityInherit+0xe0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	429a      	cmp	r2, r3
 80019be:	d201      	bcs.n	80019c4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80019c4:	68fb      	ldr	r3, [r7, #12]
    }
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000a4 	.word	0x200000a4
 80019d4:	200000a8 	.word	0x200000a8
 80019d8:	20000184 	.word	0x20000184

080019dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <xTaskPriorityDisinherit+0xe8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d00a      	beq.n	8001a12 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80019fc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	60fb      	str	r3, [r7, #12]
    }
 8001a0e:	bf00      	nop
 8001a10:	e7fe      	b.n	8001a10 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001a1a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	60bb      	str	r3, [r7, #8]
    }
 8001a2c:	bf00      	nop
 8001a2e:	e7fe      	b.n	8001a2e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	1e5a      	subs	r2, r3, #1
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d039      	beq.n	8001aba <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d135      	bne.n	8001aba <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	3304      	adds	r3, #4
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fc12 	bl	800027c <uxListRemove>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	2201      	movs	r2, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <xTaskPriorityDisinherit+0xec>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <xTaskPriorityDisinherit+0xec>)
 8001a72:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f1c3 0205 	rsb	r2, r3, #5
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <xTaskPriorityDisinherit+0xec>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <xTaskPriorityDisinherit+0xec>)
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <xTaskPriorityDisinherit+0xf0>)
 8001aa8:	441a      	add	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	3304      	adds	r3, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	f7fe fb88 	bl	80001c6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001aba:	697b      	ldr	r3, [r7, #20]
    }
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200000a4 	.word	0x200000a4
 8001ac8:	20000184 	.word	0x20000184
 8001acc:	200000a8 	.word	0x200000a8

08001ad0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d077      	beq.n	8001bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10a      	bne.n	8001b06 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8001af0:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001af4:	f383 8811 	msr	BASEPRI, r3
 8001af8:	f3bf 8f6f 	isb	sy
 8001afc:	f3bf 8f4f 	dsb	sy
 8001b00:	60fb      	str	r3, [r7, #12]
    }
 8001b02:	bf00      	nop
 8001b04:	e7fe      	b.n	8001b04 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d902      	bls.n	8001b16 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	e002      	b.n	8001b1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d058      	beq.n	8001bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d153      	bne.n	8001bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d10a      	bne.n	8001b50 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8001b3a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	60bb      	str	r3, [r7, #8]
    }
 8001b4c:	bf00      	nop
 8001b4e:	e7fe      	b.n	8001b4e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db04      	blt.n	8001b6e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0205 	rsb	r2, r3, #5
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6959      	ldr	r1, [r3, #20]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	4299      	cmp	r1, r3
 8001b82:	d129      	bne.n	8001bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fb77 	bl	800027c <uxListRemove>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2201      	movs	r2, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8001ba8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8001bca:	441a      	add	r2, r3
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f7fe faf7 	bl	80001c6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200000a4 	.word	0x200000a4
 8001be4:	200000a8 	.word	0x200000a8
 8001be8:	20000184 	.word	0x20000184

08001bec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bfe:	3201      	adds	r2, #1
 8001c00:	649a      	str	r2, [r3, #72]	; 0x48
        }

        return pxCurrentTCB;
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
    }
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	200000a4 	.word	0x200000a4

08001c14 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8001c26:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	613b      	str	r3, [r7, #16]
    }
 8001c38:	bf00      	nop
 8001c3a:	e7fe      	b.n	8001c3a <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8001c3c:	f000 fa86 	bl	800214c <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <ulTaskGenericNotifyTake+0xd0>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3312      	adds	r3, #18
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d115      	bne.n	8001c7e <ulTaskGenericNotifyTake+0x6a>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <ulTaskGenericNotifyTake+0xd0>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	3350      	adds	r3, #80	; 0x50
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <ulTaskGenericNotifyTake+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c66:	2101      	movs	r1, #1
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f927 	bl	8001ebc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <ulTaskGenericNotifyTake+0xd4>)
 8001c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f3bf 8f4f 	dsb	sy
 8001c7a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001c7e:	f000 fa95 	bl	80021ac <vPortExitCritical>

        taskENTER_CRITICAL();
 8001c82:	f000 fa63 	bl	800214c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <ulTaskGenericNotifyTake+0xd0>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3312      	adds	r3, #18
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d014      	beq.n	8001cc6 <ulTaskGenericNotifyTake+0xb2>
            {
                if( xClearCountOnExit != pdFALSE )
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <ulTaskGenericNotifyTake+0xa0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <ulTaskGenericNotifyTake+0xd0>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3312      	adds	r3, #18
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	e008      	b.n	8001cc6 <ulTaskGenericNotifyTake+0xb2>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <ulTaskGenericNotifyTake+0xd0>)
 8001cb6:	6819      	ldr	r1, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3312      	adds	r3, #18
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <ulTaskGenericNotifyTake+0xd0>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	3350      	adds	r3, #80	; 0x50
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001cd4:	f000 fa6a 	bl	80021ac <vPortExitCritical>

        return ulReturn;
 8001cd8:	697b      	ldr	r3, [r7, #20]
    }
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200000a4 	.word	0x200000a4
 8001ce8:	e000ed04 	.word	0xe000ed04

08001cec <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <xTaskGenericNotify+0x2e>
        __asm volatile
 8001d04:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	f3bf 8f4f 	dsb	sy
 8001d14:	623b      	str	r3, [r7, #32]
    }
 8001d16:	bf00      	nop
 8001d18:	e7fe      	b.n	8001d18 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10a      	bne.n	8001d36 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001d20:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001d24:	f383 8811 	msr	BASEPRI, r3
 8001d28:	f3bf 8f6f 	isb	sy
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	61fb      	str	r3, [r7, #28]
    }
 8001d32:	bf00      	nop
 8001d34:	e7fe      	b.n	8001d34 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001d3a:	f000 fa07 	bl	800214c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <xTaskGenericNotify+0x68>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3312      	adds	r3, #18
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d52:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3350      	adds	r3, #80	; 0x50
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4413      	add	r3, r2
 8001d68:	3350      	adds	r3, #80	; 0x50
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d841      	bhi.n	8001df8 <xTaskGenericNotify+0x10c>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <xTaskGenericNotify+0x90>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001daf 	.word	0x08001daf
 8001d88:	08001dcb 	.word	0x08001dcb
 8001d8c:	08001ddb 	.word	0x08001ddb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3312      	adds	r3, #18
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3312      	adds	r3, #18
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	605a      	str	r2, [r3, #4]
                    break;
 8001dac:	e036      	b.n	8001e1c <xTaskGenericNotify+0x130>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3312      	adds	r3, #18
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3312      	adds	r3, #18
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	605a      	str	r2, [r3, #4]
                    break;
 8001dc8:	e028      	b.n	8001e1c <xTaskGenericNotify+0x130>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	3312      	adds	r3, #18
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]
                    break;
 8001dd8:	e020      	b.n	8001e1c <xTaskGenericNotify+0x130>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d007      	beq.n	8001df2 <xTaskGenericNotify+0x106>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3312      	adds	r3, #18
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001df0:	e014      	b.n	8001e1c <xTaskGenericNotify+0x130>
                        xReturn = pdFAIL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001df6:	e011      	b.n	8001e1c <xTaskGenericNotify+0x130>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <xTaskGenericNotify+0x1bc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00c      	beq.n	8001e1a <xTaskGenericNotify+0x12e>
        __asm volatile
 8001e00:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	61bb      	str	r3, [r7, #24]
    }
 8001e12:	bf00      	nop
 8001e14:	e7fe      	b.n	8001e14 <xTaskGenericNotify+0x128>
                    break;
 8001e16:	bf00      	nop
 8001e18:	e000      	b.n	8001e1c <xTaskGenericNotify+0x130>

                    break;
 8001e1a:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d139      	bne.n	8001e98 <xTaskGenericNotify+0x1ac>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	3304      	adds	r3, #4
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fa27 	bl	800027c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	2201      	movs	r2, #1
 8001e34:	409a      	lsls	r2, r3
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <xTaskGenericNotify+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <xTaskGenericNotify+0x1c0>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <xTaskGenericNotify+0x1c4>)
 8001e4e:	441a      	add	r2, r3
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7fe f9b5 	bl	80001c6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <xTaskGenericNotify+0x18e>
        __asm volatile
 8001e64:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	617b      	str	r3, [r7, #20]
    }
 8001e76:	bf00      	nop
 8001e78:	e7fe      	b.n	8001e78 <xTaskGenericNotify+0x18c>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <xTaskGenericNotify+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d907      	bls.n	8001e98 <xTaskGenericNotify+0x1ac>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <xTaskGenericNotify+0x1cc>)
 8001e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e98:	f000 f988 	bl	80021ac <vPortExitCritical>

        return xReturn;
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000180 	.word	0x20000180
 8001eac:	20000184 	.word	0x20000184
 8001eb0:	200000a8 	.word	0x200000a8
 8001eb4:	200000a4 	.word	0x200000a4
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe f9d2 	bl	800027c <uxListRemove>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001ef4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d10a      	bne.n	8001f14 <prvAddCurrentTaskToDelayedList+0x58>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481a      	ldr	r0, [pc, #104]	; (8001f78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001f0e:	f7fe f95a 	bl	80001c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001f12:	e026      	b.n	8001f62 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d209      	bcs.n	8001f40 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3304      	adds	r3, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7fe f967 	bl	800020c <vListInsert>
}
 8001f3e:	e010      	b.n	8001f62 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f7fe f95d 	bl	800020c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d202      	bcs.n	8001f62 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8001f5c:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000180 	.word	0x20000180
 8001f70:	200000a4 	.word	0x200000a4
 8001f74:	20000184 	.word	0x20000184
 8001f78:	20000168 	.word	0x20000168
 8001f7c:	20000138 	.word	0x20000138
 8001f80:	20000134 	.word	0x20000134
 8001f84:	2000019c 	.word	0x2000019c

08001f88 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3b04      	subs	r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fa0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3b04      	subs	r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f023 0201 	bic.w	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3b04      	subs	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001fb8:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <pxPortInitialiseStack+0x54>)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3b14      	subs	r3, #20
 8001fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b20      	subs	r3, #32
 8001fce:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	08001fe1 	.word	0x08001fe1

08001fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <prvTaskExitError+0x54>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d00a      	beq.n	800200a <prvTaskExitError+0x2a>
        __asm volatile
 8001ff4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	60fb      	str	r3, [r7, #12]
    }
 8002006:	bf00      	nop
 8002008:	e7fe      	b.n	8002008 <prvTaskExitError+0x28>
        __asm volatile
 800200a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	f3bf 8f4f 	dsb	sy
 800201a:	60bb      	str	r3, [r7, #8]
    }
 800201c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800201e:	bf00      	nop
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0fc      	beq.n	8002020 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000004 	.word	0x20000004
	...

08002040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <pxCurrentTCBConst2>)
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	6808      	ldr	r0, [r1, #0]
 8002046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800204a:	f380 8809 	msr	PSP, r0
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8811 	msr	BASEPRI, r0
 800205a:	f04e 0e0d 	orr.w	lr, lr, #13
 800205e:	4770      	bx	lr

08002060 <pxCurrentTCBConst2>:
 8002060:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop

08002068 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <prvPortStartFirstTask+0x1c>)
 800206a:	6800      	ldr	r0, [r0, #0]
 800206c:	6800      	ldr	r0, [r0, #0]
 800206e:	f380 8808 	msr	MSP, r0
 8002072:	b662      	cpsie	i
 8002074:	b661      	cpsie	f
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	df00      	svc	0
 8002080:	bf00      	nop
 8002082:	0000      	.short	0x0000
 8002084:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop

0800208c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <xPortStartScheduler+0xac>)
 8002094:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	22ff      	movs	r2, #255	; 0xff
 80020a2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <xPortStartScheduler+0xb0>)
 80020b8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <xPortStartScheduler+0xb4>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020c0:	e009      	b.n	80020d6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <xPortStartScheduler+0xb4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <xPortStartScheduler+0xb4>)
 80020ca:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d0ef      	beq.n	80020c2 <xPortStartScheduler+0x36>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <xPortStartScheduler+0xb4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <xPortStartScheduler+0xb4>)
 80020ea:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <xPortStartScheduler+0xb4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <xPortStartScheduler+0xb4>)
 80020f6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <xPortStartScheduler+0xb8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <xPortStartScheduler+0xb8>)
 8002106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <xPortStartScheduler+0xb8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <xPortStartScheduler+0xb8>)
 8002112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002116:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002118:	f000 f8b8 	bl	800228c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <xPortStartScheduler+0xbc>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002122:	f7ff ffa1 	bl	8002068 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002126:	f7ff f9cb 	bl	80014c0 <vTaskSwitchContext>
    prvTaskExitError();
 800212a:	f7ff ff59 	bl	8001fe0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	e000e400 	.word	0xe000e400
 800213c:	200001a8 	.word	0x200001a8
 8002140:	200001ac 	.word	0x200001ac
 8002144:	e000ed20 	.word	0xe000ed20
 8002148:	20000004 	.word	0x20000004

0800214c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
        __asm volatile
 8002152:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	607b      	str	r3, [r7, #4]
    }
 8002164:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <vPortEnterCritical+0x58>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <vPortEnterCritical+0x58>)
 800216e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <vPortEnterCritical+0x58>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10f      	bne.n	8002198 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <vPortEnterCritical+0x5c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <vPortEnterCritical+0x4c>
        __asm volatile
 8002182:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	603b      	str	r3, [r7, #0]
    }
 8002194:	bf00      	nop
 8002196:	e7fe      	b.n	8002196 <vPortEnterCritical+0x4a>
    }
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000004 	.word	0x20000004
 80021a8:	e000ed04 	.word	0xe000ed04

080021ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <vPortExitCritical+0x4c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <vPortExitCritical+0x24>
        __asm volatile
 80021ba:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	607b      	str	r3, [r7, #4]
    }
 80021cc:	bf00      	nop
 80021ce:	e7fe      	b.n	80021ce <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <vPortExitCritical+0x4c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <vPortExitCritical+0x4c>)
 80021d8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <vPortExitCritical+0x4c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <vPortExitCritical+0x42>
 80021e2:	2300      	movs	r3, #0
 80021e4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80021ec:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000004 	.word	0x20000004
 80021fc:	00000000 	.word	0x00000000

08002200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002200:	f3ef 8009 	mrs	r0, PSP
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <pxCurrentTCBConst>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002210:	6010      	str	r0, [r2, #0]
 8002212:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002216:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800221a:	f380 8811 	msr	BASEPRI, r0
 800221e:	f7ff f94f 	bl	80014c0 <vTaskSwitchContext>
 8002222:	f04f 0000 	mov.w	r0, #0
 8002226:	f380 8811 	msr	BASEPRI, r0
 800222a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	6808      	ldr	r0, [r1, #0]
 8002232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002236:	f380 8809 	msr	PSP, r0
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	4770      	bx	lr

08002240 <pxCurrentTCBConst>:
 8002240:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop

08002248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
        __asm volatile
 800224e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	607b      	str	r3, [r7, #4]
    }
 8002260:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002262:	f7ff f875 	bl	8001350 <xTaskIncrementTick>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <SysTick_Handler+0x40>)
 800226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f383 8811 	msr	BASEPRI, r3
    }
 800227e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <vPortSetupTimerInterrupt+0x28>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <vPortSetupTimerInterrupt+0x2c>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <vPortSetupTimerInterrupt+0x30>)
 800229e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022a2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <vPortSetupTimerInterrupt+0x28>)
 80022a6:	2207      	movs	r2, #7
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010
 80022b8:	e000e018 	.word	0xe000e018
 80022bc:	e000e014 	.word	0xe000e014

080022c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80022cc:	f7fe ff96 	bl	80011fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80022d0:	4b65      	ldr	r3, [pc, #404]	; (8002468 <pvPortMalloc+0x1a8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80022d8:	f000 f934 	bl	8002544 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80022dc:	4b63      	ldr	r3, [pc, #396]	; (800246c <pvPortMalloc+0x1ac>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 80a7 	bne.w	8002438 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02d      	beq.n	800234c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80022f0:	2208      	movs	r2, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d227      	bcs.n	800234c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80022fc:	2208      	movs	r2, #8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	2b00      	cmp	r3, #0
 800230c:	d021      	beq.n	8002352 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f023 0307 	bic.w	r3, r3, #7
 8002314:	3308      	adds	r3, #8
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d214      	bcs.n	8002346 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f023 0307 	bic.w	r3, r3, #7
 8002322:	3308      	adds	r3, #8
 8002324:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <pvPortMalloc+0x92>
        __asm volatile
 8002330:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	617b      	str	r3, [r7, #20]
    }
 8002342:	bf00      	nop
 8002344:	e7fe      	b.n	8002344 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800234a:	e002      	b.n	8002352 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	e000      	b.n	8002354 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002352:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06e      	beq.n	8002438 <pvPortMalloc+0x178>
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <pvPortMalloc+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d869      	bhi.n	8002438 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <pvPortMalloc+0x1b4>)
 8002366:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <pvPortMalloc+0x1b4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800236e:	e004      	b.n	800237a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d903      	bls.n	800238c <pvPortMalloc+0xcc>
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f1      	bne.n	8002370 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <pvPortMalloc+0x1a8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	429a      	cmp	r2, r3
 8002394:	d050      	beq.n	8002438 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2208      	movs	r2, #8
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	2308      	movs	r3, #8
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d91f      	bls.n	80023f8 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <pvPortMalloc+0x120>
        __asm volatile
 80023ca:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	613b      	str	r3, [r7, #16]
    }
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1ad2      	subs	r2, r2, r3
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023f2:	69b8      	ldr	r0, [r7, #24]
 80023f4:	f000 f908 	bl	8002608 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <pvPortMalloc+0x1b0>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <pvPortMalloc+0x1b0>)
 8002404:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <pvPortMalloc+0x1b0>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <pvPortMalloc+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d203      	bcs.n	800241a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <pvPortMalloc+0x1b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <pvPortMalloc+0x1b8>)
 8002418:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <pvPortMalloc+0x1ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	431a      	orrs	r2, r3
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <pvPortMalloc+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <pvPortMalloc+0x1bc>)
 8002436:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002438:	f7fe feee 	bl	8001218 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <pvPortMalloc+0x19c>
        __asm volatile
 8002446:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	60fb      	str	r3, [r7, #12]
    }
 8002458:	bf00      	nop
 800245a:	e7fe      	b.n	800245a <pvPortMalloc+0x19a>
    return pvReturn;
 800245c:	69fb      	ldr	r3, [r7, #28]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3728      	adds	r7, #40	; 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200045b8 	.word	0x200045b8
 800246c:	200045cc 	.word	0x200045cc
 8002470:	200045bc 	.word	0x200045bc
 8002474:	200045b0 	.word	0x200045b0
 8002478:	200045c0 	.word	0x200045c0
 800247c:	200045c4 	.word	0x200045c4

08002480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04d      	beq.n	800252e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002492:	2308      	movs	r3, #8
 8002494:	425b      	negs	r3, r3
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4413      	add	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <vPortFree+0xb8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <vPortFree+0x44>
        __asm volatile
 80024ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	60fb      	str	r3, [r7, #12]
    }
 80024c0:	bf00      	nop
 80024c2:	e7fe      	b.n	80024c2 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <vPortFree+0x62>
        __asm volatile
 80024cc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	60bb      	str	r3, [r7, #8]
    }
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <vPortFree+0xb8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01e      	beq.n	800252e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11a      	bne.n	800252e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <vPortFree+0xb8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002508:	f7fe fe78 	bl	80011fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <vPortFree+0xbc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4413      	add	r3, r2
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <vPortFree+0xbc>)
 8002518:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800251a:	6938      	ldr	r0, [r7, #16]
 800251c:	f000 f874 	bl	8002608 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <vPortFree+0xc0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a06      	ldr	r2, [pc, #24]	; (8002540 <vPortFree+0xc0>)
 8002528:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800252a:	f7fe fe75 	bl	8001218 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200045cc 	.word	0x200045cc
 800253c:	200045bc 	.word	0x200045bc
 8002540:	200045c8 	.word	0x200045c8

08002544 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800254a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800254e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <prvHeapInit+0xac>)
 8002552:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3307      	adds	r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	4a1f      	ldr	r2, [pc, #124]	; (80025f0 <prvHeapInit+0xac>)
 8002574:	4413      	add	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <prvHeapInit+0xb0>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <prvHeapInit+0xb0>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002590:	2208      	movs	r2, #8
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0307 	bic.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <prvHeapInit+0xb4>)
 80025a4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <prvHeapInit+0xb4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <prvHeapInit+0xb4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	1ad2      	subs	r2, r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <prvHeapInit+0xb4>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <prvHeapInit+0xb8>)
 80025d2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <prvHeapInit+0xbc>)
 80025da:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <prvHeapInit+0xc0>)
 80025de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025e2:	601a      	str	r2, [r3, #0]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200001b0 	.word	0x200001b0
 80025f4:	200045b0 	.word	0x200045b0
 80025f8:	200045b8 	.word	0x200045b8
 80025fc:	200045c0 	.word	0x200045c0
 8002600:	200045bc 	.word	0x200045bc
 8002604:	200045cc 	.word	0x200045cc

08002608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <prvInsertBlockIntoFreeList+0xa8>)
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e002      	b.n	800261c <prvInsertBlockIntoFreeList+0x14>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d8f7      	bhi.n	8002616 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4413      	add	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d108      	bne.n	800264a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	441a      	add	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	441a      	add	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d118      	bne.n	8002690 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <prvInsertBlockIntoFreeList+0xac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d00d      	beq.n	8002686 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e008      	b.n	8002698 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <prvInsertBlockIntoFreeList+0xac>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e003      	b.n	8002698 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d002      	beq.n	80026a6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	200045b0 	.word	0x200045b0
 80026b4:	200045b8 	.word	0x200045b8

080026b8 <Dio_EnumSetterPin>:

/* if you want to set some thing in buffer call Dio_EnuSetterPin then Dio_VidRunnable will
 execute the configured data
 */
Error_State Dio_EnumSetterPin(Dio_ChannelType Copy_ChannelId,
		Dio_LevelType Copy_Level) {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	460a      	mov	r2, r1
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71bb      	strb	r3, [r7, #6]
	if (Copy_ChannelId >= Dio_A0 && Copy_ChannelId <= Dio_C14) {
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	2b2e      	cmp	r3, #46	; 0x2e
 80026cc:	d810      	bhi.n	80026f0 <Dio_EnumSetterPin+0x38>
		ArryOfPins[Copy_ChannelId] = Copy_Level;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	490a      	ldr	r1, [pc, #40]	; (80026fc <Dio_EnumSetterPin+0x44>)
 80026d2:	79ba      	ldrb	r2, [r7, #6]
 80026d4:	54ca      	strb	r2, [r1, r3]
		ArryOfActivition[Copy_ChannelId][0] = STD_ON;
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <Dio_EnumSetterPin+0x48>)
 80026da:	2101      	movs	r1, #1
 80026dc:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		ArryOfActivition[Copy_ChannelId][1] = DIO_OUT;
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <Dio_EnumSetterPin+0x48>)
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	2202      	movs	r2, #2
 80026ea:	705a      	strb	r2, [r3, #1]
		return E_OK;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e000      	b.n	80026f2 <Dio_EnumSetterPin+0x3a>
	}
	return E_INVALID_PARAMETER;
 80026f0:	2302      	movs	r3, #2
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	200045d0 	.word	0x200045d0
 8002700:	20004600 	.word	0x20004600

08002704 <Dio_VidRunnable>:
	}
	return E_INVALID_PARAMETER;
}

/* to execute the desired configuration within runtime "refresh pins" */
void Dio_VidRunnable(void) {
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
	/* GPIOA */
	uint8 i = Dio_A0;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]
	while (i <= Dio_A12) {
 800270e:	e022      	b.n	8002756 <Dio_VidRunnable+0x52>
		if (ArryOfActivition[i][0] != STD_OFF) {
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4a50      	ldr	r2, [pc, #320]	; (8002854 <Dio_VidRunnable+0x150>)
 8002714:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d019      	beq.n	8002750 <Dio_VidRunnable+0x4c>
			if (ArryOfActivition[i][1] == DIO_OUT) {
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <Dio_VidRunnable+0x150>)
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	785b      	ldrb	r3, [r3, #1]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d108      	bne.n	800273c <Dio_VidRunnable+0x38>
				Dio_WriteChannel(GPIOA, i, ArryOfPins[i]);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4a4a      	ldr	r2, [pc, #296]	; (8002858 <Dio_VidRunnable+0x154>)
 800272e:	5cd2      	ldrb	r2, [r2, r3]
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	4619      	mov	r1, r3
 8002734:	4849      	ldr	r0, [pc, #292]	; (800285c <Dio_VidRunnable+0x158>)
 8002736:	f000 f8ae 	bl	8002896 <Dio_WriteChannel>
 800273a:	e009      	b.n	8002750 <Dio_VidRunnable+0x4c>
			} else {
				ArryOfPins[i] = Dio_ReadChannel(GPIOA,i);
 800273c:	79fc      	ldrb	r4, [r7, #7]
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4619      	mov	r1, r3
 8002742:	4846      	ldr	r0, [pc, #280]	; (800285c <Dio_VidRunnable+0x158>)
 8002744:	f000 f890 	bl	8002868 <Dio_ReadChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <Dio_VidRunnable+0x154>)
 800274e:	551a      	strb	r2, [r3, r4]
			}
		}
		i++;
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	3301      	adds	r3, #1
 8002754:	71fb      	strb	r3, [r7, #7]
	while (i <= Dio_A12) {
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b0c      	cmp	r3, #12
 800275a:	d9d9      	bls.n	8002710 <Dio_VidRunnable+0xc>
	}

	if (ArryOfActivition[Dio_A15][0] != STD_OFF) {
 800275c:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <Dio_VidRunnable+0x150>)
 800275e:	7f9b      	ldrb	r3, [r3, #30]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <Dio_VidRunnable+0x88>
		if (ArryOfActivition[Dio_A15][1] == DIO_OUT) {
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <Dio_VidRunnable+0x150>)
 8002766:	7fdb      	ldrb	r3, [r3, #31]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d107      	bne.n	800277c <Dio_VidRunnable+0x78>
			Dio_WriteChannel(GPIOA, Dio_A15, ArryOfPins[Dio_A15]);
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <Dio_VidRunnable+0x154>)
 800276e:	7bdb      	ldrb	r3, [r3, #15]
 8002770:	461a      	mov	r2, r3
 8002772:	210f      	movs	r1, #15
 8002774:	4839      	ldr	r0, [pc, #228]	; (800285c <Dio_VidRunnable+0x158>)
 8002776:	f000 f88e 	bl	8002896 <Dio_WriteChannel>
 800277a:	e007      	b.n	800278c <Dio_VidRunnable+0x88>
		} else {
			ArryOfPins[Dio_A15] = Dio_ReadChannel(GPIOA, Dio_A15);
 800277c:	210f      	movs	r1, #15
 800277e:	4837      	ldr	r0, [pc, #220]	; (800285c <Dio_VidRunnable+0x158>)
 8002780:	f000 f872 	bl	8002868 <Dio_ReadChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b33      	ldr	r3, [pc, #204]	; (8002858 <Dio_VidRunnable+0x154>)
 800278a:	73da      	strb	r2, [r3, #15]
		}
	}

	/* GPIOB */
	i = Dio_B0;
 800278c:	2310      	movs	r3, #16
 800278e:	71fb      	strb	r3, [r7, #7]
	while (i <= Dio_B15) {
 8002790:	e028      	b.n	80027e4 <Dio_VidRunnable+0xe0>
		if (ArryOfActivition[i][0] != STD_OFF) {
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <Dio_VidRunnable+0x150>)
 8002796:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01f      	beq.n	80027de <Dio_VidRunnable+0xda>
			if (ArryOfActivition[i][1] == DIO_OUT) {
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <Dio_VidRunnable+0x150>)
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d10b      	bne.n	80027c4 <Dio_VidRunnable+0xc0>
				Dio_WriteChannel(GPIOB, (i & ~(0x10)) , ArryOfPins[i]);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f023 0310 	bic.w	r3, r3, #16
 80027b2:	b2d9      	uxtb	r1, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4a28      	ldr	r2, [pc, #160]	; (8002858 <Dio_VidRunnable+0x154>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4828      	ldr	r0, [pc, #160]	; (8002860 <Dio_VidRunnable+0x15c>)
 80027be:	f000 f86a 	bl	8002896 <Dio_WriteChannel>
 80027c2:	e00c      	b.n	80027de <Dio_VidRunnable+0xda>
			} else {
				ArryOfPins[i] = Dio_ReadChannel(GPIOB, (i & ~(0x10)));
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f023 0310 	bic.w	r3, r3, #16
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	79fc      	ldrb	r4, [r7, #7]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4823      	ldr	r0, [pc, #140]	; (8002860 <Dio_VidRunnable+0x15c>)
 80027d2:	f000 f849 	bl	8002868 <Dio_ReadChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <Dio_VidRunnable+0x154>)
 80027dc:	551a      	strb	r2, [r3, r4]
			}
		}
		i++;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	3301      	adds	r3, #1
 80027e2:	71fb      	strb	r3, [r7, #7]
	while (i <= Dio_B15) {
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2b1f      	cmp	r3, #31
 80027e8:	d9d3      	bls.n	8002792 <Dio_VidRunnable+0x8e>
	}

	i = Dio_C13;
 80027ea:	232d      	movs	r3, #45	; 0x2d
 80027ec:	71fb      	strb	r3, [r7, #7]
	while (i <= Dio_C14) {
 80027ee:	e028      	b.n	8002842 <Dio_VidRunnable+0x13e>
		if (ArryOfActivition[i][0] != STD_OFF) {
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <Dio_VidRunnable+0x150>)
 80027f4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01f      	beq.n	800283c <Dio_VidRunnable+0x138>
			if (ArryOfActivition[i][1] == DIO_OUT) {
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4a15      	ldr	r2, [pc, #84]	; (8002854 <Dio_VidRunnable+0x150>)
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d10b      	bne.n	8002822 <Dio_VidRunnable+0x11e>
				Dio_WriteChannel(GPIOC, (i & ~(0x20)), ArryOfPins[i]);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f023 0320 	bic.w	r3, r3, #32
 8002810:	b2d9      	uxtb	r1, r3
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4a10      	ldr	r2, [pc, #64]	; (8002858 <Dio_VidRunnable+0x154>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	461a      	mov	r2, r3
 800281a:	4812      	ldr	r0, [pc, #72]	; (8002864 <Dio_VidRunnable+0x160>)
 800281c:	f000 f83b 	bl	8002896 <Dio_WriteChannel>
 8002820:	e00c      	b.n	800283c <Dio_VidRunnable+0x138>
			} else {
				ArryOfPins[i] = Dio_ReadChannel(GPIOC, (i & ~(0x20)));
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f023 0320 	bic.w	r3, r3, #32
 8002828:	b2db      	uxtb	r3, r3
 800282a:	79fc      	ldrb	r4, [r7, #7]
 800282c:	4619      	mov	r1, r3
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <Dio_VidRunnable+0x160>)
 8002830:	f000 f81a 	bl	8002868 <Dio_ReadChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <Dio_VidRunnable+0x154>)
 800283a:	551a      	strb	r2, [r3, r4]
			}
		}
		i++;
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	3301      	adds	r3, #1
 8002840:	71fb      	strb	r3, [r7, #7]
	while (i <= Dio_C14) {
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b2e      	cmp	r3, #46	; 0x2e
 8002846:	d9d3      	bls.n	80027f0 <Dio_VidRunnable+0xec>
	}
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	20004600 	.word	0x20004600
 8002858:	200045d0 	.word	0x200045d0
 800285c:	40010800 	.word	0x40010800
 8002860:	40010c00 	.word	0x40010c00
 8002864:	40011000 	.word	0x40011000

08002868 <Dio_ReadChannel>:
/*
 Input  : Dio_ChannelType
 output : Dio_LevelType
 description :
 */
Dio_LevelType Dio_ReadChannel(volatile GPIOX_REG *GPIOX, Dio_ChannelType ChannelId) {
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
	uint32 Local_IDR = GPIOX->IDR.Reg;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	60fb      	str	r3, [r7, #12]
	Local_IDR = ((Local_IDR >> (ChannelId)) & STD_HIGH);
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
	return Local_IDR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	b2db      	uxtb	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <Dio_WriteChannel>:
 Input  : Dio_ChannelType
 output : Dio_LevelType
 description :
 */
void Dio_WriteChannel(volatile GPIOX_REG *GPIOX, Dio_ChannelType ChannelId,
		Dio_LevelType Level) {
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	70fb      	strb	r3, [r7, #3]
 80028a2:	4613      	mov	r3, r2
 80028a4:	70bb      	strb	r3, [r7, #2]
	uint32 Local_Pin = (1 << ChannelId);
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	60fb      	str	r3, [r7, #12]

	if (Level == STD_HIGH) {
 80028b0:	78bb      	ldrb	r3, [r7, #2]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d103      	bne.n	80028be <Dio_WriteChannel+0x28>
		GPIOX->BSRR.Reg = Local_Pin;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	611a      	str	r2, [r3, #16]
		GPIOX->BRR.Reg = Local_Pin;
	}
	else {
		Det_ReportError(MODULE_ID, Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
	}
}
 80028bc:	e00b      	b.n	80028d6 <Dio_WriteChannel+0x40>
	} else if (Level == STD_LOW) {
 80028be:	78bb      	ldrb	r3, [r7, #2]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <Dio_WriteChannel+0x36>
		GPIOX->BRR.Reg = Local_Pin;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	615a      	str	r2, [r3, #20]
}
 80028ca:	e004      	b.n	80028d6 <Dio_WriteChannel+0x40>
		Det_ReportError(MODULE_ID, Dio_WriteChannel_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 80028cc:	220a      	movs	r2, #10
 80028ce:	2101      	movs	r1, #1
 80028d0:	2078      	movs	r0, #120	; 0x78
 80028d2:	f000 f804 	bl	80028de <Det_ReportError>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <Det_ReportError>:
*   SW Version       : 1.0.0
============================================================================*/

#include <Det.h>

Std_ReturnType Det_ReportError(uint16 ModuleId,uint8 ApiId , uint8 ErrorId){
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	80fb      	strh	r3, [r7, #6]
 80028e8:	460b      	mov	r3, r1
 80028ea:	717b      	strb	r3, [r7, #5]
 80028ec:	4613      	mov	r3, r2
 80028ee:	713b      	strb	r3, [r7, #4]
	for(;;);
 80028f0:	e7fe      	b.n	80028f0 <Det_ReportError+0x12>
	...

080028f4 <LCD_VidSendCommend>:

#ifndef EIGHT_BIT
extern uint8 ArrOfPins[4];
#endif

void LCD_VidSendCommend(uint8 Copy_U8Commend){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]

#ifdef EIGHT_BIT

/**************to disable RS *** *********************/
	Dio_EnumSetterPin(RS, LOW);
 80028fe:	2100      	movs	r1, #0
 8002900:	2010      	movs	r0, #16
 8002902:	f7ff fed9 	bl	80026b8 <Dio_EnumSetterPin>
/******to out the value of commend on data port *****/
	uint8 ArrOfPins_Level[8];

	for (uint8 i=0;i<=7;i++){
 8002906:	2300      	movs	r3, #0
 8002908:	77fb      	strb	r3, [r7, #31]
 800290a:	e00f      	b.n	800292c <LCD_VidSendCommend+0x38>
		ArrOfPins_Level[i] = GET_BIT(Copy_U8Commend,i);
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	fa42 f303 	asr.w	r3, r2, r3
 8002914:	b2da      	uxtb	r2, r3
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	f002 0201 	and.w	r2, r2, #1
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	3320      	adds	r3, #32
 8002920:	443b      	add	r3, r7
 8002922:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8 i=0;i<=7;i++){
 8002926:	7ffb      	ldrb	r3, [r7, #31]
 8002928:	3301      	adds	r3, #1
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	7ffb      	ldrb	r3, [r7, #31]
 800292e:	2b07      	cmp	r3, #7
 8002930:	d9ec      	bls.n	800290c <LCD_VidSendCommend+0x18>
	}

	for (uint8 i=0;i<=7;i++){
 8002932:	2300      	movs	r3, #0
 8002934:	77bb      	strb	r3, [r7, #30]
 8002936:	e00e      	b.n	8002956 <LCD_VidSendCommend+0x62>
		Dio_EnumSetterPin ( ArrOfPins[i] , ArrOfPins_Level[i] );
 8002938:	7fbb      	ldrb	r3, [r7, #30]
 800293a:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <LCD_VidSendCommend+0xb4>)
 800293c:	5cd2      	ldrb	r2, [r2, r3]
 800293e:	7fbb      	ldrb	r3, [r7, #30]
 8002940:	3320      	adds	r3, #32
 8002942:	443b      	add	r3, r7
 8002944:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f7ff feb4 	bl	80026b8 <Dio_EnumSetterPin>
	for (uint8 i=0;i<=7;i++){
 8002950:	7fbb      	ldrb	r3, [r7, #30]
 8002952:	3301      	adds	r3, #1
 8002954:	77bb      	strb	r3, [r7, #30]
 8002956:	7fbb      	ldrb	r3, [r7, #30]
 8002958:	2b07      	cmp	r3, #7
 800295a:	d9ed      	bls.n	8002938 <LCD_VidSendCommend+0x44>
	}
/*************to make pulse for enable **************/
	Dio_EnumSetterPin(E, HIGH);
 800295c:	2101      	movs	r1, #1
 800295e:	2011      	movs	r0, #17
 8002960:	f7ff feaa 	bl	80026b8 <Dio_EnumSetterPin>
	Dio_VidRunnable();
 8002964:	f7ff fece 	bl	8002704 <Dio_VidRunnable>
	for (uint32 i = 0 ; i < 2000 ; i++);
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e002      	b.n	8002974 <LCD_VidSendCommend+0x80>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	3301      	adds	r3, #1
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800297a:	d3f8      	bcc.n	800296e <LCD_VidSendCommend+0x7a>
	Dio_EnumSetterPin(E,LOW);
 800297c:	2100      	movs	r1, #0
 800297e:	2011      	movs	r0, #17
 8002980:	f7ff fe9a 	bl	80026b8 <Dio_EnumSetterPin>
	Dio_VidRunnable();
 8002984:	f7ff febe 	bl	8002704 <Dio_VidRunnable>
	for (uint32 i = 0 ; i < 4000 ; i++);
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e002      	b.n	8002994 <LCD_VidSendCommend+0xa0>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800299a:	d3f8      	bcc.n	800298e <LCD_VidSendCommend+0x9a>
	for (uint32 i = 0 ; i < 8000 ; i++);
	Dio_WriteChannel(E,LOW);
	for (uint32 i = 0 ; i < 16000 ; i++);

#endif
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000008 	.word	0x20000008

080029ac <LCD_VidInit>:

void LCD_VidInit (void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0

#ifdef EIGHT_BIT
	/***/
	Port_EnumSetterPin(D0,PORT_PIN_OUT|G_PUSH_PULL);
 80029b2:	2102      	movs	r1, #2
 80029b4:	2000      	movs	r0, #0
 80029b6:	f000 fa3b 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D1,PORT_PIN_OUT|G_PUSH_PULL);
 80029ba:	2102      	movs	r1, #2
 80029bc:	2001      	movs	r0, #1
 80029be:	f000 fa37 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D2,PORT_PIN_OUT|G_PUSH_PULL);
 80029c2:	2102      	movs	r1, #2
 80029c4:	2002      	movs	r0, #2
 80029c6:	f000 fa33 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D3,PORT_PIN_OUT|G_PUSH_PULL);
 80029ca:	2102      	movs	r1, #2
 80029cc:	2003      	movs	r0, #3
 80029ce:	f000 fa2f 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D4,PORT_PIN_OUT|G_PUSH_PULL);
 80029d2:	2102      	movs	r1, #2
 80029d4:	2004      	movs	r0, #4
 80029d6:	f000 fa2b 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D5,PORT_PIN_OUT|G_PUSH_PULL);
 80029da:	2102      	movs	r1, #2
 80029dc:	2005      	movs	r0, #5
 80029de:	f000 fa27 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D6,PORT_PIN_OUT|G_PUSH_PULL);
 80029e2:	2102      	movs	r1, #2
 80029e4:	2006      	movs	r0, #6
 80029e6:	f000 fa23 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(D7,PORT_PIN_OUT|G_PUSH_PULL);
 80029ea:	2102      	movs	r1, #2
 80029ec:	2007      	movs	r0, #7
 80029ee:	f000 fa1f 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(RS,PORT_PIN_OUT|G_PUSH_PULL);
 80029f2:	2102      	movs	r1, #2
 80029f4:	2010      	movs	r0, #16
 80029f6:	f000 fa1b 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(E,PORT_PIN_OUT|G_PUSH_PULL);
 80029fa:	2102      	movs	r1, #2
 80029fc:	2011      	movs	r0, #17
 80029fe:	f000 fa17 	bl	8002e30 <Port_EnumSetterPin>
	Port_VidRunnable();
 8002a02:	f000 fa35 	bl	8002e70 <Port_VidRunnable>

	/********************************/
	for (uint16 i = 0 ; i < 320 ; i++);
 8002a06:	2300      	movs	r3, #0
 8002a08:	81fb      	strh	r3, [r7, #14]
 8002a0a:	e002      	b.n	8002a12 <LCD_VidInit+0x66>
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	81fb      	strh	r3, [r7, #14]
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a18:	d3f8      	bcc.n	8002a0c <LCD_VidInit+0x60>
	//send function set commend
	LCD_VidSendCommend (FUNC_SET);
 8002a1a:	203c      	movs	r0, #60	; 0x3c
 8002a1c:	f7ff ff6a 	bl	80028f4 <LCD_VidSendCommend>
	// Delay for more than 39 us
	for (uint16 i = 0 ; i < 320 ; i++);
 8002a20:	2300      	movs	r3, #0
 8002a22:	81bb      	strh	r3, [r7, #12]
 8002a24:	e002      	b.n	8002a2c <LCD_VidInit+0x80>
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	81bb      	strh	r3, [r7, #12]
 8002a2c:	89bb      	ldrh	r3, [r7, #12]
 8002a2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a32:	d3f8      	bcc.n	8002a26 <LCD_VidInit+0x7a>
	// Send Display_ON & Cursor_OFF Command
	LCD_VidSendCommend(DISPLAY_ON_CURSOR_OFF);
 8002a34:	200c      	movs	r0, #12
 8002a36:	f7ff ff5d 	bl	80028f4 <LCD_VidSendCommend>
	// Delay for more than 39 us
	for (uint16 i = 0 ; i < 320 ; i++);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	817b      	strh	r3, [r7, #10]
 8002a3e:	e002      	b.n	8002a46 <LCD_VidInit+0x9a>
 8002a40:	897b      	ldrh	r3, [r7, #10]
 8002a42:	3301      	adds	r3, #1
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a4c:	d3f8      	bcc.n	8002a40 <LCD_VidInit+0x94>
	// Send Entry Mode Set Command
	LCD_VidSendCommend(ENTERY_MODE_RIGHT);
 8002a4e:	2006      	movs	r0, #6
 8002a50:	f7ff ff50 	bl	80028f4 <LCD_VidSendCommend>
	// Delay for more than 39 us
	for (uint16 i = 0 ; i < 320 ; i++);
 8002a54:	2300      	movs	r3, #0
 8002a56:	813b      	strh	r3, [r7, #8]
 8002a58:	e002      	b.n	8002a60 <LCD_VidInit+0xb4>
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	813b      	strh	r3, [r7, #8]
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a66:	d3f8      	bcc.n	8002a5a <LCD_VidInit+0xae>
	// Send Clear Display Command
	LCD_VidSendCommend(DISPLAY_CLEAR);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7ff ff43 	bl	80028f4 <LCD_VidSendCommend>
	// Delay for more than 1.53 ms
	for (uint32 i = 0 ; i < 16000 ; i++);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	e002      	b.n	8002a7a <LCD_VidInit+0xce>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002a80:	d3f8      	bcc.n	8002a74 <LCD_VidInit+0xc8>
		// Send Clear Display Command
		LCD_VidSendCommend(DISPLAY_CLEAR);
		// Delay for more than 1.53 ms
		for (uint32 i = 0 ; i < 16000 ; i++);
	#endif
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <LCD_VidSendChar>:

void LCD_VidSendChar(uint8 Copy_U8Char){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]

#ifdef EIGHT_BIT
	uint8 ArrOfPins_Level[8];
	/******* to define RS / RW ***********/
	Dio_EnumSetterPin(RS,HIGH);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2010      	movs	r0, #16
 8002a9a:	f7ff fe0d 	bl	80026b8 <Dio_EnumSetterPin>
	/*to define value of character on port*/
	for (uint8 i=0;i<=7;i++){
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e00f      	b.n	8002ac4 <LCD_VidSendChar+0x38>
		ArrOfPins_Level[i] = GET_BIT(Copy_U8Char,i);
 8002aa4:	79fa      	ldrb	r2, [r7, #7]
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	fa42 f303 	asr.w	r3, r2, r3
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	f002 0201 	and.w	r2, r2, #1
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	3320      	adds	r3, #32
 8002ab8:	443b      	add	r3, r7
 8002aba:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8 i=0;i<=7;i++){
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
 8002ac6:	2b07      	cmp	r3, #7
 8002ac8:	d9ec      	bls.n	8002aa4 <LCD_VidSendChar+0x18>
	}

	for (uint8 i=0;i<=7;i++){
 8002aca:	2300      	movs	r3, #0
 8002acc:	77bb      	strb	r3, [r7, #30]
 8002ace:	e00e      	b.n	8002aee <LCD_VidSendChar+0x62>
		Dio_EnumSetterPin ( ArrOfPins[i] , ArrOfPins_Level[i] );
 8002ad0:	7fbb      	ldrb	r3, [r7, #30]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <LCD_VidSendChar+0xb4>)
 8002ad4:	5cd2      	ldrb	r2, [r2, r3]
 8002ad6:	7fbb      	ldrb	r3, [r7, #30]
 8002ad8:	3320      	adds	r3, #32
 8002ada:	443b      	add	r3, r7
 8002adc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f7ff fde8 	bl	80026b8 <Dio_EnumSetterPin>
	for (uint8 i=0;i<=7;i++){
 8002ae8:	7fbb      	ldrb	r3, [r7, #30]
 8002aea:	3301      	adds	r3, #1
 8002aec:	77bb      	strb	r3, [r7, #30]
 8002aee:	7fbb      	ldrb	r3, [r7, #30]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	d9ed      	bls.n	8002ad0 <LCD_VidSendChar+0x44>
	}
	/*********to make enable pulse*********/
	Dio_EnumSetterPin(E,HIGH);
 8002af4:	2101      	movs	r1, #1
 8002af6:	2011      	movs	r0, #17
 8002af8:	f7ff fdde 	bl	80026b8 <Dio_EnumSetterPin>
	Dio_VidRunnable();
 8002afc:	f7ff fe02 	bl	8002704 <Dio_VidRunnable>
	for (uint32 i = 0 ; i < 2000 ; i++);
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e002      	b.n	8002b0c <LCD_VidSendChar+0x80>
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b12:	d3f8      	bcc.n	8002b06 <LCD_VidSendChar+0x7a>
	Dio_EnumSetterPin(E,LOW);
 8002b14:	2100      	movs	r1, #0
 8002b16:	2011      	movs	r0, #17
 8002b18:	f7ff fdce 	bl	80026b8 <Dio_EnumSetterPin>
	Dio_VidRunnable();
 8002b1c:	f7ff fdf2 	bl	8002704 <Dio_VidRunnable>
	for (uint32 i = 0 ; i < 4000 ; i++);
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e002      	b.n	8002b2c <LCD_VidSendChar+0xa0>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002b32:	d3f8      	bcc.n	8002b26 <LCD_VidSendChar+0x9a>
	for (uint32 i = 0 ; i < 8000 ; i++);
	Dio_WriteChannel(E,LOW);
	for (uint32 i = 0 ; i < 16000 ; i++);

#endif
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000008 	.word	0x20000008

08002b44 <Mcu_Init>:
SemaphoreHandle_t MCU_SemPerpherialsAPB2 = NULL ;
SemaphoreHandle_t MCU_SemPerpherialsAHB  = NULL ;
#endif


void   Mcu_Init () {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
	/* check on coming pointer */
	if (NULL_PTR == ConfigPtr){
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <Mcu_Init+0x158>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <Mcu_Init+0x18>
		Det_ReportError(MODULE_ID, Mcu_Init_ID, MCU_E_PARAM_POINTER);
 8002b52:	2210      	movs	r2, #16
 8002b54:	2101      	movs	r1, #1
 8002b56:	2065      	movs	r0, #101	; 0x65
 8002b58:	f7ff fec1 	bl	80028de <Det_ReportError>

/* To protect shared resources by semphore
 * It's created taken
 **/
#if MCU_DESIGN == MCU_FREERTOS
	MCU_SemConfig_Clock    = xSemaphoreCreateBinary();
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fd fc1d 	bl	80003a0 <xQueueGenericCreate>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a4d      	ldr	r2, [pc, #308]	; (8002ca0 <Mcu_Init+0x15c>)
 8002b6a:	6013      	str	r3, [r2, #0]
	MCU_SemPerpherialsAPB1 = xSemaphoreCreateBinary();
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7fd fc15 	bl	80003a0 <xQueueGenericCreate>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <Mcu_Init+0x160>)
 8002b7a:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(MCU_SemPerpherialsAPB1);
 8002b7c:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <Mcu_Init+0x160>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	f7fd fc89 	bl	800049c <xQueueGenericSend>
	MCU_SemPerpherialsAPB2 = xSemaphoreCreateBinary();
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7fd fc06 	bl	80003a0 <xQueueGenericCreate>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a44      	ldr	r2, [pc, #272]	; (8002ca8 <Mcu_Init+0x164>)
 8002b98:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(MCU_SemPerpherialsAPB2);
 8002b9a:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <Mcu_Init+0x164>)
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f7fd fc7a 	bl	800049c <xQueueGenericSend>
	MCU_SemPerpherialsAHB  = xSemaphoreCreateBinary();
 8002ba8:	2203      	movs	r2, #3
 8002baa:	2100      	movs	r1, #0
 8002bac:	2001      	movs	r0, #1
 8002bae:	f7fd fbf7 	bl	80003a0 <xQueueGenericCreate>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a3d      	ldr	r2, [pc, #244]	; (8002cac <Mcu_Init+0x168>)
 8002bb6:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(MCU_SemPerpherialsAHB);
 8002bb8:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <Mcu_Init+0x168>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f7fd fc6b 	bl	800049c <xQueueGenericSend>
#endif

	/* to select HSE[16] */
	uint32 Local_RCC_Value = ConfigPtr->CLOCK_SYS | ( ConfigPtr->HSITRIM << 3 ) ;
 8002bc6:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <Mcu_Init+0x158>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <Mcu_Init+0x158>)
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	7d52      	ldrb	r2, [r2, #21]
 8002bd2:	00d2      	lsls	r2, r2, #3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
	RCC->CR.Reg      = Local_RCC_Value ;
 8002bd8:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <Mcu_Init+0x16c>)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6013      	str	r3, [r2, #0]

	/* to check that the clock is stabled  :
	 PLLRDY    or   HSERDY   or   HSIRDY
	 */
	uint32 LOCAL_Clock_Flag = ( ConfigPtr->CLOCK_SYS << 1 ) ;  /*  to check on one in the bit of flag  */
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <Mcu_Init+0x158>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	607b      	str	r3, [r7, #4]

#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreGive(MCU_SemConfig_Clock);
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <Mcu_Init+0x15c>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f7fd fc53 	bl	800049c <xQueueGenericSend>
#endif

	uint16 LOCAL_Time_limit = TIMEOUT_ROOF ;
 8002bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bfa:	81fb      	strh	r3, [r7, #14]

	while ( (LOCAL_Clock_Flag & RCC->CR.Reg) && (0 == LOCAL_Time_limit))
 8002bfc:	e002      	b.n	8002c04 <Mcu_Init+0xc0>
	{
		LOCAL_Time_limit--;
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	81fb      	strh	r3, [r7, #14]
	while ( (LOCAL_Clock_Flag & RCC->CR.Reg) && (0 == LOCAL_Time_limit))
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <Mcu_Init+0x16c>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <Mcu_Init+0xd2>
 8002c10:	89fb      	ldrh	r3, [r7, #14]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f3      	beq.n	8002bfe <Mcu_Init+0xba>
	}

	if (0 == LOCAL_Time_limit){
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <Mcu_Init+0xe2>
		Det_ReportError(MODULE_ID, Mcu_Init_ID, MCU_E_TIMEOUT);
 8002c1c:	2212      	movs	r2, #18
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2065      	movs	r0, #101	; 0x65
 8002c22:	f7ff fe5c 	bl	80028de <Det_ReportError>
	}

	/* to turn off VCC in PIN out that used in HSE to get clock */
#if   HSE == HSE_CRSTYAL
	RCC->CR.B.HSEBYP = 0 ;
 8002c26:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <Mcu_Init+0x16c>)
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	f36f 4392 	bfc	r3, #18, #1
 8002c2e:	6013      	str	r3, [r2, #0]
#elif HSE == HSE_RC
	RCC->CR.B.HSEBYP = 1 ;
#endif

#if CSS_CFG == CSS_OFF
	RCC->CR.B.CSSON = 0 ;
 8002c30:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <Mcu_Init+0x16c>)
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	f36f 43d3 	bfc	r3, #19, #1
 8002c38:	6013      	str	r3, [r2, #0]
	RCC->CR.B.CSSON = 1 ;
#endif


#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreTake(MCU_SemConfig_Clock,portMAX_DELAY);
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <Mcu_Init+0x15c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fdd8 	bl	80007f8 <xQueueSemaphoreTake>
	/* to select SW[1:0]
	 00: HSI selected as system clock
	 01: HSE selected as system clock
     10: PLL selected as system clock
	  */
	uint32 Local_RCC_CFGR = ConfigPtr->PLL_MUL_NUMBER
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <Mcu_Init+0x158>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
			| ConfigPtr->PLL_ENTRY_CLOCK | ConfigPtr->ADC_PRESCALAR_
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <Mcu_Init+0x158>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <Mcu_Init+0x158>)
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	8992      	ldrh	r2, [r2, #12]
 8002c5c:	4313      	orrs	r3, r2
			| ConfigPtr->APB2_PRESCALAR_ | ConfigPtr->APB1_PRESCALAR_
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <Mcu_Init+0x158>)
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	89d2      	ldrh	r2, [r2, #14]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <Mcu_Init+0x158>)
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	8a12      	ldrh	r2, [r2, #16]
 8002c6c:	4313      	orrs	r3, r2
			| ConfigPtr->AHB_PRESCALAR_ | ConfigPtr->SW_ENABLE_CLOCK;
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <Mcu_Init+0x158>)
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	8a52      	ldrh	r2, [r2, #18]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <Mcu_Init+0x158>)
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	7d12      	ldrb	r2, [r2, #20]
	uint32 Local_RCC_CFGR = ConfigPtr->PLL_MUL_NUMBER
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	603b      	str	r3, [r7, #0]
	RCC->CFGR.Reg    = Local_RCC_CFGR ;
 8002c80:	4a0b      	ldr	r2, [pc, #44]	; (8002cb0 <Mcu_Init+0x16c>)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6053      	str	r3, [r2, #4]

#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreGive(MCU_SemConfig_Clock);
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <Mcu_Init+0x15c>)
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f7fd fc04 	bl	800049c <xQueueGenericSend>
#endif
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000028 	.word	0x20000028
 8002ca0:	2000466c 	.word	0x2000466c
 8002ca4:	20004670 	.word	0x20004670
 8002ca8:	20004674 	.word	0x20004674
 8002cac:	20004678 	.word	0x20004678
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <Mcu_EnumSetPerAPB1>:

Error_State       Mcu_EnumSetPerAPB1(BUS_PERPHERIALS Mcu_Per ) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreTake(MCU_SemPerpherialsAPB1,portMAX_DELAY);
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <Mcu_EnumSetPerAPB1+0x4c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fd97 	bl	80007f8 <xQueueSemaphoreTake>
#endif
	if ( Mcu_Per >= APB1_PER_TIM2  && Mcu_Per <= APB1_PER_DAC ){
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <Mcu_EnumSetPerAPB1+0x34>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd6:	d807      	bhi.n	8002ce8 <Mcu_EnumSetPerAPB1+0x34>
		PerpherialsAPB1 |= Mcu_Per ;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <Mcu_EnumSetPerAPB1+0x50>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <Mcu_EnumSetPerAPB1+0x50>)
 8002ce2:	6013      	str	r3, [r2, #0]
		return E_OK ;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e007      	b.n	8002cf8 <Mcu_EnumSetPerAPB1+0x44>
	}
#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreGive(MCU_SemPerpherialsAPB1);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <Mcu_EnumSetPerAPB1+0x4c>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	f7fd fbd3 	bl	800049c <xQueueGenericSend>
#endif
	return E_NOT_OK ;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20004670 	.word	0x20004670
 8002d04:	20004660 	.word	0x20004660

08002d08 <Mcu_EnumSetPerAPB2>:
Error_State       Mcu_EnumSetPerAPB2(BUS_PERPHERIALS Mcu_Per ) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreTake(MCU_SemPerpherialsAPB2,portMAX_DELAY);
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <Mcu_EnumSetPerAPB2+0x50>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fd6d 	bl	80007f8 <xQueueSemaphoreTake>
#endif
	if (Mcu_Per >= APB2_PER_AFIO  && Mcu_Per <= APB2_PER_TIM11){
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d24:	d90b      	bls.n	8002d3e <Mcu_EnumSetPerAPB2+0x36>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <Mcu_EnumSetPerAPB2+0x54>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d807      	bhi.n	8002d3e <Mcu_EnumSetPerAPB2+0x36>
		PerpherialsAPB2 |= Mcu_Per ;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <Mcu_EnumSetPerAPB2+0x58>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <Mcu_EnumSetPerAPB2+0x58>)
 8002d38:	6013      	str	r3, [r2, #0]
		return E_OK;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e007      	b.n	8002d4e <Mcu_EnumSetPerAPB2+0x46>
	}
#if MCU_DESIGN == MCU_FREERTOS
	xSemaphoreGive(MCU_SemPerpherialsAPB2);
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <Mcu_EnumSetPerAPB2+0x50>)
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	f7fd fba8 	bl	800049c <xQueueGenericSend>
#endif
	return E_NOT_OK ;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20004674 	.word	0x20004674
 8002d5c:	80200000 	.word	0x80200000
 8002d60:	20004664 	.word	0x20004664

08002d64 <Mcu_VidRunnable>:
#endif
	return E_NOT_OK ;

}

void  Mcu_VidRunnable (void){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	if (PerpherialsAPB1 != NULL){
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <Mcu_VidRunnable+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <Mcu_VidRunnable+0x16>
		Mcu_SetMode(PerpherialsAPB1);
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <Mcu_VidRunnable+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 f81b 	bl	8002db0 <Mcu_SetMode>
	}

	if (PerpherialsAPB2 != NULL){
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <Mcu_VidRunnable+0x44>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <Mcu_VidRunnable+0x28>
		Mcu_SetMode(PerpherialsAPB2);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <Mcu_VidRunnable+0x44>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f812 	bl	8002db0 <Mcu_SetMode>
	}

	if (PerpherialsAHB  != NULL){
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <Mcu_VidRunnable+0x48>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <Mcu_VidRunnable+0x3a>
		Mcu_SetMode(PerpherialsAHB) ;
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <Mcu_VidRunnable+0x48>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f809 	bl	8002db0 <Mcu_SetMode>
	}
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20004660 	.word	0x20004660
 8002da8:	20004664 	.word	0x20004664
 8002dac:	20004668 	.word	0x20004668

08002db0 <Mcu_SetMode>:

void Mcu_SetMode (Mcu_ModeType McuMode){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	McuMode |= McuMode;
	if ( McuMode >= APB1_PER_TIM2  && McuMode <= APB1_PER_DAC ){
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <Mcu_SetMode+0x1e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc4:	d803      	bhi.n	8002dce <Mcu_SetMode+0x1e>
		RCC->APB1ENR.Reg  = McuMode ;
 8002dc6:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <Mcu_SetMode+0x74>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	e025      	b.n	8002e1a <Mcu_SetMode+0x6a>
	}
	else if (McuMode >= APB2_PER_AFIO  && McuMode <= APB2_PER_TIM11){
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dd4:	d90b      	bls.n	8002dee <Mcu_SetMode+0x3e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <Mcu_SetMode+0x78>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d807      	bhi.n	8002dee <Mcu_SetMode+0x3e>
		McuMode = McuMode & ~(1<<(31));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de4:	607b      	str	r3, [r7, #4]
		RCC->APB2ENR.Reg  = McuMode ;
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <Mcu_SetMode+0x74>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	61d3      	str	r3, [r2, #28]
 8002dec:	e015      	b.n	8002e1a <Mcu_SetMode+0x6a>
	}
	else if (McuMode >= AHB_PER_DMA_1  && McuMode <= AHB_PER_SDIO){
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d90b      	bls.n	8002e0e <Mcu_SetMode+0x5e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <Mcu_SetMode+0x7c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d807      	bhi.n	8002e0e <Mcu_SetMode+0x5e>
		McuMode = McuMode & ~(1<<(30));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e04:	607b      	str	r3, [r7, #4]
		RCC->AHBENR.Reg  = McuMode ;
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <Mcu_SetMode+0x74>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6193      	str	r3, [r2, #24]
 8002e0c:	e005      	b.n	8002e1a <Mcu_SetMode+0x6a>
	}
	else {
		Det_ReportError(MODULE_ID, Mcu_SetMode_ID, MCU_E_PARAM_MODE);
 8002e0e:	220c      	movs	r2, #12
 8002e10:	2108      	movs	r1, #8
 8002e12:	2065      	movs	r0, #101	; 0x65
 8002e14:	f7ff fd63 	bl	80028de <Det_ReportError>
	}
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	80200000 	.word	0x80200000
 8002e2c:	40000400 	.word	0x40000400

08002e30 <Port_EnumSetterPin>:
			break ;

		}
	}
}
Error_State       Port_EnumSetterPin(Port_PinType Copy_ChannelId ,Port_PinModeType Copy_Mode){
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	460a      	mov	r2, r1
 8002e3a:	71fb      	strb	r3, [r7, #7]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71bb      	strb	r3, [r7, #6]
	if ( Copy_ChannelId >=Port_A0 && Copy_ChannelId <=Port_C15){
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2b2f      	cmp	r3, #47	; 0x2f
 8002e44:	d809      	bhi.n	8002e5a <Port_EnumSetterPin+0x2a>
		Port_ArryOfPins[Copy_ChannelId]       = Copy_Mode      ;
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <Port_EnumSetterPin+0x38>)
 8002e4a:	79ba      	ldrb	r2, [r7, #6]
 8002e4c:	54ca      	strb	r2, [r1, r3]
		Port_ArryOfActivition[Copy_ChannelId] = STD_ON         ;
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	4a06      	ldr	r2, [pc, #24]	; (8002e6c <Port_EnumSetterPin+0x3c>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	54d1      	strb	r1, [r2, r3]
		return E_OK ;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e000      	b.n	8002e5c <Port_EnumSetterPin+0x2c>
	}
	return E_INVALID_PARAMETER ;
 8002e5a:	2302      	movs	r3, #2
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000467c 	.word	0x2000467c
 8002e6c:	200046ac 	.word	0x200046ac

08002e70 <Port_VidRunnable>:

void              Port_VidRunnable (void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	uint8 i = 0 ;
 8002e76:	2300      	movs	r3, #0
 8002e78:	71fb      	strb	r3, [r7, #7]
	while(  i < AMOUNT_PINS ){
 8002e7a:	e00f      	b.n	8002e9c <Port_VidRunnable+0x2c>
		if (Port_ArryOfActivition[i] != STD_OFF){
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <Port_VidRunnable+0x3c>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <Port_VidRunnable+0x26>
			Port_SetPinMode(i, Port_ArryOfPins[i]);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <Port_VidRunnable+0x40>)
 8002e8a:	5cd2      	ldrb	r2, [r2, r3]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f80f 	bl	8002eb4 <Port_SetPinMode>
		}
		i++;
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	71fb      	strb	r3, [r7, #7]
	while(  i < AMOUNT_PINS ){
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	2b2f      	cmp	r3, #47	; 0x2f
 8002ea0:	d9ec      	bls.n	8002e7c <Port_VidRunnable+0xc>
	}
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200046ac 	.word	0x200046ac
 8002eb0:	2000467c 	.word	0x2000467c

08002eb4 <Port_SetPinMode>:
	00: Input mode (reset state)
	01: Output mode, max speed 10 MHz.
	10: Output mode, max speed 2 MHz.
	11: Output mode, max speed 50 MHz
=============================================== */
void    Port_SetPinMode      (Port_PinType Pin,Port_PinModeType Mode){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	71bb      	strb	r3, [r7, #6]

	if (FlagOfReset == 0){
 8002ec4:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <Port_SetPinMode+0x134>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d123      	bne.n	8002f14 <Port_SetPinMode+0x60>
		GPIOA->CRL &= ~(0xFFFFFFFF);
 8002ecc:	4b47      	ldr	r3, [pc, #284]	; (8002fec <Port_SetPinMode+0x138>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <Port_SetPinMode+0x138>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
		GPIOB->CRL &= ~(0xFFFFFFFF);
 8002ed6:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
		GPIOC->CRL &= ~(0xFFFFFFFF);
 8002ee0:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <Port_SetPinMode+0x140>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <Port_SetPinMode+0x140>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
		GPIOA->CRH &= ~(0xFFFFFFFF);
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <Port_SetPinMode+0x138>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <Port_SetPinMode+0x138>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
		GPIOB->CRH &= ~(0xFFFFFFFF);
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	605a      	str	r2, [r3, #4]
		GPIOC->CRH &= ~(0xFFFFFFFF);
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <Port_SetPinMode+0x140>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <Port_SetPinMode+0x140>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
		FlagOfReset++;
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <Port_SetPinMode+0x134>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <Port_SetPinMode+0x134>)
 8002f12:	701a      	strb	r2, [r3, #0]
	}

	if ( Pin >= Port_A0  && Pin <= Port_A15 ){
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	d81b      	bhi.n	8002f52 <Port_SetPinMode+0x9e>
		if (Pin <= Port_A7){
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d80b      	bhi.n	8002f38 <Port_SetPinMode+0x84>
			GPIOA->CRL |= ( Mode <<(Pin  * BASE_CRL_CRH) ) ;
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <Port_SetPinMode+0x138>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	79b9      	ldrb	r1, [r7, #6]
 8002f26:	79fa      	ldrb	r2, [r7, #7]
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <Port_SetPinMode+0x138>)
 8002f32:	430b      	orrs	r3, r1
 8002f34:	6013      	str	r3, [r2, #0]
		GPIOB->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
	}
	else {
		Det_ReportError(MODULE_ID, Port_SetPinMode_ID, PORT_E_PARAM_PIN);
	}
}
 8002f36:	e053      	b.n	8002fe0 <Port_SetPinMode+0x12c>
			GPIOA->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <Port_SetPinMode+0x138>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	79b9      	ldrb	r1, [r7, #6]
 8002f3e:	79fa      	ldrb	r2, [r7, #7]
 8002f40:	3a08      	subs	r2, #8
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	fa01 f202 	lsl.w	r2, r1, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4a28      	ldr	r2, [pc, #160]	; (8002fec <Port_SetPinMode+0x138>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6053      	str	r3, [r2, #4]
}
 8002f50:	e046      	b.n	8002fe0 <Port_SetPinMode+0x12c>
	else if (Pin >= Port_B0  && Pin <= Port_B15){
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d926      	bls.n	8002fa6 <Port_SetPinMode+0xf2>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b1f      	cmp	r3, #31
 8002f5c:	d823      	bhi.n	8002fa6 <Port_SetPinMode+0xf2>
		if (Pin  <= Port_B7 ){
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b17      	cmp	r3, #23
 8002f62:	d80f      	bhi.n	8002f84 <Port_SetPinMode+0xd0>
			CLR_BIT(Pin,4);
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f023 0310 	bic.w	r3, r3, #16
 8002f6a:	71fb      	strb	r3, [r7, #7]
			GPIOB->CRL |= ( Mode << (Pin *BASE_CRL_CRH) ) ;
 8002f6c:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	79b9      	ldrb	r1, [r7, #6]
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	0092      	lsls	r2, r2, #2
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	6013      	str	r3, [r2, #0]
		if (Pin  <= Port_B7 ){
 8002f82:	e02d      	b.n	8002fe0 <Port_SetPinMode+0x12c>
			CLR_BIT(Pin,4);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f023 0310 	bic.w	r3, r3, #16
 8002f8a:	71fb      	strb	r3, [r7, #7]
			GPIOB->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	79b9      	ldrb	r1, [r7, #6]
 8002f92:	79fa      	ldrb	r2, [r7, #7]
 8002f94:	3a08      	subs	r2, #8
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6053      	str	r3, [r2, #4]
		if (Pin  <= Port_B7 ){
 8002fa4:	e01c      	b.n	8002fe0 <Port_SetPinMode+0x12c>
	else if (Pin >= Port_C0  && Pin <= Port_C15){
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b1f      	cmp	r3, #31
 8002faa:	d913      	bls.n	8002fd4 <Port_SetPinMode+0x120>
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2b2f      	cmp	r3, #47	; 0x2f
 8002fb0:	d810      	bhi.n	8002fd4 <Port_SetPinMode+0x120>
		CLR_BIT(Pin,5);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	f023 0320 	bic.w	r3, r3, #32
 8002fb8:	71fb      	strb	r3, [r7, #7]
		GPIOB->CRH |= ( Mode <<( (Pin -8)*BASE_CRL_CRH) ) ;
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	79b9      	ldrb	r1, [r7, #6]
 8002fc0:	79fa      	ldrb	r2, [r7, #7]
 8002fc2:	3a08      	subs	r2, #8
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <Port_SetPinMode+0x13c>)
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]
 8002fd2:	e005      	b.n	8002fe0 <Port_SetPinMode+0x12c>
		Det_ReportError(MODULE_ID, Port_SetPinMode_ID, PORT_E_PARAM_PIN);
 8002fd4:	220a      	movs	r2, #10
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	207c      	movs	r0, #124	; 0x7c
 8002fda:	f7ff fc80 	bl	80028de <Det_ReportError>
}
 8002fde:	e7ff      	b.n	8002fe0 <Port_SetPinMode+0x12c>
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200046dc 	.word	0x200046dc
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	40010c00 	.word	0x40010c00
 8002ff4:	40011000 	.word	0x40011000

08002ff8 <USART_VidInit>:
 * \enduml
 */


void USART_VidInit(const USART_ConfigType *USART_CFG)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    if (USART_CFG == NULL){
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80c3 	beq.w	800318e <USART_VidInit+0x196>
        return;
    }

	for (int i = 0; i < NUMBER_OF_USED_UARTS; i++)
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e0ba      	b.n	8003184 <USART_VidInit+0x18c>
	    {
 if (USART_CFG->UART_Array[i].USARTEnableType == UE_DISEBLE)
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	440b      	add	r3, r1
 800301c:	3308      	adds	r3, #8
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80ab 	beq.w	800317c <USART_VidInit+0x184>
	continue;


 switch (USART_CFG->UART_Array[i].USARTid)
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d02d      	beq.n	8003096 <USART_VidInit+0x9e>
 800303a:	2b02      	cmp	r3, #2
 800303c:	dc3f      	bgt.n	80030be <USART_VidInit+0xc6>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <USART_VidInit+0x50>
 8003042:	2b01      	cmp	r3, #1
 8003044:	d013      	beq.n	800306e <USART_VidInit+0x76>
 8003046:	e03a      	b.n	80030be <USART_VidInit+0xc6>
 {
 case UART1:
			Mcu_EnumSetPerAPB2(APB2_PER_USART1);
 8003048:	4853      	ldr	r0, [pc, #332]	; (8003198 <USART_VidInit+0x1a0>)
 800304a:	f7ff fe5d 	bl	8002d08 <Mcu_EnumSetPerAPB2>
			Mcu_VidRunnable();
 800304e:	f7ff fe89 	bl	8002d64 <Mcu_VidRunnable>

			Port_EnumSetterPin(Port_A9, PORT_PIN_OUT | A_PUSH_PULL);
 8003052:	210a      	movs	r1, #10
 8003054:	2009      	movs	r0, #9
 8003056:	f7ff feeb 	bl	8002e30 <Port_EnumSetterPin>
			Port_EnumSetterPin(Port_A10, PORT_PIN_IN | FLOATING_INPUT);
 800305a:	2104      	movs	r1, #4
 800305c:	200a      	movs	r0, #10
 800305e:	f7ff fee7 	bl	8002e30 <Port_EnumSetterPin>
			Port_VidRunnable();
 8003062:	f7ff ff05 	bl	8002e70 <Port_VidRunnable>
			UART_PTR = MUART1;
 8003066:	4b4d      	ldr	r3, [pc, #308]	; (800319c <USART_VidInit+0x1a4>)
 8003068:	4a4d      	ldr	r2, [pc, #308]	; (80031a0 <USART_VidInit+0x1a8>)
 800306a:	601a      	str	r2, [r3, #0]
			break;
 800306c:	e027      	b.n	80030be <USART_VidInit+0xc6>
 case UART2:
		Mcu_EnumSetPerAPB1(APB1_PER_USART2);
 800306e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003072:	f7ff fe1f 	bl	8002cb4 <Mcu_EnumSetPerAPB1>
		Mcu_VidRunnable();
 8003076:	f7ff fe75 	bl	8002d64 <Mcu_VidRunnable>

		Port_EnumSetterPin(Port_A2, PORT_PIN_OUT | A_PUSH_PULL);
 800307a:	210a      	movs	r1, #10
 800307c:	2002      	movs	r0, #2
 800307e:	f7ff fed7 	bl	8002e30 <Port_EnumSetterPin>
		Port_EnumSetterPin(Port_A3, PORT_PIN_IN | FLOATING_INPUT);
 8003082:	2104      	movs	r1, #4
 8003084:	2003      	movs	r0, #3
 8003086:	f7ff fed3 	bl	8002e30 <Port_EnumSetterPin>
		Port_VidRunnable();
 800308a:	f7ff fef1 	bl	8002e70 <Port_VidRunnable>
		UART_PTR = MUART2;
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <USART_VidInit+0x1a4>)
 8003090:	4a44      	ldr	r2, [pc, #272]	; (80031a4 <USART_VidInit+0x1ac>)
 8003092:	601a      	str	r2, [r3, #0]
		break;
 8003094:	e013      	b.n	80030be <USART_VidInit+0xc6>
 case UART3:
		Mcu_EnumSetPerAPB1(APB1_PER_USART3);
 8003096:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800309a:	f7ff fe0b 	bl	8002cb4 <Mcu_EnumSetPerAPB1>
		Mcu_VidRunnable();
 800309e:	f7ff fe61 	bl	8002d64 <Mcu_VidRunnable>

		Port_EnumSetterPin(Port_B10, PORT_PIN_OUT | A_PUSH_PULL);
 80030a2:	210a      	movs	r1, #10
 80030a4:	201a      	movs	r0, #26
 80030a6:	f7ff fec3 	bl	8002e30 <Port_EnumSetterPin>
		Port_EnumSetterPin(Port_B11, PORT_PIN_IN | FLOATING_INPUT);
 80030aa:	2104      	movs	r1, #4
 80030ac:	201b      	movs	r0, #27
 80030ae:	f7ff febf 	bl	8002e30 <Port_EnumSetterPin>
		Port_VidRunnable();
 80030b2:	f7ff fedd 	bl	8002e70 <Port_VidRunnable>
		UART_PTR = MUART3;
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <USART_VidInit+0x1a4>)
 80030b8:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <USART_VidInit+0x1b0>)
 80030ba:	601a      	str	r2, [r3, #0]
		break;
 80030bc:	bf00      	nop
}


UART_PTR->BR.R = USART_CFG->UART_Array[i].USARTBaud;
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	440b      	add	r3, r1
 80030cc:	3302      	adds	r3, #2
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	4b32      	ldr	r3, [pc, #200]	; (800319c <USART_VidInit+0x1a4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	609a      	str	r2, [r3, #8]
UART_PTR->CR1.B.M= USART_CFG->UART_Array[i].USARTWordLength;
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	3304      	adds	r3, #4
 80030e6:	7819      	ldrb	r1, [r3, #0]
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <USART_VidInit+0x1a4>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	460b      	mov	r3, r1
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	b2d9      	uxtb	r1, r3
 80030f4:	68d3      	ldr	r3, [r2, #12]
 80030f6:	f361 330c 	bfi	r3, r1, #12, #1
 80030fa:	60d3      	str	r3, [r2, #12]
UART_PTR->CR2.B.STOP = USART_CFG->UART_Array[i].USARTStopBits;
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	3305      	adds	r3, #5
 800310c:	7819      	ldrb	r1, [r3, #0]
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <USART_VidInit+0x1a4>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	460b      	mov	r3, r1
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	b2d9      	uxtb	r1, r3
 800311a:	6913      	ldr	r3, [r2, #16]
 800311c:	f361 330d 	bfi	r3, r1, #12, #2
 8003120:	6113      	str	r3, [r2, #16]
UART_PTR->CR1.B.REnTE = USART_CFG->UART_Array[i].USARTMode;
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	440b      	add	r3, r1
 8003130:	3306      	adds	r3, #6
 8003132:	7819      	ldrb	r1, [r3, #0]
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <USART_VidInit+0x1a4>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	b2d9      	uxtb	r1, r3
 8003140:	68d3      	ldr	r3, [r2, #12]
 8003142:	f361 0383 	bfi	r3, r1, #2, #2
 8003146:	60d3      	str	r3, [r2, #12]
UART_PTR->CR1.B.PSnPCE = USART_CFG->UART_Array[i].USARTParitySelection;
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	440b      	add	r3, r1
 8003156:	3307      	adds	r3, #7
 8003158:	7819      	ldrb	r1, [r3, #0]
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <USART_VidInit+0x1a4>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	460b      	mov	r3, r1
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	b2d9      	uxtb	r1, r3
 8003166:	68d3      	ldr	r3, [r2, #12]
 8003168:	f361 234a 	bfi	r3, r1, #9, #2
 800316c:	60d3      	str	r3, [r2, #12]
					/*Start the USART*/
		UART_PTR->CR1.B.UE = UE_ENABLE;
 800316e:	4b0b      	ldr	r3, [pc, #44]	; (800319c <USART_VidInit+0x1a4>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68d3      	ldr	r3, [r2, #12]
 8003174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003178:	60d3      	str	r3, [r2, #12]
 800317a:	e000      	b.n	800317e <USART_VidInit+0x186>
	continue;
 800317c:	bf00      	nop
	for (int i = 0; i < NUMBER_OF_USED_UARTS; i++)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3301      	adds	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b02      	cmp	r3, #2
 8003188:	f77f af41 	ble.w	800300e <USART_VidInit+0x16>
 800318c:	e000      	b.n	8003190 <USART_VidInit+0x198>
        return;
 800318e:	bf00      	nop
}
}
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	80004000 	.word	0x80004000
 800319c:	200046e0 	.word	0x200046e0
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40004800 	.word	0x40004800

080031ac <USART_ReceiveByte>:
 *	:return recievedData;
 * end
 * \enduml
*/
uint8 USART_ReceiveByte(USART_ID UART_ID)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
    uint8 Copy_U8Data;
    uint32 Copy_U32TimeOut=0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
	//UART_PTR->DR.R = 0;
	switch(UART_ID)
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d00e      	beq.n	80031de <USART_ReceiveByte+0x32>
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	dc14      	bgt.n	80031ee <USART_ReceiveByte+0x42>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <USART_ReceiveByte+0x22>
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d004      	beq.n	80031d6 <USART_ReceiveByte+0x2a>
 80031cc:	e00b      	b.n	80031e6 <USART_ReceiveByte+0x3a>
	{
	case UART1:
		UART_PTR = MUART1;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <USART_ReceiveByte+0x8c>)
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <USART_ReceiveByte+0x90>)
 80031d2:	601a      	str	r2, [r3, #0]
		break;
 80031d4:	e007      	b.n	80031e6 <USART_ReceiveByte+0x3a>
	case UART2:
		UART_PTR = MUART2;
 80031d6:	4b18      	ldr	r3, [pc, #96]	; (8003238 <USART_ReceiveByte+0x8c>)
 80031d8:	4a19      	ldr	r2, [pc, #100]	; (8003240 <USART_ReceiveByte+0x94>)
 80031da:	601a      	str	r2, [r3, #0]
		break;
 80031dc:	e003      	b.n	80031e6 <USART_ReceiveByte+0x3a>
	case UART3:
		UART_PTR = MUART3;
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <USART_ReceiveByte+0x8c>)
 80031e0:	4a18      	ldr	r2, [pc, #96]	; (8003244 <USART_ReceiveByte+0x98>)
 80031e2:	601a      	str	r2, [r3, #0]
		break;
 80031e4:	bf00      	nop
	}
    while((UART_PTR->SR.B.RXNE == 0) && (Copy_U32TimeOut < THRESHOLD_VALUE))
 80031e6:	e002      	b.n	80031ee <USART_ReceiveByte+0x42>
    {
           Copy_U32TimeOut++;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	3301      	adds	r3, #1
 80031ec:	60bb      	str	r3, [r7, #8]
    while((UART_PTR->SR.B.RXNE == 0) && (Copy_U32TimeOut < THRESHOLD_VALUE))
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <USART_ReceiveByte+0x8c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d103      	bne.n	8003206 <USART_ReceiveByte+0x5a>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <USART_ReceiveByte+0x9c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d9f0      	bls.n	80031e8 <USART_ReceiveByte+0x3c>
       }

       if(Copy_U32TimeOut == THRESHOLD_VALUE)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4a10      	ldr	r2, [pc, #64]	; (800324c <USART_ReceiveByte+0xa0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d102      	bne.n	8003214 <USART_ReceiveByte+0x68>
       {
           Copy_U8Data = 255;
 800320e:	23ff      	movs	r3, #255	; 0xff
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e005      	b.n	8003220 <USART_ReceiveByte+0x74>
       }
       else
       {
           Copy_U8Data = UART_PTR->DR.R;
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <USART_ReceiveByte+0x8c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	73fb      	strb	r3, [r7, #15]
           Copy_U32TimeOut=0;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]

       }
       UART_PTR->SR.B.RXNE = 0;
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <USART_ReceiveByte+0x8c>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f36f 1345 	bfc	r3, #5, #1
 800322a:	6013      	str	r3, [r2, #0]
       return Copy_U8Data;
 800322c:	7bfb      	ldrb	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	200046e0 	.word	0x200046e0
 800323c:	40013800 	.word	0x40013800
 8003240:	40004400 	.word	0x40004400
 8003244:	40004800 	.word	0x40004800
 8003248:	0001869f 	.word	0x0001869f
 800324c:	000186a0 	.word	0x000186a0

08003250 <USART_VidSendChar>:
 *	:MUART->SR.B.TC = 0;
 * end
 * \enduml
 */
void USART_VidSendChar(USART_ID UART_ID, uint8 Copy_U8Data)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	460a      	mov	r2, r1
 800325a:	71fb      	strb	r3, [r7, #7]
 800325c:	4613      	mov	r3, r2
 800325e:	71bb      	strb	r3, [r7, #6]
	switch(UART_ID)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d00e      	beq.n	8003284 <USART_VidSendChar+0x34>
 8003266:	2b02      	cmp	r3, #2
 8003268:	dc10      	bgt.n	800328c <USART_VidSendChar+0x3c>
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <USART_VidSendChar+0x24>
 800326e:	2b01      	cmp	r3, #1
 8003270:	d004      	beq.n	800327c <USART_VidSendChar+0x2c>
 8003272:	e00b      	b.n	800328c <USART_VidSendChar+0x3c>
		{
		case UART1:
			UART_PTR = MUART1;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <USART_VidSendChar+0x70>)
 8003276:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <USART_VidSendChar+0x74>)
 8003278:	601a      	str	r2, [r3, #0]
			break;
 800327a:	e007      	b.n	800328c <USART_VidSendChar+0x3c>
		case UART2:
			UART_PTR = MUART2;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <USART_VidSendChar+0x70>)
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <USART_VidSendChar+0x78>)
 8003280:	601a      	str	r2, [r3, #0]
			break;
 8003282:	e003      	b.n	800328c <USART_VidSendChar+0x3c>
		case UART3:
			UART_PTR = MUART3;
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <USART_VidSendChar+0x70>)
 8003286:	4a11      	ldr	r2, [pc, #68]	; (80032cc <USART_VidSendChar+0x7c>)
 8003288:	601a      	str	r2, [r3, #0]
			break;
 800328a:	bf00      	nop
		}

	UART_PTR->SR.B.TC = 0;
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <USART_VidSendChar+0x70>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	f36f 1386 	bfc	r3, #6, #1
 8003296:	6013      	str	r3, [r2, #0]
	UART_PTR->DR.R = Copy_U8Data;
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <USART_VidSendChar+0x70>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	79ba      	ldrb	r2, [r7, #6]
 800329e:	605a      	str	r2, [r3, #4]
    while (!UART_PTR->SR.B.TC);
 80032a0:	bf00      	nop
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <USART_VidSendChar+0x70>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f7      	beq.n	80032a2 <USART_VidSendChar+0x52>
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	200046e0 	.word	0x200046e0
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40004800 	.word	0x40004800

080032d0 <USART_TransmitString>:
  * stop
  * \enduml
  */

 void USART_TransmitString(USART_ID UART_ID,uint8 *string_Copy_U8Data)
 {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
     for (int i = 0 ; string_Copy_U8Data[i] != '\0' ; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e00b      	b.n	80032fa <USART_TransmitString+0x2a>
     	USART_VidSendChar(UART_ID, string_Copy_U8Data[i]);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ffae 	bl	8003250 <USART_VidSendChar>
     for (int i = 0 ; string_Copy_U8Data[i] != '\0' ; i++)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ed      	bne.n	80032e2 <USART_TransmitString+0x12>
 }
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <main>:
void LedShape3();
void LedShape4();
void TTL_ReciveString();

int main(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af02      	add	r7, sp, #8
	BaseType_t ret1;
	BaseType_t ret2;
	BaseType_t ret3;
	BaseType_t ret4;

	Mcu_Init();
 8003316:	f7ff fc15 	bl	8002b44 <Mcu_Init>
	Mcu_EnumSetPerAPB2(APB2_PER_GPIOA);
 800331a:	483e      	ldr	r0, [pc, #248]	; (8003414 <main+0x104>)
 800331c:	f7ff fcf4 	bl	8002d08 <Mcu_EnumSetPerAPB2>
	Mcu_EnumSetPerAPB2(APB2_PER_GPIOB);
 8003320:	483d      	ldr	r0, [pc, #244]	; (8003418 <main+0x108>)
 8003322:	f7ff fcf1 	bl	8002d08 <Mcu_EnumSetPerAPB2>
	Mcu_VidRunnable();
 8003326:	f7ff fd1d 	bl	8002d64 <Mcu_VidRunnable>

	USART_VidInit(arrOfUART);
 800332a:	483c      	ldr	r0, [pc, #240]	; (800341c <main+0x10c>)
 800332c:	f7ff fe64 	bl	8002ff8 <USART_VidInit>
	LCD_VidInit();
 8003330:	f7ff fb3c 	bl	80029ac <LCD_VidInit>

	ret1 = xTaskCreate(ActionTask,"ActionTask", (configSTACK_DEPTH_TYPE) 100,
 8003334:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <main+0x110>)
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2301      	movs	r3, #1
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <main+0x114>)
 800333e:	2264      	movs	r2, #100	; 0x64
 8003340:	4938      	ldr	r1, [pc, #224]	; (8003424 <main+0x114>)
 8003342:	4839      	ldr	r0, [pc, #228]	; (8003428 <main+0x118>)
 8003344:	f7fd fc73 	bl	8000c2e <xTaskCreate>
 8003348:	61f8      	str	r0, [r7, #28]
			"ActionTask", (UBaseType_t) 1, &ActionTask_Handler);
	ret2 = xTaskCreate(ManagerTask, "ManagerTask", (configSTACK_DEPTH_TYPE) 100,
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <main+0x11c>)
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2302      	movs	r3, #2
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <main+0x120>)
 8003354:	2264      	movs	r2, #100	; 0x64
 8003356:	4936      	ldr	r1, [pc, #216]	; (8003430 <main+0x120>)
 8003358:	4836      	ldr	r0, [pc, #216]	; (8003434 <main+0x124>)
 800335a:	f7fd fc68 	bl	8000c2e <xTaskCreate>
 800335e:	61b8      	str	r0, [r7, #24]
			"ManagerTask", (UBaseType_t) 2, &TaskManager_Handler);
	ret3 = xTaskCreate(Led_Update,"Led_Update", (configSTACK_DEPTH_TYPE) 100,
 8003360:	4b35      	ldr	r3, [pc, #212]	; (8003438 <main+0x128>)
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2300      	movs	r3, #0
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <main+0x114>)
 800336a:	2264      	movs	r2, #100	; 0x64
 800336c:	4933      	ldr	r1, [pc, #204]	; (800343c <main+0x12c>)
 800336e:	4834      	ldr	r0, [pc, #208]	; (8003440 <main+0x130>)
 8003370:	f7fd fc5d 	bl	8000c2e <xTaskCreate>
 8003374:	6178      	str	r0, [r7, #20]
			"ActionTask", (UBaseType_t) 0, &Led_Update_Handler);
	ret4 = xTaskCreate(LCD_Update, "LCD_Update", (configSTACK_DEPTH_TYPE) 100,
 8003376:	4b33      	ldr	r3, [pc, #204]	; (8003444 <main+0x134>)
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <main+0x120>)
 8003380:	2264      	movs	r2, #100	; 0x64
 8003382:	4931      	ldr	r1, [pc, #196]	; (8003448 <main+0x138>)
 8003384:	4831      	ldr	r0, [pc, #196]	; (800344c <main+0x13c>)
 8003386:	f7fd fc52 	bl	8000c2e <xTaskCreate>
 800338a:	6138      	str	r0, [r7, #16]
			"ManagerTask", (UBaseType_t) 0, &LCD_Update_Handler);

	GLobalQueue = xQueueCreate( (UBaseType_t) 3, (UBaseType_t) sizeof(uint8) );
 800338c:	2200      	movs	r2, #0
 800338e:	2101      	movs	r1, #1
 8003390:	2003      	movs	r0, #3
 8003392:	f7fd f805 	bl	80003a0 <xQueueGenericCreate>
 8003396:	4603      	mov	r3, r0
 8003398:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <main+0x140>)
 800339a:	6013      	str	r3, [r2, #0]

	configASSERT(ret1 == pdPASS);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d00a      	beq.n	80033b8 <main+0xa8>
        __asm volatile
 80033a2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	60fb      	str	r3, [r7, #12]
    }
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <main+0xa6>
	configASSERT(ret2 == pdPASS);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00a      	beq.n	80033d4 <main+0xc4>
        __asm volatile
 80033be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	60bb      	str	r3, [r7, #8]
    }
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <main+0xc2>
	configASSERT(ret3 == pdPASS);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d00a      	beq.n	80033f0 <main+0xe0>
        __asm volatile
 80033da:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	607b      	str	r3, [r7, #4]
    }
 80033ec:	bf00      	nop
 80033ee:	e7fe      	b.n	80033ee <main+0xde>
	configASSERT(ret4 == pdPASS);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00a      	beq.n	800340c <main+0xfc>
        __asm volatile
 80033f6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	603b      	str	r3, [r7, #0]
    }
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <main+0xfa>

	vTaskStartScheduler();
 800340c:	f7fd feaa 	bl	8001164 <vTaskStartScheduler>
    /* Loop forever */

	for(;;);
 8003410:	e7fe      	b.n	8003410 <main+0x100>
 8003412:	bf00      	nop
 8003414:	80000004 	.word	0x80000004
 8003418:	80000008 	.word	0x80000008
 800341c:	2000002c 	.word	0x2000002c
 8003420:	200046e8 	.word	0x200046e8
 8003424:	0800389c 	.word	0x0800389c
 8003428:	080034c1 	.word	0x080034c1
 800342c:	200046e4 	.word	0x200046e4
 8003430:	080038a8 	.word	0x080038a8
 8003434:	08003455 	.word	0x08003455
 8003438:	200046ec 	.word	0x200046ec
 800343c:	080038b4 	.word	0x080038b4
 8003440:	08003545 	.word	0x08003545
 8003444:	200046f0 	.word	0x200046f0
 8003448:	080038c0 	.word	0x080038c0
 800344c:	080035f1 	.word	0x080035f1
 8003450:	200046f4 	.word	0x200046f4

08003454 <ManagerTask>:
}

void ManagerTask(void *pvParameter ){
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(1));
 800345c:	2008      	movs	r0, #8
 800345e:	f7fd fd1f 	bl	8000ea0 <vTaskDelay>

	uint8 RecivedMassage ;

	for(;;){
		/* to clear recive massege with each iteration */
		RecivedMassage = 0 ;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]

		/* To show the first statement */
		USART_TransmitString(UART3,"   Choose option 1-Led update 2-LCD update    ");
 8003466:	4913      	ldr	r1, [pc, #76]	; (80034b4 <ManagerTask+0x60>)
 8003468:	2002      	movs	r0, #2
 800346a:	f7ff ff31 	bl	80032d0 <USART_TransmitString>

		/*  to check on option */
		while( RecivedMassage != '1' && RecivedMassage != '2' ){
 800346e:	e004      	b.n	800347a <ManagerTask+0x26>
		RecivedMassage = USART_ReceiveByte(UART3) ;
 8003470:	2002      	movs	r0, #2
 8003472:	f7ff fe9b 	bl	80031ac <USART_ReceiveByte>
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]
		while( RecivedMassage != '1' && RecivedMassage != '2' ){
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b31      	cmp	r3, #49	; 0x31
 800347e:	d002      	beq.n	8003486 <ManagerTask+0x32>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b32      	cmp	r3, #50	; 0x32
 8003484:	d1f4      	bne.n	8003470 <ManagerTask+0x1c>
		}

		xQueueSend( GLobalQueue,&RecivedMassage, portMAX_DELAY );
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <ManagerTask+0x64>)
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f107 010f 	add.w	r1, r7, #15
 800348e:	2300      	movs	r3, #0
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	f7fd f802 	bl	800049c <xQueueGenericSend>

		xTaskNotify( ActionTask_Handler , (uint32) 0 , eIncrement );
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <ManagerTask+0x68>)
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2302      	movs	r3, #2
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	f7fe fc21 	bl	8001cec <xTaskGenericNotify>

        /* to out from scheduling */
		vTaskSuspend(NULL);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fd fd2c 	bl	8000f08 <vTaskSuspend>
		RecivedMassage = 0 ;
 80034b0:	e7d7      	b.n	8003462 <ManagerTask+0xe>
 80034b2:	bf00      	nop
 80034b4:	080038cc 	.word	0x080038cc
 80034b8:	200046f4 	.word	0x200046f4
 80034bc:	200046e8 	.word	0x200046e8

080034c0 <ActionTask>:
	}
	vTaskDelete(NULL_PTR);
}

void ActionTask(void *pvParameter ){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(2));
 80034c8:	2010      	movs	r0, #16
 80034ca:	f7fd fce9 	bl	8000ea0 <vTaskDelay>

	uint8 RecivedMassage ;

	for(;;){
		/* to clear recive massege with each iteration */
		RecivedMassage = 0 ;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]

        // Wait for a notification
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80034d2:	f04f 32ff 	mov.w	r2, #4294967295
 80034d6:	2101      	movs	r1, #1
 80034d8:	2000      	movs	r0, #0
 80034da:	f7fe fb9b 	bl	8001c14 <ulTaskGenericNotifyTake>

		xQueueReceive(GLobalQueue, &RecivedMassage,portMAX_DELAY );
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <ActionTask+0x78>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f107 010f 	add.w	r1, r7, #15
 80034e6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd f8bc 	bl	8000668 <xQueueReceive>

		/* to see option on putty */
		USART_TransmitString(UART3,&RecivedMassage);
 80034f0:	f107 030f 	add.w	r3, r7, #15
 80034f4:	4619      	mov	r1, r3
 80034f6:	2002      	movs	r0, #2
 80034f8:	f7ff feea 	bl	80032d0 <USART_TransmitString>

		/* to notify other tasks */
        switch ( RecivedMassage){
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b31      	cmp	r3, #49	; 0x31
 8003500:	d002      	beq.n	8003508 <ActionTask+0x48>
 8003502:	2b32      	cmp	r3, #50	; 0x32
 8003504:	d00a      	beq.n	800351c <ActionTask+0x5c>
 8003506:	e013      	b.n	8003530 <ActionTask+0x70>

        case '1' :
    		xTaskNotify( Led_Update_Handler , (uint32) 0, eIncrement );
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <ActionTask+0x7c>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	2300      	movs	r3, #0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2302      	movs	r3, #2
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	f7fe fbe9 	bl	8001cec <xTaskGenericNotify>
        	break ;
 800351a:	e009      	b.n	8003530 <ActionTask+0x70>
        case '2' :
    		xTaskNotify( LCD_Update_Handler , (uint32) 0, eIncrement );
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <ActionTask+0x80>)
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	2300      	movs	r3, #0
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2302      	movs	r3, #2
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	f7fe fbdf 	bl	8001cec <xTaskGenericNotify>
        	break ;
 800352e:	bf00      	nop

                }

        /* to out from scheduling */
		vTaskSuspend(NULL);
 8003530:	2000      	movs	r0, #0
 8003532:	f7fd fce9 	bl	8000f08 <vTaskSuspend>
		RecivedMassage = 0 ;
 8003536:	e7ca      	b.n	80034ce <ActionTask+0xe>
 8003538:	200046f4 	.word	0x200046f4
 800353c:	200046ec 	.word	0x200046ec
 8003540:	200046f0 	.word	0x200046f0

08003544 <Led_Update>:

	}
	vTaskDelete(NULL_PTR);
}

void Led_Update(void *pvParameter ){
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(3));
 800354c:	2018      	movs	r0, #24
 800354e:	f7fd fca7 	bl	8000ea0 <vTaskDelay>

	uint8 RecivedMassage ;

	/* Intilaize four leds */
	Port_EnumSetterPin(Port_A9, PORT_PIN_OUT|G_PUSH_PULL);
 8003552:	2102      	movs	r1, #2
 8003554:	2009      	movs	r0, #9
 8003556:	f7ff fc6b 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(Port_A10, PORT_PIN_OUT|G_PUSH_PULL);
 800355a:	2102      	movs	r1, #2
 800355c:	200a      	movs	r0, #10
 800355e:	f7ff fc67 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(Port_A11, PORT_PIN_OUT|G_PUSH_PULL);
 8003562:	2102      	movs	r1, #2
 8003564:	200b      	movs	r0, #11
 8003566:	f7ff fc63 	bl	8002e30 <Port_EnumSetterPin>
	Port_EnumSetterPin(Port_A12, PORT_PIN_OUT|G_PUSH_PULL);
 800356a:	2102      	movs	r1, #2
 800356c:	200c      	movs	r0, #12
 800356e:	f7ff fc5f 	bl	8002e30 <Port_EnumSetterPin>
	Port_VidRunnable();
 8003572:	f7ff fc7d 	bl	8002e70 <Port_VidRunnable>

	for(;;){
		/* to clear recive massege with each iteration */
		RecivedMassage = 0 ;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]

        // Wait for a notification
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800357a:	f04f 32ff 	mov.w	r2, #4294967295
 800357e:	2101      	movs	r1, #1
 8003580:	2000      	movs	r0, #0
 8003582:	f7fe fb47 	bl	8001c14 <ulTaskGenericNotifyTake>

		USART_TransmitString(UART3,"   Wanted shape (1:4) = ");
 8003586:	4919      	ldr	r1, [pc, #100]	; (80035ec <Led_Update+0xa8>)
 8003588:	2002      	movs	r0, #2
 800358a:	f7ff fea1 	bl	80032d0 <USART_TransmitString>

		/*  to check on option */
		while (RecivedMassage != '1' && RecivedMassage != '2'
 800358e:	e004      	b.n	800359a <Led_Update+0x56>
				&& RecivedMassage != '3' && RecivedMassage != '4') {
		RecivedMassage = USART_ReceiveByte(UART3) ;
 8003590:	2002      	movs	r0, #2
 8003592:	f7ff fe0b 	bl	80031ac <USART_ReceiveByte>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]
		while (RecivedMassage != '1' && RecivedMassage != '2'
 800359a:	7bfb      	ldrb	r3, [r7, #15]
				&& RecivedMassage != '3' && RecivedMassage != '4') {
 800359c:	2b31      	cmp	r3, #49	; 0x31
 800359e:	d008      	beq.n	80035b2 <Led_Update+0x6e>
		while (RecivedMassage != '1' && RecivedMassage != '2'
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b32      	cmp	r3, #50	; 0x32
 80035a4:	d005      	beq.n	80035b2 <Led_Update+0x6e>
				&& RecivedMassage != '3' && RecivedMassage != '4') {
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b33      	cmp	r3, #51	; 0x33
 80035aa:	d002      	beq.n	80035b2 <Led_Update+0x6e>
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b34      	cmp	r3, #52	; 0x34
 80035b0:	d1ee      	bne.n	8003590 <Led_Update+0x4c>
		}

		/* to see option on putty */
		USART_TransmitString(UART3,&RecivedMassage);
 80035b2:	f107 030f 	add.w	r3, r7, #15
 80035b6:	4619      	mov	r1, r3
 80035b8:	2002      	movs	r0, #2
 80035ba:	f7ff fe89 	bl	80032d0 <USART_TransmitString>

		/* to notify other tasks */
        switch ( RecivedMassage){
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	3b31      	subs	r3, #49	; 0x31
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d8d7      	bhi.n	8003576 <Led_Update+0x32>
 80035c6:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <Led_Update+0x88>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035e3 	.word	0x080035e3
 80035d4:	08003577 	.word	0x08003577
 80035d8:	08003577 	.word	0x08003577
        case '1' :
        	LedShape1();
 80035dc:	f000 f82a 	bl	8003634 <LedShape1>
        	break ;
 80035e0:	e003      	b.n	80035ea <Led_Update+0xa6>
        case '2' :
        	LedShape2();
 80035e2:	f000 f871 	bl	80036c8 <LedShape2>
        	break ;
 80035e6:	bf00      	nop
 80035e8:	e7c5      	b.n	8003576 <Led_Update+0x32>
		RecivedMassage = 0 ;
 80035ea:	e7c4      	b.n	8003576 <Led_Update+0x32>
 80035ec:	080038fc 	.word	0x080038fc

080035f0 <LCD_Update>:
                }
	}
	vTaskDelete(NULL_PTR);
}

void LCD_Update(void *pvParameter ){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	/* to set first delay */
	vTaskDelay(pdMS_TO_TICKS(3));
 80035f8:	2018      	movs	r0, #24
 80035fa:	f7fd fc51 	bl	8000ea0 <vTaskDelay>

	for(;;){
        // Wait for a notification
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80035fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003602:	2101      	movs	r1, #1
 8003604:	2000      	movs	r0, #0
 8003606:	f7fe fb05 	bl	8001c14 <ulTaskGenericNotifyTake>

		TTL_ReciveString();
 800360a:	f000 f8a7 	bl	800375c <TTL_ReciveString>

		vTaskResume(TaskManager_Handler);
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <LCD_Update+0x3c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fd48 	bl	80010a8 <vTaskResume>
		vTaskResume(ActionTask_Handler);
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <LCD_Update+0x40>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fd43 	bl	80010a8 <vTaskResume>
		vTaskSuspend(NULL_PTR);
 8003622:	2000      	movs	r0, #0
 8003624:	f7fd fc70 	bl	8000f08 <vTaskSuspend>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003628:	e7e9      	b.n	80035fe <LCD_Update+0xe>
 800362a:	bf00      	nop
 800362c:	200046e4 	.word	0x200046e4
 8003630:	200046e8 	.word	0x200046e8

08003634 <LedShape1>:
	}

	vTaskDelete(NULL_PTR);
}

void LedShape1(){
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
	for (uint8 i = 0 ; i < 10 ; i++){
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
 800363e:	e02e      	b.n	800369e <LedShape1+0x6a>
		Dio_EnumSetterPin(Dio_A9, STD_ON);
 8003640:	2101      	movs	r1, #1
 8003642:	2009      	movs	r0, #9
 8003644:	f7ff f838 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A10, STD_OFF);
 8003648:	2100      	movs	r1, #0
 800364a:	200a      	movs	r0, #10
 800364c:	f7ff f834 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A11, STD_OFF);
 8003650:	2100      	movs	r1, #0
 8003652:	200b      	movs	r0, #11
 8003654:	f7ff f830 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A12, STD_ON);
 8003658:	2101      	movs	r1, #1
 800365a:	200c      	movs	r0, #12
 800365c:	f7ff f82c 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_VidRunnable();
 8003660:	f7ff f850 	bl	8002704 <Dio_VidRunnable>
		vTaskDelay(pdMS_TO_TICKS(250));
 8003664:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003668:	f7fd fc1a 	bl	8000ea0 <vTaskDelay>
		Dio_EnumSetterPin(Dio_A9, STD_OFF);
 800366c:	2100      	movs	r1, #0
 800366e:	2009      	movs	r0, #9
 8003670:	f7ff f822 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A10, STD_ON);
 8003674:	2101      	movs	r1, #1
 8003676:	200a      	movs	r0, #10
 8003678:	f7ff f81e 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A11, STD_ON);
 800367c:	2101      	movs	r1, #1
 800367e:	200b      	movs	r0, #11
 8003680:	f7ff f81a 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A12, STD_OFF);
 8003684:	2100      	movs	r1, #0
 8003686:	200c      	movs	r0, #12
 8003688:	f7ff f816 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_VidRunnable();
 800368c:	f7ff f83a 	bl	8002704 <Dio_VidRunnable>
		vTaskDelay(pdMS_TO_TICKS(250));
 8003690:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003694:	f7fd fc04 	bl	8000ea0 <vTaskDelay>
	for (uint8 i = 0 ; i < 10 ; i++){
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	3301      	adds	r3, #1
 800369c:	71fb      	strb	r3, [r7, #7]
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	d9cd      	bls.n	8003640 <LedShape1+0xc>
	}
	vTaskResume(TaskManager_Handler);
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <LedShape1+0x8c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fcfd 	bl	80010a8 <vTaskResume>
	vTaskResume(ActionTask_Handler);
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <LedShape1+0x90>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fcf8 	bl	80010a8 <vTaskResume>
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200046e4 	.word	0x200046e4
 80036c4:	200046e8 	.word	0x200046e8

080036c8 <LedShape2>:
void LedShape2(){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
	for (uint8 i = 0 ; i < 10 ; i++){
 80036ce:	2300      	movs	r3, #0
 80036d0:	71fb      	strb	r3, [r7, #7]
 80036d2:	e02e      	b.n	8003732 <LedShape2+0x6a>
		Dio_EnumSetterPin(Dio_A9, STD_ON);
 80036d4:	2101      	movs	r1, #1
 80036d6:	2009      	movs	r0, #9
 80036d8:	f7fe ffee 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A10, STD_OFF);
 80036dc:	2100      	movs	r1, #0
 80036de:	200a      	movs	r0, #10
 80036e0:	f7fe ffea 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A11, STD_ON);
 80036e4:	2101      	movs	r1, #1
 80036e6:	200b      	movs	r0, #11
 80036e8:	f7fe ffe6 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A12, STD_OFF);
 80036ec:	2100      	movs	r1, #0
 80036ee:	200c      	movs	r0, #12
 80036f0:	f7fe ffe2 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_VidRunnable();
 80036f4:	f7ff f806 	bl	8002704 <Dio_VidRunnable>
		vTaskDelay(pdMS_TO_TICKS(250));
 80036f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036fc:	f7fd fbd0 	bl	8000ea0 <vTaskDelay>
		Dio_EnumSetterPin(Dio_A9, STD_OFF);
 8003700:	2100      	movs	r1, #0
 8003702:	2009      	movs	r0, #9
 8003704:	f7fe ffd8 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A10, STD_ON);
 8003708:	2101      	movs	r1, #1
 800370a:	200a      	movs	r0, #10
 800370c:	f7fe ffd4 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A11, STD_OFF);
 8003710:	2100      	movs	r1, #0
 8003712:	200b      	movs	r0, #11
 8003714:	f7fe ffd0 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_EnumSetterPin(Dio_A12, STD_ON);
 8003718:	2101      	movs	r1, #1
 800371a:	200c      	movs	r0, #12
 800371c:	f7fe ffcc 	bl	80026b8 <Dio_EnumSetterPin>
		Dio_VidRunnable();
 8003720:	f7fe fff0 	bl	8002704 <Dio_VidRunnable>
		vTaskDelay(pdMS_TO_TICKS(250));
 8003724:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003728:	f7fd fbba 	bl	8000ea0 <vTaskDelay>
	for (uint8 i = 0 ; i < 10 ; i++){
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	3301      	adds	r3, #1
 8003730:	71fb      	strb	r3, [r7, #7]
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b09      	cmp	r3, #9
 8003736:	d9cd      	bls.n	80036d4 <LedShape2+0xc>
	}
	vTaskResume(TaskManager_Handler);
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <LedShape2+0x8c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd fcb3 	bl	80010a8 <vTaskResume>
	vTaskResume(ActionTask_Handler);
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <LedShape2+0x90>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fcae 	bl	80010a8 <vTaskResume>
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	200046e4 	.word	0x200046e4
 8003758:	200046e8 	.word	0x200046e8

0800375c <TTL_ReciveString>:
	}
	vTaskResume(TaskManager_Handler);
	vTaskResume(ActionTask_Handler);
}*/

void TTL_ReciveString(){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	/* declare buffer */
	uint8 RecivedMassage ;
	USART_TransmitString(UART3,"     ");
 8003762:	4913      	ldr	r1, [pc, #76]	; (80037b0 <TTL_ReciveString+0x54>)
 8003764:	2002      	movs	r0, #2
 8003766:	f7ff fdb3 	bl	80032d0 <USART_TransmitString>

	/*  to recive string from putty using TTL module */
	while ( RecivedMassage != '#') {
 800376a:	e019      	b.n	80037a0 <TTL_ReciveString+0x44>

		RecivedMassage = USART_ReceiveByte(UART3) ;
 800376c:	2002      	movs	r0, #2
 800376e:	f7ff fd1d 	bl	80031ac <USART_ReceiveByte>
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]

		if ((RecivedMassage >= 'A' && RecivedMassage <= 'Z')
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d902      	bls.n	8003782 <TTL_ReciveString+0x26>
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	2b5a      	cmp	r3, #90	; 0x5a
 8003780:	d905      	bls.n	800378e <TTL_ReciveString+0x32>
			|| (RecivedMassage >= 'a' && RecivedMassage <= 'z') ){
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2b60      	cmp	r3, #96	; 0x60
 8003786:	d90b      	bls.n	80037a0 <TTL_ReciveString+0x44>
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b7a      	cmp	r3, #122	; 0x7a
 800378c:	d808      	bhi.n	80037a0 <TTL_ReciveString+0x44>

			/* to transmit data */
			USART_TransmitString(UART3,&RecivedMassage);
 800378e:	1dfb      	adds	r3, r7, #7
 8003790:	4619      	mov	r1, r3
 8003792:	2002      	movs	r0, #2
 8003794:	f7ff fd9c 	bl	80032d0 <USART_TransmitString>
			LCD_VidSendChar(RecivedMassage);
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff f976 	bl	8002a8c <LCD_VidSendChar>
	while ( RecivedMassage != '#') {
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	2b23      	cmp	r3, #35	; 0x23
 80037a4:	d1e2      	bne.n	800376c <TTL_ReciveString+0x10>
		}//end if
	}//end while
}
 80037a6:	bf00      	nop
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08003918 	.word	0x08003918

080037b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037b4:	480d      	ldr	r0, [pc, #52]	; (80037ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80037b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037bc:	480c      	ldr	r0, [pc, #48]	; (80037f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80037be:	490d      	ldr	r1, [pc, #52]	; (80037f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <LoopForever+0xe>)
  movs r3, #0
 80037c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c4:	e002      	b.n	80037cc <LoopCopyDataInit>

080037c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ca:	3304      	adds	r3, #4

080037cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d0:	d3f9      	bcc.n	80037c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80037d4:	4c0a      	ldr	r4, [pc, #40]	; (8003800 <LoopForever+0x16>)
  movs r3, #0
 80037d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d8:	e001      	b.n	80037de <LoopFillZerobss>

080037da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037dc:	3204      	adds	r2, #4

080037de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e0:	d3fb      	bcc.n	80037da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037e2:	f000 f819 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037e6:	f7ff fd93 	bl	8003310 <main>

080037ea <LoopForever>:

LoopForever:
  b LoopForever
 80037ea:	e7fe      	b.n	80037ea <LoopForever>
  ldr   r0, =_estack
 80037ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80037f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80037f8:	08003928 	.word	0x08003928
  ldr r2, =_sbss
 80037fc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003800:	200046f8 	.word	0x200046f8

08003804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003804:	e7fe      	b.n	8003804 <ADC1_2_IRQHandler>

08003806 <memset>:
 8003806:	4603      	mov	r3, r0
 8003808:	4402      	add	r2, r0
 800380a:	4293      	cmp	r3, r2
 800380c:	d100      	bne.n	8003810 <memset+0xa>
 800380e:	4770      	bx	lr
 8003810:	f803 1b01 	strb.w	r1, [r3], #1
 8003814:	e7f9      	b.n	800380a <memset+0x4>
	...

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	2600      	movs	r6, #0
 800381c:	4d0c      	ldr	r5, [pc, #48]	; (8003850 <__libc_init_array+0x38>)
 800381e:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 8003820:	1b64      	subs	r4, r4, r5
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	f000 f828 	bl	800387c <_init>
 800382c:	2600      	movs	r6, #0
 800382e:	4d0a      	ldr	r5, [pc, #40]	; (8003858 <__libc_init_array+0x40>)
 8003830:	4c0a      	ldr	r4, [pc, #40]	; (800385c <__libc_init_array+0x44>)
 8003832:	1b64      	subs	r4, r4, r5
 8003834:	10a4      	asrs	r4, r4, #2
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08003920 	.word	0x08003920
 8003854:	08003920 	.word	0x08003920
 8003858:	08003920 	.word	0x08003920
 800385c:	08003924 	.word	0x08003924

08003860 <memcpy>:
 8003860:	440a      	add	r2, r1
 8003862:	4291      	cmp	r1, r2
 8003864:	f100 33ff 	add.w	r3, r0, #4294967295
 8003868:	d100      	bne.n	800386c <memcpy+0xc>
 800386a:	4770      	bx	lr
 800386c:	b510      	push	{r4, lr}
 800386e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003872:	4291      	cmp	r1, r2
 8003874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003878:	d1f9      	bne.n	800386e <memcpy+0xe>
 800387a:	bd10      	pop	{r4, pc}

0800387c <_init>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr

08003888 <_fini>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr
